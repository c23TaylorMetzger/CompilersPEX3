$ template make_utils()
def caller(n=1):
    import inspect
    return inspect.getouterframes(inspect.currentframe())[n][3]
	
def abstract():
    raise NotImplementedError(caller() + ' must be implemented in subclass')

class Stack(list):
    def push(self, value):
        self.append(value)
    
    def peek(self):
        return self[len(self)-1]
    
    def empty(self):
        return len(self) == 0
        	
class PushbackReader(object):
    def __init__(self, reader):
        self.__reader = reader
        self.__stack = Stack()

    def peek (self):
        if (len(self.__stack) > 0 ): 
    	    result = self.__stack.peek()
        else:
    	    result = self.__reader.read(1)
    	    self.__reader.seek(-1, 1) # go back to the previous position
        return result

    def read (self):
        if ( len(self.__stack) > 0 ):
    	    return self.__stack.pop()
        return self.__reader.read(1)

    def unread (self, c):
        self.__stack.append(c)

class StringBuffer(object):
  def __init__(self, obj=None):
      self.buffer = [] 
      if not(obj == None):
          if isinstance(obj, StringType):
              self.buffer.extend(list(obj))
          else:
              self.buffer.extend(list(str(obj)))
      
  def append(self, obj):
      if isinstance(obj, StringType):
          self.buffer.extend(list(obj))
      else:
          self.buffer.extend(list(str(obj)))
      
  def charAt(self, index):
      return self.buffer[index]
  
  def __len__(self):
      return len(self.buffer)
  
  def __eq__(self, other):
      if type(self) != type(other):
          return False
      else:
          return (self.buffer == other.buffer)
  
  def __ne__(self, other):
      if type(self) != type(other):
          return True
      else:
          return (self.buffer != other.buffer)
        
  def clear(self):
      del self.buffer[0:len(self.buffer)]
  
  def __str__(self):
      return ''.join(self.buffer)
      
  def __repr__(self):
      return "'" + self.__str__() + "'"
  
  def substring(self, start, finish):
      return ''.join(self.buffer[start:finish])
      
  def __getitem__(self, index):
      return self.buffer[index]
      
  def __setitem__(self, index, c):
      if not(isinstance(c, StringType)):
          raise RuntimeError("Only single characters can be assigned")
      if not(len(c) == 1):
          raise RuntimeError("Only single characters can be assigned")
      self.buffer[index] = c
  
  def __iter__(self):
      return self.buffer
  
  def __getslice__(self, start, finish):
      return self.substring(start, finish)
      
  def reverse(self):
      self.buffer.reverse()
    
  def __contains__(self, c):
      if not(isinstance(c, StringType)):
          raise RuntimeError("Only single characters can be assigned")
      if not(len(c) == 1):
          raise RuntimeError("Only single characters can be assigned")
      return self.buffer.__contains__(c)
      
  def contains(self, c):
      self.__contains__(c)

$ end template
