/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using CS426.node;

namespace CS426.analysis {


public interface Analysis : Switch
{
    Object GetIn(Node node);
    void SetIn(Node node, Object inobj);
    Object GetOut(Node node);
    void SetOut(Node node, Object outobj);

    void CaseStart(Start node);
    void CaseAProgram(AProgram node);
    void CaseAMultipleStatements(AMultipleStatements node);
    void CaseASingleStatements(ASingleStatements node);
    void CaseADeclarationStatementStatement(ADeclarationStatementStatement node);
    void CaseAFunctionCallStatementStatement(AFunctionCallStatementStatement node);
    void CaseAAssignStatementStatement(AAssignStatementStatement node);
    void CaseABranchingStatementStatement(ABranchingStatementStatement node);
    void CaseAIterationStatementStatement(AIterationStatementStatement node);
    void CaseAHelperFunctionDeclareStatement(AHelperFunctionDeclareStatement node);
    void CaseAMainFunctionDeclareStatement(AMainFunctionDeclareStatement node);
    void CaseADeclaration(ADeclaration node);
    void CaseAIntType(AIntType node);
    void CaseAStrType(AStrType node);
    void CaseAFloatType(AFloatType node);
    void CaseAConstType(AConstType node);
    void CaseAFunctionCall(AFunctionCall node);
    void CaseAMultipleParameters(AMultipleParameters node);
    void CaseASingleParameters(ASingleParameters node);
    void CaseAMathParameter(AMathParameter node);
    void CaseALogicParameter(ALogicParameter node);
    void CaseAEmptyParameter(AEmptyParameter node);
    void CaseAAssignment(AAssignment node);
    void CaseAAddExpression(AAddExpression node);
    void CaseASubtractExpression(ASubtractExpression node);
    void CaseAPassExpression(APassExpression node);
    void CaseAMultiplyExpression2(AMultiplyExpression2 node);
    void CaseADivideExpression2(ADivideExpression2 node);
    void CaseAPassExpression2(APassExpression2 node);
    void CaseAParenthesisExpression3(AParenthesisExpression3 node);
    void CaseAPassExpression3(APassExpression3 node);
    void CaseANegativeExpression4(ANegativeExpression4 node);
    void CaseAPassExpression4(APassExpression4 node);
    void CaseAIntegerOperand(AIntegerOperand node);
    void CaseAFloatOperand(AFloatOperand node);
    void CaseAEngineeringOperand(AEngineeringOperand node);
    void CaseAStringOperand(AStringOperand node);
    void CaseAVariableOperand(AVariableOperand node);
    void CaseABranch(ABranch node);
    void CaseAIfCurls(AIfCurls node);
    void CaseAIfSquares(AIfSquares node);
    void CaseAThenSquares(AThenSquares node);
    void CaseAComplexLogicalExpressionLogical(AComplexLogicalExpressionLogical node);
    void CaseASingleLogicalExpressionLogical(ASingleLogicalExpressionLogical node);
    void CaseAComparison(AComparison node);
    void CaseAGreaterThanOperator(AGreaterThanOperator node);
    void CaseAGreaterEqualOperator(AGreaterEqualOperator node);
    void CaseAEqualOperator(AEqualOperator node);
    void CaseALessThanOperator(ALessThanOperator node);
    void CaseALessEqualOperator(ALessEqualOperator node);
    void CaseAAndBoolean(AAndBoolean node);
    void CaseAOrBoolean(AOrBoolean node);
    void CaseANotBoolean(ANotBoolean node);
    void CaseAIterate(AIterate node);
    void CaseAHelperDeclare(AHelperDeclare node);
    void CaseAMainDeclare(AMainDeclare node);

    void CaseTEol(TEol node);
    void CaseTAssign(TAssign node);
    void CaseTComment(TComment node);
    void CaseTBlank(TBlank node);
    void CaseTPlus(TPlus node);
    void CaseTMinus(TMinus node);
    void CaseTMult(TMult node);
    void CaseTDiv(TDiv node);
    void CaseTLeftparent(TLeftparent node);
    void CaseTRightparent(TRightparent node);
    void CaseTAnd(TAnd node);
    void CaseTOr(TOr node);
    void CaseTNot(TNot node);
    void CaseTIntdec(TIntdec node);
    void CaseTStrdec(TStrdec node);
    void CaseTFloatdec(TFloatdec node);
    void CaseTConstdec(TConstdec node);
    void CaseTIf(TIf node);
    void CaseTLeftcurl(TLeftcurl node);
    void CaseTRightcurl(TRightcurl node);
    void CaseTLeftsquare(TLeftsquare node);
    void CaseTRightsquare(TRightsquare node);
    void CaseTThen(TThen node);
    void CaseTGrtr(TGrtr node);
    void CaseTGrtreq(TGrtreq node);
    void CaseTEqual(TEqual node);
    void CaseTLess(TLess node);
    void CaseTLesseq(TLesseq node);
    void CaseTLoop(TLoop node);
    void CaseTFunc(TFunc node);
    void CaseTParam(TParam node);
    void CaseTMain(TMain node);
    void CaseTId(TId node);
    void CaseTInteger(TInteger node);
    void CaseTFloat(TFloat node);
    void CaseTEngin(TEngin node);
    void CaseTString(TString node);
    void CaseEOF(EOF node);
}


public class AnalysisAdapter : Analysis
{
    private Hashtable inhash;
    private Hashtable outhash;

    public virtual Object GetIn(Node node)
    {
        if(inhash == null)
        {
            return null;
        }

        return inhash[node];
    }

    public virtual void SetIn(Node node, Object inobj)
    {
        if(this.inhash == null)
        {
            this.inhash = new Hashtable(1);
        }

        if(inobj != null)
        {
            this.inhash[node] = inobj;
        }
        else
        {
            this.inhash.Remove(node);
        }
    }
    public virtual Object GetOut(Node node)
    {
        if(outhash == null)
        {
            return null;
        }

        return outhash[node];
    }

    public virtual void SetOut(Node node, Object outobj)
    {
        if(this.outhash == null)
        {
            this.outhash = new Hashtable(1);
        }

        if(outobj != null)
        {
            this.outhash[node] = outobj;
        }
        else
        {
            this.outhash.Remove(node);
        }
    }
    public virtual void CaseStart(Start node)
    {
        DefaultCase(node);
    }

    public virtual void CaseAProgram(AProgram node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleStatements(AMultipleStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleStatements(ASingleStatements node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclarationStatementStatement(ADeclarationStatementStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionCallStatementStatement(AFunctionCallStatementStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignStatementStatement(AAssignStatementStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABranchingStatementStatement(ABranchingStatementStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIterationStatementStatement(AIterationStatementStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAHelperFunctionDeclareStatement(AHelperFunctionDeclareStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainFunctionDeclareStatement(AMainFunctionDeclareStatement node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADeclaration(ADeclaration node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntType(AIntType node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStrType(AStrType node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatType(AFloatType node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAConstType(AConstType node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFunctionCall(AFunctionCall node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultipleParameters(AMultipleParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleParameters(ASingleParameters node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMathParameter(AMathParameter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALogicParameter(ALogicParameter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEmptyParameter(AEmptyParameter node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAssignment(AAssignment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAddExpression(AAddExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASubtractExpression(ASubtractExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression(APassExpression node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMultiplyExpression2(AMultiplyExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseADivideExpression2(ADivideExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression2(APassExpression2 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAParenthesisExpression3(AParenthesisExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression3(APassExpression3 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANegativeExpression4(ANegativeExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAPassExpression4(APassExpression4 node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIntegerOperand(AIntegerOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAFloatOperand(AFloatOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEngineeringOperand(AEngineeringOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAStringOperand(AStringOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAVariableOperand(AVariableOperand node)
    {
        DefaultCase(node);
    }
    public virtual void CaseABranch(ABranch node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfCurls(AIfCurls node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIfSquares(AIfSquares node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAThenSquares(AThenSquares node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAComplexLogicalExpressionLogical(AComplexLogicalExpressionLogical node)
    {
        DefaultCase(node);
    }
    public virtual void CaseASingleLogicalExpressionLogical(ASingleLogicalExpressionLogical node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAComparison(AComparison node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterThanOperator(AGreaterThanOperator node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAGreaterEqualOperator(AGreaterEqualOperator node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAEqualOperator(AEqualOperator node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessThanOperator(ALessThanOperator node)
    {
        DefaultCase(node);
    }
    public virtual void CaseALessEqualOperator(ALessEqualOperator node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAAndBoolean(AAndBoolean node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAOrBoolean(AOrBoolean node)
    {
        DefaultCase(node);
    }
    public virtual void CaseANotBoolean(ANotBoolean node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAIterate(AIterate node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAHelperDeclare(AHelperDeclare node)
    {
        DefaultCase(node);
    }
    public virtual void CaseAMainDeclare(AMainDeclare node)
    {
        DefaultCase(node);
    }

    public virtual void CaseTEol(TEol node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAssign(TAssign node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTComment(TComment node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTBlank(TBlank node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTPlus(TPlus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMinus(TMinus node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMult(TMult node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTDiv(TDiv node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLeftparent(TLeftparent node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRightparent(TRightparent node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTAnd(TAnd node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTOr(TOr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTNot(TNot node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIntdec(TIntdec node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTStrdec(TStrdec node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloatdec(TFloatdec node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTConstdec(TConstdec node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTIf(TIf node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLeftcurl(TLeftcurl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRightcurl(TRightcurl node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLeftsquare(TLeftsquare node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTRightsquare(TRightsquare node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTThen(TThen node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGrtr(TGrtr node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTGrtreq(TGrtreq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEqual(TEqual node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLess(TLess node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLesseq(TLesseq node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTLoop(TLoop node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFunc(TFunc node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTParam(TParam node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTMain(TMain node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTId(TId node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTInteger(TInteger node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTFloat(TFloat node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTEngin(TEngin node)
    {
        DefaultCase(node);
    }
    public virtual void CaseTString(TString node)
    {
        DefaultCase(node);
    }

    public virtual void CaseEOF(EOF node)
    {
        DefaultCase(node);
    }

    public virtual void DefaultCase(Node node)
    {
    }
}


public class DepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetPProgram().Apply(this);
        node.GetEOF().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InASingleStatements(ASingleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleStatements(ASingleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleStatements(ASingleStatements node)
    {
        InASingleStatements(node);
        OutASingleStatements(node);
    }
    public virtual void InADeclarationStatementStatement(ADeclarationStatementStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatementStatement(ADeclarationStatementStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatementStatement(ADeclarationStatementStatement node)
    {
        InADeclarationStatementStatement(node);
        if(node.GetDeclaration() != null)
        {
            node.GetDeclaration().Apply(this);
        }
        OutADeclarationStatementStatement(node);
    }
    public virtual void InAFunctionCallStatementStatement(AFunctionCallStatementStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCallStatementStatement(AFunctionCallStatementStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCallStatementStatement(AFunctionCallStatementStatement node)
    {
        InAFunctionCallStatementStatement(node);
        if(node.GetFunctionCall() != null)
        {
            node.GetFunctionCall().Apply(this);
        }
        OutAFunctionCallStatementStatement(node);
    }
    public virtual void InAAssignStatementStatement(AAssignStatementStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStatementStatement(AAssignStatementStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStatementStatement(AAssignStatementStatement node)
    {
        InAAssignStatementStatement(node);
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        OutAAssignStatementStatement(node);
    }
    public virtual void InABranchingStatementStatement(ABranchingStatementStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutABranchingStatementStatement(ABranchingStatementStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseABranchingStatementStatement(ABranchingStatementStatement node)
    {
        InABranchingStatementStatement(node);
        if(node.GetBranch() != null)
        {
            node.GetBranch().Apply(this);
        }
        OutABranchingStatementStatement(node);
    }
    public virtual void InAIterationStatementStatement(AIterationStatementStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIterationStatementStatement(AIterationStatementStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIterationStatementStatement(AIterationStatementStatement node)
    {
        InAIterationStatementStatement(node);
        if(node.GetIterate() != null)
        {
            node.GetIterate().Apply(this);
        }
        OutAIterationStatementStatement(node);
    }
    public virtual void InAHelperFunctionDeclareStatement(AHelperFunctionDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHelperFunctionDeclareStatement(AHelperFunctionDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAHelperFunctionDeclareStatement(AHelperFunctionDeclareStatement node)
    {
        InAHelperFunctionDeclareStatement(node);
        if(node.GetHelperDeclare() != null)
        {
            node.GetHelperDeclare().Apply(this);
        }
        OutAHelperFunctionDeclareStatement(node);
    }
    public virtual void InAMainFunctionDeclareStatement(AMainFunctionDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainFunctionDeclareStatement(AMainFunctionDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainFunctionDeclareStatement(AMainFunctionDeclareStatement node)
    {
        InAMainFunctionDeclareStatement(node);
        if(node.GetMainDeclare() != null)
        {
            node.GetMainDeclare().Apply(this);
        }
        OutAMainFunctionDeclareStatement(node);
    }
    public virtual void InADeclaration(ADeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclaration(ADeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclaration(ADeclaration node)
    {
        InADeclaration(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutADeclaration(node);
    }
    public virtual void InAIntType(AIntType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntType(AIntType node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntType(AIntType node)
    {
        InAIntType(node);
        if(node.GetIntdec() != null)
        {
            node.GetIntdec().Apply(this);
        }
        OutAIntType(node);
    }
    public virtual void InAStrType(AStrType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStrType(AStrType node)
    {
        DefaultOut(node);
    }

    public override void CaseAStrType(AStrType node)
    {
        InAStrType(node);
        if(node.GetStrdec() != null)
        {
            node.GetStrdec().Apply(this);
        }
        OutAStrType(node);
    }
    public virtual void InAFloatType(AFloatType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatType(AFloatType node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatType(AFloatType node)
    {
        InAFloatType(node);
        if(node.GetFloatdec() != null)
        {
            node.GetFloatdec().Apply(this);
        }
        OutAFloatType(node);
    }
    public virtual void InAConstType(AConstType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstType(AConstType node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstType(AConstType node)
    {
        InAConstType(node);
        if(node.GetConstdec() != null)
        {
            node.GetConstdec().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutAConstType(node);
    }
    public virtual void InAFunctionCall(AFunctionCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCall(AFunctionCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCall(AFunctionCall node)
    {
        InAFunctionCall(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetLeftparent() != null)
        {
            node.GetLeftparent().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetRightparent() != null)
        {
            node.GetRightparent().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAFunctionCall(node);
    }
    public virtual void InAMultipleParameters(AMultipleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleParameters(AMultipleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleParameters(AMultipleParameters node)
    {
        InAMultipleParameters(node);
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        if(node.GetParam() != null)
        {
            node.GetParam().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        OutAMultipleParameters(node);
    }
    public virtual void InASingleParameters(ASingleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleParameters(ASingleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleParameters(ASingleParameters node)
    {
        InASingleParameters(node);
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        OutASingleParameters(node);
    }
    public virtual void InAMathParameter(AMathParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathParameter(AMathParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathParameter(AMathParameter node)
    {
        InAMathParameter(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAMathParameter(node);
    }
    public virtual void InALogicParameter(ALogicParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutALogicParameter(ALogicParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseALogicParameter(ALogicParameter node)
    {
        InALogicParameter(node);
        if(node.GetComparison() != null)
        {
            node.GetComparison().Apply(this);
        }
        OutALogicParameter(node);
    }
    public virtual void InAEmptyParameter(AEmptyParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEmptyParameter(AEmptyParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAEmptyParameter(AEmptyParameter node)
    {
        InAEmptyParameter(node);
        OutAEmptyParameter(node);
    }
    public virtual void InAAssignment(AAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignment(AAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignment(AAssignment node)
    {
        InAAssignment(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        OutAAssignment(node);
    }
    public virtual void InAAddExpression(AAddExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExpression(AAddExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExpression(AAddExpression node)
    {
        InAAddExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAAddExpression(node);
    }
    public virtual void InASubtractExpression(ASubtractExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubtractExpression(ASubtractExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseASubtractExpression(ASubtractExpression node)
    {
        InASubtractExpression(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutASubtractExpression(node);
    }
    public virtual void InAPassExpression(APassExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression(APassExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression(APassExpression node)
    {
        InAPassExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAPassExpression(node);
    }
    public virtual void InAMultiplyExpression2(AMultiplyExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyExpression2(AMultiplyExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyExpression2(AMultiplyExpression2 node)
    {
        InAMultiplyExpression2(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAMultiplyExpression2(node);
    }
    public virtual void InADivideExpression2(ADivideExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideExpression2(ADivideExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideExpression2(ADivideExpression2 node)
    {
        InADivideExpression2(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetDiv() != null)
        {
            node.GetDiv().Apply(this);
        }
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutADivideExpression2(node);
    }
    public virtual void InAPassExpression2(APassExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression2(APassExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression2(APassExpression2 node)
    {
        InAPassExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAPassExpression2(node);
    }
    public virtual void InAParenthesisExpression3(AParenthesisExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthesisExpression3(AParenthesisExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthesisExpression3(AParenthesisExpression3 node)
    {
        InAParenthesisExpression3(node);
        if(node.GetLeftparent() != null)
        {
            node.GetLeftparent().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetRightparent() != null)
        {
            node.GetRightparent().Apply(this);
        }
        OutAParenthesisExpression3(node);
    }
    public virtual void InAPassExpression3(APassExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression3(APassExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression3(APassExpression3 node)
    {
        InAPassExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAPassExpression3(node);
    }
    public virtual void InANegativeExpression4(ANegativeExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegativeExpression4(ANegativeExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegativeExpression4(ANegativeExpression4 node)
    {
        InANegativeExpression4(node);
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutANegativeExpression4(node);
    }
    public virtual void InAPassExpression4(APassExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression4(APassExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression4(APassExpression4 node)
    {
        InAPassExpression4(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExpression4(node);
    }
    public virtual void InAIntegerOperand(AIntegerOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntegerOperand(AIntegerOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntegerOperand(AIntegerOperand node)
    {
        InAIntegerOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntegerOperand(node);
    }
    public virtual void InAFloatOperand(AFloatOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatOperand(AFloatOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatOperand(AFloatOperand node)
    {
        InAFloatOperand(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatOperand(node);
    }
    public virtual void InAEngineeringOperand(AEngineeringOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEngineeringOperand(AEngineeringOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAEngineeringOperand(AEngineeringOperand node)
    {
        InAEngineeringOperand(node);
        if(node.GetEngin() != null)
        {
            node.GetEngin().Apply(this);
        }
        OutAEngineeringOperand(node);
    }
    public virtual void InAStringOperand(AStringOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringOperand(AStringOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringOperand(AStringOperand node)
    {
        InAStringOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
    public virtual void InABranch(ABranch node)
    {
        DefaultIn(node);
    }

    public virtual void OutABranch(ABranch node)
    {
        DefaultOut(node);
    }

    public override void CaseABranch(ABranch node)
    {
        InABranch(node);
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        if(node.GetIfCurls() != null)
        {
            node.GetIfCurls().Apply(this);
        }
        if(node.GetIfSquares() != null)
        {
            node.GetIfSquares().Apply(this);
        }
        if(node.GetThen() != null)
        {
            node.GetThen().Apply(this);
        }
        if(node.GetThenSquares() != null)
        {
            node.GetThenSquares().Apply(this);
        }
        OutABranch(node);
    }
    public virtual void InAIfCurls(AIfCurls node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfCurls(AIfCurls node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfCurls(AIfCurls node)
    {
        InAIfCurls(node);
        if(node.GetLeftcurl() != null)
        {
            node.GetLeftcurl().Apply(this);
        }
        if(node.GetLogical() != null)
        {
            node.GetLogical().Apply(this);
        }
        if(node.GetRightcurl() != null)
        {
            node.GetRightcurl().Apply(this);
        }
        OutAIfCurls(node);
    }
    public virtual void InAIfSquares(AIfSquares node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfSquares(AIfSquares node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfSquares(AIfSquares node)
    {
        InAIfSquares(node);
        if(node.GetLeftsquare() != null)
        {
            node.GetLeftsquare().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRightsquare() != null)
        {
            node.GetRightsquare().Apply(this);
        }
        OutAIfSquares(node);
    }
    public virtual void InAThenSquares(AThenSquares node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThenSquares(AThenSquares node)
    {
        DefaultOut(node);
    }

    public override void CaseAThenSquares(AThenSquares node)
    {
        InAThenSquares(node);
        if(node.GetLeftsquare() != null)
        {
            node.GetLeftsquare().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRightsquare() != null)
        {
            node.GetRightsquare().Apply(this);
        }
        OutAThenSquares(node);
    }
    public virtual void InAComplexLogicalExpressionLogical(AComplexLogicalExpressionLogical node)
    {
        DefaultIn(node);
    }

    public virtual void OutAComplexLogicalExpressionLogical(AComplexLogicalExpressionLogical node)
    {
        DefaultOut(node);
    }

    public override void CaseAComplexLogicalExpressionLogical(AComplexLogicalExpressionLogical node)
    {
        InAComplexLogicalExpressionLogical(node);
        if(node.GetLogical() != null)
        {
            node.GetLogical().Apply(this);
        }
        if(node.GetBoolean() != null)
        {
            node.GetBoolean().Apply(this);
        }
        if(node.GetComparison() != null)
        {
            node.GetComparison().Apply(this);
        }
        OutAComplexLogicalExpressionLogical(node);
    }
    public virtual void InASingleLogicalExpressionLogical(ASingleLogicalExpressionLogical node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleLogicalExpressionLogical(ASingleLogicalExpressionLogical node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleLogicalExpressionLogical(ASingleLogicalExpressionLogical node)
    {
        InASingleLogicalExpressionLogical(node);
        if(node.GetComparison() != null)
        {
            node.GetComparison().Apply(this);
        }
        OutASingleLogicalExpressionLogical(node);
    }
    public virtual void InAComparison(AComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutAComparison(AComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseAComparison(AComparison node)
    {
        InAComparison(node);
        if(node.GetLeftHandExpression() != null)
        {
            node.GetLeftHandExpression().Apply(this);
        }
        if(node.GetOperator() != null)
        {
            node.GetOperator().Apply(this);
        }
        if(node.GetRightHandExpression() != null)
        {
            node.GetRightHandExpression().Apply(this);
        }
        OutAComparison(node);
    }
    public virtual void InAGreaterThanOperator(AGreaterThanOperator node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterThanOperator(AGreaterThanOperator node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterThanOperator(AGreaterThanOperator node)
    {
        InAGreaterThanOperator(node);
        if(node.GetGrtr() != null)
        {
            node.GetGrtr().Apply(this);
        }
        OutAGreaterThanOperator(node);
    }
    public virtual void InAGreaterEqualOperator(AGreaterEqualOperator node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterEqualOperator(AGreaterEqualOperator node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterEqualOperator(AGreaterEqualOperator node)
    {
        InAGreaterEqualOperator(node);
        if(node.GetGrtreq() != null)
        {
            node.GetGrtreq().Apply(this);
        }
        OutAGreaterEqualOperator(node);
    }
    public virtual void InAEqualOperator(AEqualOperator node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualOperator(AEqualOperator node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualOperator(AEqualOperator node)
    {
        InAEqualOperator(node);
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        OutAEqualOperator(node);
    }
    public virtual void InALessThanOperator(ALessThanOperator node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessThanOperator(ALessThanOperator node)
    {
        DefaultOut(node);
    }

    public override void CaseALessThanOperator(ALessThanOperator node)
    {
        InALessThanOperator(node);
        if(node.GetLess() != null)
        {
            node.GetLess().Apply(this);
        }
        OutALessThanOperator(node);
    }
    public virtual void InALessEqualOperator(ALessEqualOperator node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessEqualOperator(ALessEqualOperator node)
    {
        DefaultOut(node);
    }

    public override void CaseALessEqualOperator(ALessEqualOperator node)
    {
        InALessEqualOperator(node);
        if(node.GetLesseq() != null)
        {
            node.GetLesseq().Apply(this);
        }
        OutALessEqualOperator(node);
    }
    public virtual void InAAndBoolean(AAndBoolean node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndBoolean(AAndBoolean node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndBoolean(AAndBoolean node)
    {
        InAAndBoolean(node);
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        OutAAndBoolean(node);
    }
    public virtual void InAOrBoolean(AOrBoolean node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrBoolean(AOrBoolean node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrBoolean(AOrBoolean node)
    {
        InAOrBoolean(node);
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        OutAOrBoolean(node);
    }
    public virtual void InANotBoolean(ANotBoolean node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotBoolean(ANotBoolean node)
    {
        DefaultOut(node);
    }

    public override void CaseANotBoolean(ANotBoolean node)
    {
        InANotBoolean(node);
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        OutANotBoolean(node);
    }
    public virtual void InAIterate(AIterate node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIterate(AIterate node)
    {
        DefaultOut(node);
    }

    public override void CaseAIterate(AIterate node)
    {
        InAIterate(node);
        if(node.GetLoop() != null)
        {
            node.GetLoop().Apply(this);
        }
        if(node.GetLeftcurl() != null)
        {
            node.GetLeftcurl().Apply(this);
        }
        if(node.GetLogical() != null)
        {
            node.GetLogical().Apply(this);
        }
        if(node.GetRightcurl() != null)
        {
            node.GetRightcurl().Apply(this);
        }
        if(node.GetLeftsquare() != null)
        {
            node.GetLeftsquare().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRightsquare() != null)
        {
            node.GetRightsquare().Apply(this);
        }
        OutAIterate(node);
    }
    public virtual void InAHelperDeclare(AHelperDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHelperDeclare(AHelperDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAHelperDeclare(AHelperDeclare node)
    {
        InAHelperDeclare(node);
        if(node.GetFunc() != null)
        {
            node.GetFunc().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetLeftcurl() != null)
        {
            node.GetLeftcurl().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetRightcurl() != null)
        {
            node.GetRightcurl().Apply(this);
        }
        if(node.GetLeftsquare() != null)
        {
            node.GetLeftsquare().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRightsquare() != null)
        {
            node.GetRightsquare().Apply(this);
        }
        OutAHelperDeclare(node);
    }
    public virtual void InAMainDeclare(AMainDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainDeclare(AMainDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainDeclare(AMainDeclare node)
    {
        InAMainDeclare(node);
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        if(node.GetLeftcurl() != null)
        {
            node.GetLeftcurl().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetRightcurl() != null)
        {
            node.GetRightcurl().Apply(this);
        }
        if(node.GetLeftsquare() != null)
        {
            node.GetLeftsquare().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetRightsquare() != null)
        {
            node.GetRightsquare().Apply(this);
        }
        OutAMainDeclare(node);
    }
}


public class ReversedDepthFirstAdapter : AnalysisAdapter
{
    public virtual void InStart(Start node)
    {
        DefaultIn(node);
    }

    public virtual void OutStart(Start node)
    {
        DefaultOut(node);
    }

    public virtual void DefaultIn(Node node)
    {
    }

    public virtual void DefaultOut(Node node)
    {
    }

    public override void CaseStart(Start node)
    {
        InStart(node);
        node.GetEOF().Apply(this);
        node.GetPProgram().Apply(this);
        OutStart(node);
    }

    public virtual void InAProgram(AProgram node)
    {
        DefaultIn(node);
    }

    public virtual void OutAProgram(AProgram node)
    {
        DefaultOut(node);
    }

    public override void CaseAProgram(AProgram node)
    {
        InAProgram(node);
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        OutAProgram(node);
    }
    public virtual void InAMultipleStatements(AMultipleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleStatements(AMultipleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleStatements(AMultipleStatements node)
    {
        InAMultipleStatements(node);
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetStatement() != null)
        {
            node.GetStatement().Apply(this);
        }
        OutAMultipleStatements(node);
    }
    public virtual void InASingleStatements(ASingleStatements node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleStatements(ASingleStatements node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleStatements(ASingleStatements node)
    {
        InASingleStatements(node);
        OutASingleStatements(node);
    }
    public virtual void InADeclarationStatementStatement(ADeclarationStatementStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclarationStatementStatement(ADeclarationStatementStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclarationStatementStatement(ADeclarationStatementStatement node)
    {
        InADeclarationStatementStatement(node);
        if(node.GetDeclaration() != null)
        {
            node.GetDeclaration().Apply(this);
        }
        OutADeclarationStatementStatement(node);
    }
    public virtual void InAFunctionCallStatementStatement(AFunctionCallStatementStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCallStatementStatement(AFunctionCallStatementStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCallStatementStatement(AFunctionCallStatementStatement node)
    {
        InAFunctionCallStatementStatement(node);
        if(node.GetFunctionCall() != null)
        {
            node.GetFunctionCall().Apply(this);
        }
        OutAFunctionCallStatementStatement(node);
    }
    public virtual void InAAssignStatementStatement(AAssignStatementStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignStatementStatement(AAssignStatementStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignStatementStatement(AAssignStatementStatement node)
    {
        InAAssignStatementStatement(node);
        if(node.GetAssignment() != null)
        {
            node.GetAssignment().Apply(this);
        }
        OutAAssignStatementStatement(node);
    }
    public virtual void InABranchingStatementStatement(ABranchingStatementStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutABranchingStatementStatement(ABranchingStatementStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseABranchingStatementStatement(ABranchingStatementStatement node)
    {
        InABranchingStatementStatement(node);
        if(node.GetBranch() != null)
        {
            node.GetBranch().Apply(this);
        }
        OutABranchingStatementStatement(node);
    }
    public virtual void InAIterationStatementStatement(AIterationStatementStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIterationStatementStatement(AIterationStatementStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAIterationStatementStatement(AIterationStatementStatement node)
    {
        InAIterationStatementStatement(node);
        if(node.GetIterate() != null)
        {
            node.GetIterate().Apply(this);
        }
        OutAIterationStatementStatement(node);
    }
    public virtual void InAHelperFunctionDeclareStatement(AHelperFunctionDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHelperFunctionDeclareStatement(AHelperFunctionDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAHelperFunctionDeclareStatement(AHelperFunctionDeclareStatement node)
    {
        InAHelperFunctionDeclareStatement(node);
        if(node.GetHelperDeclare() != null)
        {
            node.GetHelperDeclare().Apply(this);
        }
        OutAHelperFunctionDeclareStatement(node);
    }
    public virtual void InAMainFunctionDeclareStatement(AMainFunctionDeclareStatement node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainFunctionDeclareStatement(AMainFunctionDeclareStatement node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainFunctionDeclareStatement(AMainFunctionDeclareStatement node)
    {
        InAMainFunctionDeclareStatement(node);
        if(node.GetMainDeclare() != null)
        {
            node.GetMainDeclare().Apply(this);
        }
        OutAMainFunctionDeclareStatement(node);
    }
    public virtual void InADeclaration(ADeclaration node)
    {
        DefaultIn(node);
    }

    public virtual void OutADeclaration(ADeclaration node)
    {
        DefaultOut(node);
    }

    public override void CaseADeclaration(ADeclaration node)
    {
        InADeclaration(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        OutADeclaration(node);
    }
    public virtual void InAIntType(AIntType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntType(AIntType node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntType(AIntType node)
    {
        InAIntType(node);
        if(node.GetIntdec() != null)
        {
            node.GetIntdec().Apply(this);
        }
        OutAIntType(node);
    }
    public virtual void InAStrType(AStrType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStrType(AStrType node)
    {
        DefaultOut(node);
    }

    public override void CaseAStrType(AStrType node)
    {
        InAStrType(node);
        if(node.GetStrdec() != null)
        {
            node.GetStrdec().Apply(this);
        }
        OutAStrType(node);
    }
    public virtual void InAFloatType(AFloatType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatType(AFloatType node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatType(AFloatType node)
    {
        InAFloatType(node);
        if(node.GetFloatdec() != null)
        {
            node.GetFloatdec().Apply(this);
        }
        OutAFloatType(node);
    }
    public virtual void InAConstType(AConstType node)
    {
        DefaultIn(node);
    }

    public virtual void OutAConstType(AConstType node)
    {
        DefaultOut(node);
    }

    public override void CaseAConstType(AConstType node)
    {
        InAConstType(node);
        if(node.GetType() != null)
        {
            node.GetType().Apply(this);
        }
        if(node.GetConstdec() != null)
        {
            node.GetConstdec().Apply(this);
        }
        OutAConstType(node);
    }
    public virtual void InAFunctionCall(AFunctionCall node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFunctionCall(AFunctionCall node)
    {
        DefaultOut(node);
    }

    public override void CaseAFunctionCall(AFunctionCall node)
    {
        InAFunctionCall(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetRightparent() != null)
        {
            node.GetRightparent().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetLeftparent() != null)
        {
            node.GetLeftparent().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAFunctionCall(node);
    }
    public virtual void InAMultipleParameters(AMultipleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultipleParameters(AMultipleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultipleParameters(AMultipleParameters node)
    {
        InAMultipleParameters(node);
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetParam() != null)
        {
            node.GetParam().Apply(this);
        }
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        OutAMultipleParameters(node);
    }
    public virtual void InASingleParameters(ASingleParameters node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleParameters(ASingleParameters node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleParameters(ASingleParameters node)
    {
        InASingleParameters(node);
        if(node.GetParameter() != null)
        {
            node.GetParameter().Apply(this);
        }
        OutASingleParameters(node);
    }
    public virtual void InAMathParameter(AMathParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMathParameter(AMathParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAMathParameter(AMathParameter node)
    {
        InAMathParameter(node);
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAMathParameter(node);
    }
    public virtual void InALogicParameter(ALogicParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutALogicParameter(ALogicParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseALogicParameter(ALogicParameter node)
    {
        InALogicParameter(node);
        if(node.GetComparison() != null)
        {
            node.GetComparison().Apply(this);
        }
        OutALogicParameter(node);
    }
    public virtual void InAEmptyParameter(AEmptyParameter node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEmptyParameter(AEmptyParameter node)
    {
        DefaultOut(node);
    }

    public override void CaseAEmptyParameter(AEmptyParameter node)
    {
        InAEmptyParameter(node);
        OutAEmptyParameter(node);
    }
    public virtual void InAAssignment(AAssignment node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAssignment(AAssignment node)
    {
        DefaultOut(node);
    }

    public override void CaseAAssignment(AAssignment node)
    {
        InAAssignment(node);
        if(node.GetEol() != null)
        {
            node.GetEol().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetAssign() != null)
        {
            node.GetAssign().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAAssignment(node);
    }
    public virtual void InAAddExpression(AAddExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAddExpression(AAddExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAAddExpression(AAddExpression node)
    {
        InAAddExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetPlus() != null)
        {
            node.GetPlus().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutAAddExpression(node);
    }
    public virtual void InASubtractExpression(ASubtractExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutASubtractExpression(ASubtractExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseASubtractExpression(ASubtractExpression node)
    {
        InASubtractExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        OutASubtractExpression(node);
    }
    public virtual void InAPassExpression(APassExpression node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression(APassExpression node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression(APassExpression node)
    {
        InAPassExpression(node);
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAPassExpression(node);
    }
    public virtual void InAMultiplyExpression2(AMultiplyExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMultiplyExpression2(AMultiplyExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAMultiplyExpression2(AMultiplyExpression2 node)
    {
        InAMultiplyExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetMult() != null)
        {
            node.GetMult().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutAMultiplyExpression2(node);
    }
    public virtual void InADivideExpression2(ADivideExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutADivideExpression2(ADivideExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseADivideExpression2(ADivideExpression2 node)
    {
        InADivideExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        if(node.GetDiv() != null)
        {
            node.GetDiv().Apply(this);
        }
        if(node.GetExpression2() != null)
        {
            node.GetExpression2().Apply(this);
        }
        OutADivideExpression2(node);
    }
    public virtual void InAPassExpression2(APassExpression2 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression2(APassExpression2 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression2(APassExpression2 node)
    {
        InAPassExpression2(node);
        if(node.GetExpression3() != null)
        {
            node.GetExpression3().Apply(this);
        }
        OutAPassExpression2(node);
    }
    public virtual void InAParenthesisExpression3(AParenthesisExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAParenthesisExpression3(AParenthesisExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAParenthesisExpression3(AParenthesisExpression3 node)
    {
        InAParenthesisExpression3(node);
        if(node.GetRightparent() != null)
        {
            node.GetRightparent().Apply(this);
        }
        if(node.GetExpression() != null)
        {
            node.GetExpression().Apply(this);
        }
        if(node.GetLeftparent() != null)
        {
            node.GetLeftparent().Apply(this);
        }
        OutAParenthesisExpression3(node);
    }
    public virtual void InAPassExpression3(APassExpression3 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression3(APassExpression3 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression3(APassExpression3 node)
    {
        InAPassExpression3(node);
        if(node.GetExpression4() != null)
        {
            node.GetExpression4().Apply(this);
        }
        OutAPassExpression3(node);
    }
    public virtual void InANegativeExpression4(ANegativeExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutANegativeExpression4(ANegativeExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseANegativeExpression4(ANegativeExpression4 node)
    {
        InANegativeExpression4(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        if(node.GetMinus() != null)
        {
            node.GetMinus().Apply(this);
        }
        OutANegativeExpression4(node);
    }
    public virtual void InAPassExpression4(APassExpression4 node)
    {
        DefaultIn(node);
    }

    public virtual void OutAPassExpression4(APassExpression4 node)
    {
        DefaultOut(node);
    }

    public override void CaseAPassExpression4(APassExpression4 node)
    {
        InAPassExpression4(node);
        if(node.GetOperand() != null)
        {
            node.GetOperand().Apply(this);
        }
        OutAPassExpression4(node);
    }
    public virtual void InAIntegerOperand(AIntegerOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIntegerOperand(AIntegerOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAIntegerOperand(AIntegerOperand node)
    {
        InAIntegerOperand(node);
        if(node.GetInteger() != null)
        {
            node.GetInteger().Apply(this);
        }
        OutAIntegerOperand(node);
    }
    public virtual void InAFloatOperand(AFloatOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAFloatOperand(AFloatOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAFloatOperand(AFloatOperand node)
    {
        InAFloatOperand(node);
        if(node.GetFloat() != null)
        {
            node.GetFloat().Apply(this);
        }
        OutAFloatOperand(node);
    }
    public virtual void InAEngineeringOperand(AEngineeringOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEngineeringOperand(AEngineeringOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAEngineeringOperand(AEngineeringOperand node)
    {
        InAEngineeringOperand(node);
        if(node.GetEngin() != null)
        {
            node.GetEngin().Apply(this);
        }
        OutAEngineeringOperand(node);
    }
    public virtual void InAStringOperand(AStringOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAStringOperand(AStringOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAStringOperand(AStringOperand node)
    {
        InAStringOperand(node);
        if(node.GetString() != null)
        {
            node.GetString().Apply(this);
        }
        OutAStringOperand(node);
    }
    public virtual void InAVariableOperand(AVariableOperand node)
    {
        DefaultIn(node);
    }

    public virtual void OutAVariableOperand(AVariableOperand node)
    {
        DefaultOut(node);
    }

    public override void CaseAVariableOperand(AVariableOperand node)
    {
        InAVariableOperand(node);
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        OutAVariableOperand(node);
    }
    public virtual void InABranch(ABranch node)
    {
        DefaultIn(node);
    }

    public virtual void OutABranch(ABranch node)
    {
        DefaultOut(node);
    }

    public override void CaseABranch(ABranch node)
    {
        InABranch(node);
        if(node.GetThenSquares() != null)
        {
            node.GetThenSquares().Apply(this);
        }
        if(node.GetThen() != null)
        {
            node.GetThen().Apply(this);
        }
        if(node.GetIfSquares() != null)
        {
            node.GetIfSquares().Apply(this);
        }
        if(node.GetIfCurls() != null)
        {
            node.GetIfCurls().Apply(this);
        }
        if(node.GetIf() != null)
        {
            node.GetIf().Apply(this);
        }
        OutABranch(node);
    }
    public virtual void InAIfCurls(AIfCurls node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfCurls(AIfCurls node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfCurls(AIfCurls node)
    {
        InAIfCurls(node);
        if(node.GetRightcurl() != null)
        {
            node.GetRightcurl().Apply(this);
        }
        if(node.GetLogical() != null)
        {
            node.GetLogical().Apply(this);
        }
        if(node.GetLeftcurl() != null)
        {
            node.GetLeftcurl().Apply(this);
        }
        OutAIfCurls(node);
    }
    public virtual void InAIfSquares(AIfSquares node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIfSquares(AIfSquares node)
    {
        DefaultOut(node);
    }

    public override void CaseAIfSquares(AIfSquares node)
    {
        InAIfSquares(node);
        if(node.GetRightsquare() != null)
        {
            node.GetRightsquare().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLeftsquare() != null)
        {
            node.GetLeftsquare().Apply(this);
        }
        OutAIfSquares(node);
    }
    public virtual void InAThenSquares(AThenSquares node)
    {
        DefaultIn(node);
    }

    public virtual void OutAThenSquares(AThenSquares node)
    {
        DefaultOut(node);
    }

    public override void CaseAThenSquares(AThenSquares node)
    {
        InAThenSquares(node);
        if(node.GetRightsquare() != null)
        {
            node.GetRightsquare().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLeftsquare() != null)
        {
            node.GetLeftsquare().Apply(this);
        }
        OutAThenSquares(node);
    }
    public virtual void InAComplexLogicalExpressionLogical(AComplexLogicalExpressionLogical node)
    {
        DefaultIn(node);
    }

    public virtual void OutAComplexLogicalExpressionLogical(AComplexLogicalExpressionLogical node)
    {
        DefaultOut(node);
    }

    public override void CaseAComplexLogicalExpressionLogical(AComplexLogicalExpressionLogical node)
    {
        InAComplexLogicalExpressionLogical(node);
        if(node.GetComparison() != null)
        {
            node.GetComparison().Apply(this);
        }
        if(node.GetBoolean() != null)
        {
            node.GetBoolean().Apply(this);
        }
        if(node.GetLogical() != null)
        {
            node.GetLogical().Apply(this);
        }
        OutAComplexLogicalExpressionLogical(node);
    }
    public virtual void InASingleLogicalExpressionLogical(ASingleLogicalExpressionLogical node)
    {
        DefaultIn(node);
    }

    public virtual void OutASingleLogicalExpressionLogical(ASingleLogicalExpressionLogical node)
    {
        DefaultOut(node);
    }

    public override void CaseASingleLogicalExpressionLogical(ASingleLogicalExpressionLogical node)
    {
        InASingleLogicalExpressionLogical(node);
        if(node.GetComparison() != null)
        {
            node.GetComparison().Apply(this);
        }
        OutASingleLogicalExpressionLogical(node);
    }
    public virtual void InAComparison(AComparison node)
    {
        DefaultIn(node);
    }

    public virtual void OutAComparison(AComparison node)
    {
        DefaultOut(node);
    }

    public override void CaseAComparison(AComparison node)
    {
        InAComparison(node);
        if(node.GetRightHandExpression() != null)
        {
            node.GetRightHandExpression().Apply(this);
        }
        if(node.GetOperator() != null)
        {
            node.GetOperator().Apply(this);
        }
        if(node.GetLeftHandExpression() != null)
        {
            node.GetLeftHandExpression().Apply(this);
        }
        OutAComparison(node);
    }
    public virtual void InAGreaterThanOperator(AGreaterThanOperator node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterThanOperator(AGreaterThanOperator node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterThanOperator(AGreaterThanOperator node)
    {
        InAGreaterThanOperator(node);
        if(node.GetGrtr() != null)
        {
            node.GetGrtr().Apply(this);
        }
        OutAGreaterThanOperator(node);
    }
    public virtual void InAGreaterEqualOperator(AGreaterEqualOperator node)
    {
        DefaultIn(node);
    }

    public virtual void OutAGreaterEqualOperator(AGreaterEqualOperator node)
    {
        DefaultOut(node);
    }

    public override void CaseAGreaterEqualOperator(AGreaterEqualOperator node)
    {
        InAGreaterEqualOperator(node);
        if(node.GetGrtreq() != null)
        {
            node.GetGrtreq().Apply(this);
        }
        OutAGreaterEqualOperator(node);
    }
    public virtual void InAEqualOperator(AEqualOperator node)
    {
        DefaultIn(node);
    }

    public virtual void OutAEqualOperator(AEqualOperator node)
    {
        DefaultOut(node);
    }

    public override void CaseAEqualOperator(AEqualOperator node)
    {
        InAEqualOperator(node);
        if(node.GetEqual() != null)
        {
            node.GetEqual().Apply(this);
        }
        OutAEqualOperator(node);
    }
    public virtual void InALessThanOperator(ALessThanOperator node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessThanOperator(ALessThanOperator node)
    {
        DefaultOut(node);
    }

    public override void CaseALessThanOperator(ALessThanOperator node)
    {
        InALessThanOperator(node);
        if(node.GetLess() != null)
        {
            node.GetLess().Apply(this);
        }
        OutALessThanOperator(node);
    }
    public virtual void InALessEqualOperator(ALessEqualOperator node)
    {
        DefaultIn(node);
    }

    public virtual void OutALessEqualOperator(ALessEqualOperator node)
    {
        DefaultOut(node);
    }

    public override void CaseALessEqualOperator(ALessEqualOperator node)
    {
        InALessEqualOperator(node);
        if(node.GetLesseq() != null)
        {
            node.GetLesseq().Apply(this);
        }
        OutALessEqualOperator(node);
    }
    public virtual void InAAndBoolean(AAndBoolean node)
    {
        DefaultIn(node);
    }

    public virtual void OutAAndBoolean(AAndBoolean node)
    {
        DefaultOut(node);
    }

    public override void CaseAAndBoolean(AAndBoolean node)
    {
        InAAndBoolean(node);
        if(node.GetAnd() != null)
        {
            node.GetAnd().Apply(this);
        }
        OutAAndBoolean(node);
    }
    public virtual void InAOrBoolean(AOrBoolean node)
    {
        DefaultIn(node);
    }

    public virtual void OutAOrBoolean(AOrBoolean node)
    {
        DefaultOut(node);
    }

    public override void CaseAOrBoolean(AOrBoolean node)
    {
        InAOrBoolean(node);
        if(node.GetOr() != null)
        {
            node.GetOr().Apply(this);
        }
        OutAOrBoolean(node);
    }
    public virtual void InANotBoolean(ANotBoolean node)
    {
        DefaultIn(node);
    }

    public virtual void OutANotBoolean(ANotBoolean node)
    {
        DefaultOut(node);
    }

    public override void CaseANotBoolean(ANotBoolean node)
    {
        InANotBoolean(node);
        if(node.GetNot() != null)
        {
            node.GetNot().Apply(this);
        }
        OutANotBoolean(node);
    }
    public virtual void InAIterate(AIterate node)
    {
        DefaultIn(node);
    }

    public virtual void OutAIterate(AIterate node)
    {
        DefaultOut(node);
    }

    public override void CaseAIterate(AIterate node)
    {
        InAIterate(node);
        if(node.GetRightsquare() != null)
        {
            node.GetRightsquare().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLeftsquare() != null)
        {
            node.GetLeftsquare().Apply(this);
        }
        if(node.GetRightcurl() != null)
        {
            node.GetRightcurl().Apply(this);
        }
        if(node.GetLogical() != null)
        {
            node.GetLogical().Apply(this);
        }
        if(node.GetLeftcurl() != null)
        {
            node.GetLeftcurl().Apply(this);
        }
        if(node.GetLoop() != null)
        {
            node.GetLoop().Apply(this);
        }
        OutAIterate(node);
    }
    public virtual void InAHelperDeclare(AHelperDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAHelperDeclare(AHelperDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAHelperDeclare(AHelperDeclare node)
    {
        InAHelperDeclare(node);
        if(node.GetRightsquare() != null)
        {
            node.GetRightsquare().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLeftsquare() != null)
        {
            node.GetLeftsquare().Apply(this);
        }
        if(node.GetRightcurl() != null)
        {
            node.GetRightcurl().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetLeftcurl() != null)
        {
            node.GetLeftcurl().Apply(this);
        }
        if(node.GetId() != null)
        {
            node.GetId().Apply(this);
        }
        if(node.GetFunc() != null)
        {
            node.GetFunc().Apply(this);
        }
        OutAHelperDeclare(node);
    }
    public virtual void InAMainDeclare(AMainDeclare node)
    {
        DefaultIn(node);
    }

    public virtual void OutAMainDeclare(AMainDeclare node)
    {
        DefaultOut(node);
    }

    public override void CaseAMainDeclare(AMainDeclare node)
    {
        InAMainDeclare(node);
        if(node.GetRightsquare() != null)
        {
            node.GetRightsquare().Apply(this);
        }
        if(node.GetStatements() != null)
        {
            node.GetStatements().Apply(this);
        }
        if(node.GetLeftsquare() != null)
        {
            node.GetLeftsquare().Apply(this);
        }
        if(node.GetRightcurl() != null)
        {
            node.GetRightcurl().Apply(this);
        }
        if(node.GetParameters() != null)
        {
            node.GetParameters().Apply(this);
        }
        if(node.GetLeftcurl() != null)
        {
            node.GetLeftcurl().Apply(this);
        }
        if(node.GetMain() != null)
        {
            node.GetMain().Apply(this);
        }
        OutAMainDeclare(node);
    }
}
} // namespace CS426.analysis
