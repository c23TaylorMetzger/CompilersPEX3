/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.xss2.node;

import java.util.*;
import org.sablecc.sablecc.xss2.analysis.*;

public final class AChooseStatement extends PStatement
{
    private final LinkedList _choose_when_ = new TypedLinkedList(new ChooseWhen_Cast());
    private final LinkedList _otherwise_ = new TypedLinkedList(new Otherwise_Cast());

    public AChooseStatement ()
    {
    }

    public AChooseStatement (
            List _choose_when_,
            List _otherwise_
    )
    {
        this._choose_when_.clear();
        this._choose_when_.addAll(_choose_when_);
        this._otherwise_.clear();
        this._otherwise_.addAll(_otherwise_);
    }

    public Object clone()
    {
        return new AChooseStatement (
            cloneList (_choose_when_),
            cloneList (_otherwise_)
        );
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAChooseStatement(this);
    }

    public LinkedList getChooseWhen ()
    {
        return _choose_when_;
    }

    public void setChooseWhen (List list)
    {
        _choose_when_.clear();
        _choose_when_.addAll(list);
    }
    public LinkedList getOtherwise ()
    {
        return _otherwise_;
    }

    public void setOtherwise (List list)
    {
        _otherwise_.clear();
        _otherwise_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString (_choose_when_)
            + toString (_otherwise_)
        ;
    }

    void removeChild(Node child)
    {
        if ( _choose_when_.remove(child))
        {
            return;
        }
        if ( _otherwise_.remove(child))
        {
            return;
        }
    }

    void replaceChild(Node oldChild, Node newChild)
    {
        for(ListIterator i = _choose_when_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }
        for(ListIterator i = _otherwise_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }
    }

    private class ChooseWhen_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PChooseWhen node = (PChooseWhen) o;

            if((node.parent() != null) &&
                (node.parent() != AChooseStatement.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AChooseStatement.this))
            {
                node.parent(AChooseStatement.this);
            }

            return node;
        }
    }
    private class Otherwise_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PStatement node = (PStatement) o;

            if((node.parent() != null) &&
                (node.parent() != AChooseStatement.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AChooseStatement.this))
            {
                node.parent(AChooseStatement.this);
            }

            return node;
        }
    }
}
