$ template make_nodes()
$
$ // Generate the node/Node.java file 
$ output $basedir + '/node/Node.java'
/* This file was generated by SableCC (http://www.sablecc.org/). */

package $package.node;

import java.util.*;
import $package.analysis.*;

public abstract class Node implements Switchable, Cloneable
{
    private Node parent;

    public abstract Object clone();

    public Node parent()
    {
        return parent;
    }

    void parent(Node parent)
    {
        this.parent = parent;
    }

    abstract void removeChild(Node child);
    abstract void replaceChild(Node oldChild, Node newChild);

    public void replaceBy(Node node)
    {
        if(parent != null)
        {
            parent.replaceChild(this, node);
        }
    }

    protected String toString(Node node)
    {
        if(node != null)
        {
            return node.toString();
        }

        return "";
    }
    protected String toString(List list)
    {
        StringBuffer s = new StringBuffer();

        for(Iterator i = list.iterator(); i.hasNext();)
        {
            s.append(i.next());
        }

        return s.toString();
    }

    protected Node cloneNode(Node node)
    {
        if(node != null)
        {
            return (Node) node.clone();
        }

        return null;
    }

    protected List cloneList(List list)
    {
        List clone = new LinkedList();

        for(Iterator i = list.iterator(); i.hasNext();)
        {
            clone.add(((Node) i.next()).clone());
        }

        return clone;
    }
}
$ END OUTPUT

$ // Generate the node/NodeCast.java file 
$ output $basedir + '/node/NodeCast.java'
/* This file was generated by SableCC (http://www.sablecc.org/). */

package $package.node;

public class NodeCast implements Cast
{
    public final static NodeCast instance = new NodeCast();

    private NodeCast()
    {
    }

    public Object cast(Object o)
    {
        return (Node) o;
    }
}
$ end output

$ // Generate the node/Cast.java file 
$ output $basedir + '/node/Cast.java'
/* This file was generated by SableCC (http://www.sablecc.org/). */

package $package.node;

public interface Cast
{
    Object cast(Object o);    // assign ownership
}
$ end output

$ // Generate the node/NoCast.java file 
$ output $basedir + '/node/NoCast.java'
/* This file was generated by SableCC (http://www.sablecc.org/). */

package $package.node;

public class NoCast implements Cast
{
    public final static NoCast instance = new NoCast();

    private NoCast()
    {
    }

    public Object cast(Object o)
    {
        return o;
    }
}
$ end output

$ // Generate the node/Switch.java file 
$ output $basedir + '/node/Switch.java'
/* This file was generated by SableCC (http://www.sablecc.org/). */

package $package.node;

public interface Switch
{
}
$ end output

$ // Generate the node/Switchable.java file 
$ output $basedir + '/node/Switchable.java'
/* This file was generated by SableCC (http://www.sablecc.org/). */

package $package.node;

public interface Switchable
{
    void apply(Switch sw);
}
$ end output

$ // Generate the node/TypedList.java file 
$ output $basedir + '/node/TypedLinkedList.java'
/* This file was generated by SableCC (http://www.sablecc.org/). */

package $package.node;

import java.util.*;

public class TypedLinkedList extends LinkedList
{
    Cast cast;

    public TypedLinkedList()
    {
        super();

        cast = NoCast.instance;
    }

    public TypedLinkedList(Collection c)
    {
        super(c);

        cast = NoCast.instance;
    }

    public TypedLinkedList(Cast cast)
    {
        super();

        this.cast = cast;
    }

    public TypedLinkedList(Collection c, Cast cast)
    {
        super(c);

        this.cast = cast;
    }

    public Cast getCast()
    {
        return cast;
    }

    public void add(int index, Object element)
    {
        super.add(index, cast.cast(element));
    }

    public boolean add(Object o)
    {
        return super.add(cast.cast(o));
    }

    public boolean addAll(Collection c)
    {
        Object[] elements = c.toArray();
        for(int i=0; i < elements.length; i++)
        {
            super.add(cast.cast(elements[i]));
        }
        return true;
    }

    public boolean addAll(int index, Collection c)
    {
        int pos = index;
        Object[] elements = c.toArray();
        for(int i=0; i < elements.length; i++)
        {
            super.add(pos++, cast.cast(elements[i]));
        }
        return true;
    }

    public void addFirst(Object o)
    {
        super.addFirst(cast.cast(o));
    }

    public void addLast(Object o)
    {
        super.addLast(cast.cast(o));
    }

    public Object set(int index, Object o)
    {
        return super.set(index, cast.cast(o));
    }

    public ListIterator listIterator(int index)
    {
        return new TypedLinkedListIterator(super.listIterator(index));
    }

    private class TypedLinkedListIterator implements ListIterator
    {
        ListIterator iterator;

        TypedLinkedListIterator(ListIterator iterator)
        {
            this.iterator = iterator;
        }

        public boolean hasNext()
        {
            return iterator.hasNext();
        }

        public Object next()
        {
            return iterator.next();
        }

        public boolean hasPrevious()
        {
            return iterator.hasPrevious();
        }

        public Object previous()
        {
            return iterator.previous();
        }

        public int nextIndex()
        {
            return iterator.nextIndex();
        }
        public int previousIndex()
        {
            return iterator.previousIndex();
        }

        public void remove()
        {
            iterator.remove();
        }

        public void set(Object o)
        {
            iterator.set(cast.cast(o));
        }

        public void add(Object o)
        {
            iterator.add(cast.cast(o));
        }
    }
}
$ end output
$ end template
