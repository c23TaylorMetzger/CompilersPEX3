$ template make_lexer()
$ // Generate the lexer.mli file 
(* Module [Lexer]: SableCC-generated lexer. *)
(* This file was generated by SableCC (http://www.sablecc.org/). *)

module type LEXER = sig
  open Tokens

  exception Unknown_Token of string

  type t

  val create : string -> in_channel -> t
(* Return a new Lexer for the given in_channel. *)
  val create_from_string : string -> string -> t
  val peek : t -> token
(* Peek the next token from the input stream. *)
  val next : t -> token
(* Read the next token from the input stream. *)
  val id : t -> string
end


module Lexerdat = struct
  let goto_table = [|
$ foreach {lexer_data/goto_table/state}
    [|
$   foreach {row}
      [|
$     foreach {goto}
        [| @low; @high; @state |];
$     end foreach
      |];
$   end foreach
    |];
$ end foreach
  |]

  let accept = [|
$ foreach {lexer_data/accept_table/state}
    [|
    [-foreach {i}-]${.}; [-end foreach-] 
    |];
$ end foreach
  |]

(* Read the accept and goto tables. 
  let load_goto_table ic =
      let load_triple ic = 
          let i0 = input_binary_int ic in
          let i1 = input_binary_int ic in
          let i2 = input_binary_int ic in
              [| i0; i1; i2 |]
      in let il = input_binary_int ic in 
          print_int il;
          Array.init il 
              (function x -> let jl = input_binary_int ic in
                  Array.init jl
                      (function x -> let kl = input_binary_int ic in
                          Array.init kl (function x -> (load_triple ic))))

  let load_accept_table ic = 
    let il = input_binary_int ic in
    Array.init il 
               (function x -> let jl = input_binary_int ic in
                              Array.init jl
                                         (function x -> input_binary_int ic))

  let read_dat = 
    let lexer_chan = open_in_bin "lexer.dat" in
    let gt = load_goto_table lexer_chan and
        at = load_accept_table lexer_chan in
            close_in lexer_chan; (gt, at)

let goto_table = fst read_dat
let accept_table = snd read_dat *)
end

(* Module [Lexer]: SableCC-generated lexer. *)
(* This file was generated by SableCC (http://www.sablecc.org/). *)
module Lexer = struct
  open Tokens
  open Lexerdat

  exception Unknown_Token of string

  (* Lexer *)

  type state =
$ foreach {lexer_data/state}
    | @name
$ end

  type chan_or_string = Channel of in_channel | StrPos of string * int ref

  type t = { 
      name : string;
      in_chan : chan_or_string;
      mutable pushback : string;
      
      mutable token : Tokens.token; 
      mutable state : state; 
      
      mutable line : int; mutable pos : int;
      mutable cr : bool; mutable eof : bool;
      mutable text : string;
    }

  let state_to_id s = match s with
$ foreach {lexer_data/state}
  | @name -> @id
$ end

  exception Found_token of Tokens.token

  (* Input stuff *)
  let get_char m = 
    if m.eof then raise End_of_file else
    if String.length m.pushback > 0 then
      let s = m.pushback in
      let r = String.get s 0 in
      m.pushback <- String.sub s 1 ((String.length s)-1); r
    else
      match m.in_chan with
      | Channel c -> input_char c
      | StrPos (s,p) ->
          if !p >= String.length s then
            begin m.eof <- true; raise End_of_file end
          else
            let rv = String.get s !p in p := !p + 1; rv

  (* n indicates how many letters we actually ate.  push back the rest. *)
  let push_back m n = 
    let l = String.length m.text in
    let s = String.sub m.text n (l-n) in
    m.pushback <- m.pushback ^ s; m.eof <- false

  exception Bail

  let getToken m = 
    if m.token <> Tokens.Null_Token then m.token else
    let dfa_state = ref 0 in
    let start_pos = ref m.pos in
    let start_line = ref m.line in
    let accept_state = ref (-1) in 
    let accept_token = ref (-1) in
    let accept_length = ref (-1) in
    let accept_pos = ref (-1) in
    let accept_line = ref (-1) in

    let gotoTable = Lexerdat.goto_table.(state_to_id m.state) in
    let accept = Lexerdat.accept.(state_to_id m.state) in
    m.text <- "";
    try while true do
      begin try let c = get_char m in
      (match c with
      | '\n' -> if m.cr then m.cr <- false else begin m.line <- m.line + 1; m.pos <- 0 end
      | '\r' -> begin m.line <- m.line + 1; m.pos <- 0; m.cr <- true end
      | _  -> begin m.pos <- m.pos + 1; m.cr <- false end);
      
      m.text <- m.text ^ String.make 1 c;
      
      let notyet = ref true in while !notyet || (!dfa_state < -1) do
        notyet := false;
        let oldState = if !dfa_state < -1 then ((-2) - !dfa_state) else !dfa_state in
        dfa_state := -1;
        let tmp1 = gotoTable.(oldState)
        and low  = ref 0 in
        let high = ref (Array.length tmp1 - 1) in
        try while !low <= !high do
          let middle = ((!low + !high) / 2) in
          let tmp2 = tmp1.(middle) in
          if int_of_char c < tmp2.(0) then 
            high := middle - 1
          else if int_of_char c > tmp2.(1) then 
            low := middle + 1 
          else begin dfa_state := tmp2.(2); raise Bail; end;
        done with Bail -> ();
      done
      with End_of_file -> dfa_state := -1;
      end;
      
      if !dfa_state >= 0 then
        if accept.(!dfa_state) != -1 then
          begin
            accept_state := !dfa_state;
            accept_token := accept.(!dfa_state);
            accept_length := String.length m.text;
            accept_pos := m.pos;
            accept_line := m.line;
          end
        else ()
      else
        if(!accept_state != -1) then
          let linepos = { Tokens.line = (!start_line+1); Tokens.pos = (!start_pos+1) } in
          match !accept_token with
$   foreach {//token}
          | ${position()-1} -> 
              begin
$     if {not(@text)}
                let found = Tokens.T (linepos, @ename (String.sub m.text 0 !accept_length)) in
$     else
                let found = Tokens.T (linepos, @ename) in
$     end
                push_back m !accept_length;
                m.pos <- !accept_pos;
                m.line <- !accept_line;
$     if {count(transition[@from!=@to])!=0}
                begin
                  match m.state with
$       foreach transition in {transition[@from!=@to]}
                  | ${/parser/lexer_data/state[@name=$transition/@from]/@name} -> m.state <- @to
$       end foreach
                  | _ -> failwith "bad state"
                end;
$     end if
                raise (Found_token found);
              end
$   end foreach
          | _ -> failwith "bad dfa state"
        else
          if String.length m.text > 0 then
            raise (Unknown_Token ("[" ^ string_of_int (!start_line + 1) ^ "," ^ string_of_int (!start_pos + 1) ^ "]" ^
                                  " Unknown token: " ^ m.text))
          else
            let linepos = { Tokens.line = (!start_line+1); Tokens.pos = (!start_pos+1) } in
            raise (Found_token (Tokens.T (linepos, Tokens.EOF)))
    done; failwith "fell off infinite while?!"
    with Found_token t -> m.token <- t;
      m.token

  let _create n i_or_s = { 
    name = n;
    in_chan = i_or_s; 
    line = 0; pos = 0; cr = false; eof = false; 
    text = ""; state = ${lexer_data/state/@name}; 
    token = Tokens.Null_Token; pushback = "" 
    }

  let create n i = _create n (Channel i)
  let create_from_string n s = _create n (StrPos (s,ref 0))

  let peek m = getToken m
  let next m = let n = getToken m in m.token <- Tokens.Null_Token; n
  let id m = m.name
end

$ end template

