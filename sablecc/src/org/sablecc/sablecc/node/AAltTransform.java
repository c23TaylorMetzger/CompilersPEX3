/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.node;

import java.util.*;
import org.sablecc.sablecc.analysis.*;

public final class AAltTransform extends PAltTransform
{
    private TLBrace _l_brace_;
    private final LinkedList _terms_ = new TypedLinkedList(new Terms_Cast());
    private TRBrace _r_brace_;

    public AAltTransform ()
    {
    }

    public AAltTransform (
            TLBrace _l_brace_,
            List _terms_,
            TRBrace _r_brace_
    )
    {
        setLBrace (_l_brace_);
        this._terms_.clear();
        this._terms_.addAll(_terms_);
        setRBrace (_r_brace_);
    }

    public Object clone()
    {
        return new AAltTransform (
            (TLBrace)cloneNode (_l_brace_),
            cloneList (_terms_),
            (TRBrace)cloneNode (_r_brace_)
        );
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAltTransform(this);
    }

    public TLBrace getLBrace ()
    {
        return _l_brace_;
    }

    public void setLBrace (TLBrace node)
    {
        if(_l_brace_ != null)
        {
            _l_brace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _l_brace_ = node;
    }
    public LinkedList getTerms ()
    {
        return _terms_;
    }

    public void setTerms (List list)
    {
        _terms_.clear();
        _terms_.addAll(list);
    }
    public TRBrace getRBrace ()
    {
        return _r_brace_;
    }

    public void setRBrace (TRBrace node)
    {
        if(_r_brace_ != null)
        {
            _r_brace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _r_brace_ = node;
    }

    public String toString()
    {
        return ""
            + toString (_l_brace_)
            + toString (_terms_)
            + toString (_r_brace_)
        ;
    }

    void removeChild(Node child)
    {
        if ( _l_brace_ == child )
        {
            _l_brace_ = null;
            return;
        }
        if ( _terms_.remove(child))
        {
            return;
        }
        if ( _r_brace_ == child )
        {
            _r_brace_ = null;
            return;
        }
    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if ( _l_brace_ == oldChild )
        {
            setLBrace ((TLBrace) newChild);
            return;
        }
        for(ListIterator i = _terms_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }
        if ( _r_brace_ == oldChild )
        {
            setRBrace ((TRBrace) newChild);
            return;
        }
    }

    private class Terms_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PTerm node = (PTerm) o;

            if((node.parent() != null) &&
                (node.parent() != AAltTransform.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AAltTransform.this))
            {
                node.parent(AAltTransform.this);
            }

            return node;
        }
    }
}
