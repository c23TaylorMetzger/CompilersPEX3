/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.xss2.analysis;

import java.util.*;
import org.sablecc.sablecc.xss2.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }
    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAScript(AScript node)
    {
        defaultCase(node);
    }
    public void caseADataStatement(ADataStatement node)
    {
        defaultCase(node);
    }
    public void caseAForeachStatement(AForeachStatement node)
    {
        defaultCase(node);
    }
    public void caseAIncludeStatement(AIncludeStatement node)
    {
        defaultCase(node);
    }
    public void caseAIfStatement(AIfStatement node)
    {
        defaultCase(node);
    }
    public void caseAChooseStatement(AChooseStatement node)
    {
        defaultCase(node);
    }
    public void caseASetStatement(ASetStatement node)
    {
        defaultCase(node);
    }
    public void caseAParamStatement(AParamStatement node)
    {
        defaultCase(node);
    }
    public void caseAOutputStatement(AOutputStatement node)
    {
        defaultCase(node);
    }
    public void caseATemplateStatement(ATemplateStatement node)
    {
        defaultCase(node);
    }
    public void caseACallStatement(ACallStatement node)
    {
        defaultCase(node);
    }
    public void caseAPrintStatement(APrintStatement node)
    {
        defaultCase(node);
    }
    public void caseASeparatorStatement(ASeparatorStatement node)
    {
        defaultCase(node);
    }
    public void caseAChooseWhen(AChooseWhen node)
    {
        defaultCase(node);
    }
    public void caseAOarg(AOarg node)
    {
        defaultCase(node);
    }
    public void caseAArg(AArg node)
    {
        defaultCase(node);
    }
    public void caseALiteralExpr(ALiteralExpr node)
    {
        defaultCase(node);
    }
    public void caseAXpathExpr(AXpathExpr node)
    {
        defaultCase(node);
    }
    public void caseAIattribExpr(AIattribExpr node)
    {
        defaultCase(node);
    }
    public void caseAIvarExpr(AIvarExpr node)
    {
        defaultCase(node);
    }
    public void caseAConcatExpr(AConcatExpr node)
    {
        defaultCase(node);
    }
    public void caseAPathXpathExpr(APathXpathExpr node)
    {
        defaultCase(node);
    }
    public void caseALiteralXpathExpr(ALiteralXpathExpr node)
    {
        defaultCase(node);
    }
    public void caseANumberXpathExpr(ANumberXpathExpr node)
    {
        defaultCase(node);
    }
    public void caseAFunctionXpathExpr(AFunctionXpathExpr node)
    {
        defaultCase(node);
    }
    public void caseAEqualsXpathExpr(AEqualsXpathExpr node)
    {
        defaultCase(node);
    }
    public void caseANotEqualsXpathExpr(ANotEqualsXpathExpr node)
    {
        defaultCase(node);
    }
    public void caseAOrXpathExpr(AOrXpathExpr node)
    {
        defaultCase(node);
    }
    public void caseAAndXpathExpr(AAndXpathExpr node)
    {
        defaultCase(node);
    }
    public void caseAAddXpathExpr(AAddXpathExpr node)
    {
        defaultCase(node);
    }
    public void caseASubXpathExpr(ASubXpathExpr node)
    {
        defaultCase(node);
    }
    public void caseAMulXpathExpr(AMulXpathExpr node)
    {
        defaultCase(node);
    }
    public void caseADivXpathExpr(ADivXpathExpr node)
    {
        defaultCase(node);
    }
    public void caseAModXpathExpr(AModXpathExpr node)
    {
        defaultCase(node);
    }
    public void caseALessXpathExpr(ALessXpathExpr node)
    {
        defaultCase(node);
    }
    public void caseALessOrEqualXpathExpr(ALessOrEqualXpathExpr node)
    {
        defaultCase(node);
    }
    public void caseAGreaterXpathExpr(AGreaterXpathExpr node)
    {
        defaultCase(node);
    }
    public void caseAGreaterOrEqualXpathExpr(AGreaterOrEqualXpathExpr node)
    {
        defaultCase(node);
    }
    public void caseAXpathPathElem(AXpathPathElem node)
    {
        defaultCase(node);
    }
    public void caseANameXpathElem(ANameXpathElem node)
    {
        defaultCase(node);
    }
    public void caseAVarXpathElem(AVarXpathElem node)
    {
        defaultCase(node);
    }
    public void caseAAttribXpathElem(AAttribXpathElem node)
    {
        defaultCase(node);
    }
    public void caseAParentXpathElem(AParentXpathElem node)
    {
        defaultCase(node);
    }
    public void caseACurrentXpathElem(ACurrentXpathElem node)
    {
        defaultCase(node);
    }
    public void caseAOneXpathSeparator(AOneXpathSeparator node)
    {
        defaultCase(node);
    }
    public void caseAAnyXpathSeparator(AAnyXpathSeparator node)
    {
        defaultCase(node);
    }

    public void caseTDataComment(TDataComment node)
    {
        defaultCase(node);
    }
    public void caseTCmdStart(TCmdStart node)
    {
        defaultCase(node);
    }
    public void caseTCmdEnd(TCmdEnd node)
    {
        defaultCase(node);
    }
    public void caseTForeach(TForeach node)
    {
        defaultCase(node);
    }
    public void caseTReverseForeach(TReverseForeach node)
    {
        defaultCase(node);
    }
    public void caseTIf(TIf node)
    {
        defaultCase(node);
    }
    public void caseTElse(TElse node)
    {
        defaultCase(node);
    }
    public void caseTChoose(TChoose node)
    {
        defaultCase(node);
    }
    public void caseTWhen(TWhen node)
    {
        defaultCase(node);
    }
    public void caseTEnd(TEnd node)
    {
        defaultCase(node);
    }
    public void caseTInclude(TInclude node)
    {
        defaultCase(node);
    }
    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }
    public void caseTOtherwise(TOtherwise node)
    {
        defaultCase(node);
    }
    public void caseTSet(TSet node)
    {
        defaultCase(node);
    }
    public void caseTParam(TParam node)
    {
        defaultCase(node);
    }
    public void caseTOutput(TOutput node)
    {
        defaultCase(node);
    }
    public void caseTTemplate(TTemplate node)
    {
        defaultCase(node);
    }
    public void caseTCall(TCall node)
    {
        defaultCase(node);
    }
    public void caseTSep(TSep node)
    {
        defaultCase(node);
    }
    public void caseTPrint(TPrint node)
    {
        defaultCase(node);
    }
    public void caseTEquals(TEquals node)
    {
        defaultCase(node);
    }
    public void caseTLPar(TLPar node)
    {
        defaultCase(node);
    }
    public void caseTRPar(TRPar node)
    {
        defaultCase(node);
    }
    public void caseTComma(TComma node)
    {
        defaultCase(node);
    }
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }
    public void caseTData(TData node)
    {
        defaultCase(node);
    }
    public void caseTIxpathStart(TIxpathStart node)
    {
        defaultCase(node);
    }
    public void caseTIattrib(TIattrib node)
    {
        defaultCase(node);
    }
    public void caseTIvar(TIvar node)
    {
        defaultCase(node);
    }
    public void caseTBlank(TBlank node)
    {
        defaultCase(node);
    }
    public void caseTIdentifier(TIdentifier node)
    {
        defaultCase(node);
    }
    public void caseTXpathStart(TXpathStart node)
    {
        defaultCase(node);
    }
    public void caseTLiteral(TLiteral node)
    {
        defaultCase(node);
    }
    public void caseTComment(TComment node)
    {
        defaultCase(node);
    }
    public void caseTXor(TXor node)
    {
        defaultCase(node);
    }
    public void caseTXand(TXand node)
    {
        defaultCase(node);
    }
    public void caseTXmod(TXmod node)
    {
        defaultCase(node);
    }
    public void caseTXdiv(TXdiv node)
    {
        defaultCase(node);
    }
    public void caseTXname(TXname node)
    {
        defaultCase(node);
    }
    public void caseTXvar(TXvar node)
    {
        defaultCase(node);
    }
    public void caseTXsepAny(TXsepAny node)
    {
        defaultCase(node);
    }
    public void caseTXsepOne(TXsepOne node)
    {
        defaultCase(node);
    }
    public void caseTXcurrent(TXcurrent node)
    {
        defaultCase(node);
    }
    public void caseTXparent(TXparent node)
    {
        defaultCase(node);
    }
    public void caseTXattrib(TXattrib node)
    {
        defaultCase(node);
    }
    public void caseTXlBrace(TXlBrace node)
    {
        defaultCase(node);
    }
    public void caseTXrBrace(TXrBrace node)
    {
        defaultCase(node);
    }
    public void caseTXlPar(TXlPar node)
    {
        defaultCase(node);
    }
    public void caseTXrPar(TXrPar node)
    {
        defaultCase(node);
    }
    public void caseTXequals(TXequals node)
    {
        defaultCase(node);
    }
    public void caseTXnotEquals(TXnotEquals node)
    {
        defaultCase(node);
    }
    public void caseTXmul(TXmul node)
    {
        defaultCase(node);
    }
    public void caseTXadd(TXadd node)
    {
        defaultCase(node);
    }
    public void caseTXsub(TXsub node)
    {
        defaultCase(node);
    }
    public void caseTXless(TXless node)
    {
        defaultCase(node);
    }
    public void caseTXlessOrEqual(TXlessOrEqual node)
    {
        defaultCase(node);
    }
    public void caseTXgreater(TXgreater node)
    {
        defaultCase(node);
    }
    public void caseTXgreaterOrEqual(TXgreaterOrEqual node)
    {
        defaultCase(node);
    }
    public void caseTXcomma(TXcomma node)
    {
        defaultCase(node);
    }
    public void caseTXliteral(TXliteral node)
    {
        defaultCase(node);
    }
    public void caseTXnumber(TXnumber node)
    {
        defaultCase(node);
    }
    public void caseTXpathEnd(TXpathEnd node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}
