/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.node;

import java.util.*;
import org.sablecc.sablecc.analysis.*;

public final class ATokenDef extends PTokenDef
{
    private PStateList _state_list_;
    private TId _id_;
    private PRegExp _reg_exp_;
    private TSlash _slash_;
    private PRegExp _look_ahead_;

    public ATokenDef ()
    {
    }

    public ATokenDef (
            PStateList _state_list_,
            TId _id_,
            PRegExp _reg_exp_,
            TSlash _slash_,
            PRegExp _look_ahead_
    )
    {
        setStateList (_state_list_);
        setId (_id_);
        setRegExp (_reg_exp_);
        setSlash (_slash_);
        setLookAhead (_look_ahead_);
    }

    public Object clone()
    {
        return new ATokenDef (
            (PStateList)cloneNode (_state_list_),
            (TId)cloneNode (_id_),
            (PRegExp)cloneNode (_reg_exp_),
            (TSlash)cloneNode (_slash_),
            (PRegExp)cloneNode (_look_ahead_)
        );
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATokenDef(this);
    }

    public PStateList getStateList ()
    {
        return _state_list_;
    }

    public void setStateList (PStateList node)
    {
        if(_state_list_ != null)
        {
            _state_list_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _state_list_ = node;
    }
    public TId getId ()
    {
        return _id_;
    }

    public void setId (TId node)
    {
        if(_id_ != null)
        {
            _id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _id_ = node;
    }
    public PRegExp getRegExp ()
    {
        return _reg_exp_;
    }

    public void setRegExp (PRegExp node)
    {
        if(_reg_exp_ != null)
        {
            _reg_exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _reg_exp_ = node;
    }
    public TSlash getSlash ()
    {
        return _slash_;
    }

    public void setSlash (TSlash node)
    {
        if(_slash_ != null)
        {
            _slash_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _slash_ = node;
    }
    public PRegExp getLookAhead ()
    {
        return _look_ahead_;
    }

    public void setLookAhead (PRegExp node)
    {
        if(_look_ahead_ != null)
        {
            _look_ahead_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _look_ahead_ = node;
    }

    public String toString()
    {
        return ""
            + toString (_state_list_)
            + toString (_id_)
            + toString (_reg_exp_)
            + toString (_slash_)
            + toString (_look_ahead_)
        ;
    }

    void removeChild(Node child)
    {
        if ( _state_list_ == child )
        {
            _state_list_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _reg_exp_ == child )
        {
            _reg_exp_ = null;
            return;
        }
        if ( _slash_ == child )
        {
            _slash_ = null;
            return;
        }
        if ( _look_ahead_ == child )
        {
            _look_ahead_ = null;
            return;
        }
    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if ( _state_list_ == oldChild )
        {
            setStateList ((PStateList) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            setId ((TId) newChild);
            return;
        }
        if ( _reg_exp_ == oldChild )
        {
            setRegExp ((PRegExp) newChild);
            return;
        }
        if ( _slash_ == oldChild )
        {
            setSlash ((TSlash) newChild);
            return;
        }
        if ( _look_ahead_ == oldChild )
        {
            setLookAhead ((PRegExp) newChild);
            return;
        }
    }

}
