/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.node;

import java.util.*;
import org.sablecc.sablecc.analysis.*;

public final class AListTerm extends PTerm
{
    private TLBkt _l_bkt_;
    private final LinkedList _list_terms_ = new TypedLinkedList(new ListTerms_Cast());

    public AListTerm ()
    {
    }

    public AListTerm (
            TLBkt _l_bkt_,
            List _list_terms_
    )
    {
        setLBkt (_l_bkt_);
        this._list_terms_.clear();
        this._list_terms_.addAll(_list_terms_);
    }

    public Object clone()
    {
        return new AListTerm (
            (TLBkt)cloneNode (_l_bkt_),
            cloneList (_list_terms_)
        );
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListTerm(this);
    }

    public TLBkt getLBkt ()
    {
        return _l_bkt_;
    }

    public void setLBkt (TLBkt node)
    {
        if(_l_bkt_ != null)
        {
            _l_bkt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _l_bkt_ = node;
    }
    public LinkedList getListTerms ()
    {
        return _list_terms_;
    }

    public void setListTerms (List list)
    {
        _list_terms_.clear();
        _list_terms_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString (_l_bkt_)
            + toString (_list_terms_)
        ;
    }

    void removeChild(Node child)
    {
        if ( _l_bkt_ == child )
        {
            _l_bkt_ = null;
            return;
        }
        if ( _list_terms_.remove(child))
        {
            return;
        }
    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if ( _l_bkt_ == oldChild )
        {
            setLBkt ((TLBkt) newChild);
            return;
        }
        for(ListIterator i = _list_terms_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }
    }

    private class ListTerms_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PListTerm node = (PListTerm) o;

            if((node.parent() != null) &&
                (node.parent() != AListTerm.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AListTerm.this))
            {
                node.parent(AListTerm.this);
            }

            return node;
        }
    }
}
