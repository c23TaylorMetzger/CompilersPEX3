/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.xss2.lexer;

import java.io.*;
import java.util.*;
import org.sablecc.sablecc.xss2.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.DATA;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);
                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch (state.id())
                            {
                              case 0: state = State.CODE; break;
                            }
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch (state.id())
                            {
                              case 1: state = State.DATA; break;
                            }
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch (state.id())
                            {
                              case 0: state = State.IXPATH; break;
                            }
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch (state.id())
                            {
                              case 1: state = State.XPATH; break;
                            }
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            Token token = new52(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            Token token = new53(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 54:
                        {
                            Token token = new54(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 55:
                        {
                            Token token = new55(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 56:
                        {
                            Token token = new56(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 57:
                        {
                            Token token = new57(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 58:
                        {
                            Token token = new58(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 59:
                        {
                            Token token = new59(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 60:
                        {
                            Token token = new60(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 61:
                        {
                            Token token = new61(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            switch (state.id())
                            {
                              case 3: state = State.DATA; break;
                              case 2: state = State.CODE; break;
                            }
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TDataComment(text, line, pos); }
    Token new1(int line, int pos) { return new TCmdStart(line, pos); }
    Token new2(int line, int pos) { return new TCmdEnd(line, pos); }
    Token new3(String text, int line, int pos) { return new TForeach(text, line, pos); }
    Token new4(String text, int line, int pos) { return new TReverseForeach(text, line, pos); }
    Token new5(String text, int line, int pos) { return new TIf(text, line, pos); }
    Token new6(String text, int line, int pos) { return new TElse(text, line, pos); }
    Token new7(String text, int line, int pos) { return new TChoose(text, line, pos); }
    Token new8(String text, int line, int pos) { return new TWhen(text, line, pos); }
    Token new9(String text, int line, int pos) { return new TEnd(text, line, pos); }
    Token new10(String text, int line, int pos) { return new TInclude(text, line, pos); }
    Token new11(String text, int line, int pos) { return new TIn(text, line, pos); }
    Token new12(String text, int line, int pos) { return new TOtherwise(text, line, pos); }
    Token new13(String text, int line, int pos) { return new TSet(text, line, pos); }
    Token new14(String text, int line, int pos) { return new TParam(text, line, pos); }
    Token new15(String text, int line, int pos) { return new TOutput(text, line, pos); }
    Token new16(String text, int line, int pos) { return new TTemplate(text, line, pos); }
    Token new17(String text, int line, int pos) { return new TCall(text, line, pos); }
    Token new18(String text, int line, int pos) { return new TSep(text, line, pos); }
    Token new19(String text, int line, int pos) { return new TPrint(text, line, pos); }
    Token new20(int line, int pos) { return new TEquals(line, pos); }
    Token new21(int line, int pos) { return new TLPar(line, pos); }
    Token new22(int line, int pos) { return new TRPar(line, pos); }
    Token new23(int line, int pos) { return new TComma(line, pos); }
    Token new24(int line, int pos) { return new TPlus(line, pos); }
    Token new25(String text, int line, int pos) { return new TData(text, line, pos); }
    Token new26(int line, int pos) { return new TIxpathStart(line, pos); }
    Token new27(String text, int line, int pos) { return new TIattrib(text, line, pos); }
    Token new28(String text, int line, int pos) { return new TIvar(text, line, pos); }
    Token new29(String text, int line, int pos) { return new TBlank(text, line, pos); }
    Token new30(String text, int line, int pos) { return new TIdentifier(text, line, pos); }
    Token new31(int line, int pos) { return new TXpathStart(line, pos); }
    Token new32(String text, int line, int pos) { return new TLiteral(text, line, pos); }
    Token new33(String text, int line, int pos) { return new TComment(text, line, pos); }
    Token new34(int line, int pos) { return new TXor(line, pos); }
    Token new35(int line, int pos) { return new TXand(line, pos); }
    Token new36(int line, int pos) { return new TXmod(line, pos); }
    Token new37(int line, int pos) { return new TXdiv(line, pos); }
    Token new38(String text, int line, int pos) { return new TXname(text, line, pos); }
    Token new39(String text, int line, int pos) { return new TXvar(text, line, pos); }
    Token new40(int line, int pos) { return new TXsepAny(line, pos); }
    Token new41(int line, int pos) { return new TXsepOne(line, pos); }
    Token new42(int line, int pos) { return new TXcurrent(line, pos); }
    Token new43(int line, int pos) { return new TXparent(line, pos); }
    Token new44(String text, int line, int pos) { return new TXattrib(text, line, pos); }
    Token new45(int line, int pos) { return new TXlBrace(line, pos); }
    Token new46(int line, int pos) { return new TXrBrace(line, pos); }
    Token new47(int line, int pos) { return new TXlPar(line, pos); }
    Token new48(int line, int pos) { return new TXrPar(line, pos); }
    Token new49(int line, int pos) { return new TXequals(line, pos); }
    Token new50(int line, int pos) { return new TXnotEquals(line, pos); }
    Token new51(int line, int pos) { return new TXmul(line, pos); }
    Token new52(int line, int pos) { return new TXadd(line, pos); }
    Token new53(int line, int pos) { return new TXsub(line, pos); }
    Token new54(int line, int pos) { return new TXless(line, pos); }
    Token new55(int line, int pos) { return new TXlessOrEqual(line, pos); }
    Token new56(int line, int pos) { return new TXgreater(line, pos); }
    Token new57(int line, int pos) { return new TXgreaterOrEqual(line, pos); }
    Token new58(int line, int pos) { return new TXcomma(line, pos); }
    Token new59(String text, int line, int pos) { return new TXliteral(text, line, pos); }
    Token new60(String text, int line, int pos) { return new TXnumber(text, line, pos); }
    Token new61(int line, int pos) { return new TXpathEnd(line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }


    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable; /* = {
      {
        {
          {0, 35, 1},
          {36, 36, 2},
          {37, 63, 1},
          {64, 64, 3},
          {65, 90, 1},
          {91, 91, 4},
          {92, 65535, 1},
        },
        {
          {0, 35, 1},
          {36, 36, 5},
          {37, 63, 1},
          {64, 64, 6},
          {65, 90, 1},
          {91, 91, 7},
          {92, 65535, 1},
        },
        {
          {36, 36, 8},
          {65, 90, 9},
          {95, 95, 10},
          {97, 122, 11},
          {123, 123, 12},
          {127, 255, 13},
        },
        {
          {64, 64, 14},
          {65, 90, 15},
          {95, 95, 16},
          {97, 122, 17},
          {123, 123, 18},
          {127, 255, 19},
        },
        {
          {0, 35, 20},
          {37, 44, 20},
          {45, 45, 21},
          {46, 63, 20},
          {65, 90, 20},
          {91, 91, 22},
          {92, 65535, 20},
        },
        {
          {36, 36, 8},
        },
        {
          {64, 64, 14},
        },
        {
          {0, 44, -6},
          {45, 45, 23},
          {46, 65535, -6},
        },
        {
          {0, 65535, -3},
        },
        {
          {48, 57, 24},
          {65, 90, 25},
          {95, 95, 26},
          {97, 122, 27},
          {127, 255, 28},
        },
        {
          {48, 255, -11},
        },
        {
          {48, 255, -11},
        },
        {
        },
        {
          {48, 255, -11},
        },
        {
          {0, 65535, -3},
        },
        {
          {48, 57, 29},
          {65, 90, 30},
          {95, 95, 31},
          {97, 122, 32},
          {127, 255, 33},
        },
        {
          {48, 255, -17},
        },
        {
          {48, 255, -17},
        },
        {
          {65, 90, 34},
          {95, 95, 35},
          {97, 122, 36},
          {127, 255, 37},
        },
        {
          {48, 255, -17},
        },
        {
          {0, 65535, -3},
        },
        {
          {33, 33, 38},
          {45, 45, 39},
        },
        {
          {0, 35, 40},
          {36, 36, 5},
          {37, 44, 40},
          {45, 45, 41},
          {46, 63, 40},
          {64, 64, 6},
          {65, 90, 40},
          {91, 91, 22},
          {92, 65535, 40},
        },
        {
          {45, 45, 39},
        },
        {
          {48, 255, -11},
        },
        {
          {48, 255, -11},
        },
        {
          {48, 255, -11},
        },
        {
          {48, 255, -11},
        },
        {
          {48, 255, -11},
        },
        {
          {48, 255, -17},
        },
        {
          {48, 255, -17},
        },
        {
          {48, 255, -17},
        },
        {
          {48, 255, -17},
        },
        {
          {48, 255, -17},
        },
        {
          {48, 57, 42},
          {65, 90, 43},
          {95, 95, 44},
          {97, 122, 45},
          {125, 125, 46},
          {127, 255, 47},
        },
        {
          {48, 255, -36},
        },
        {
          {48, 255, -36},
        },
        {
          {48, 255, -36},
        },
        {
          {0, 32, 48},
          {33, 33, 49},
          {34, 65535, 48},
        },
        {
          {0, 65535, -3},
        },
        {
          {0, 65535, -3},
        },
        {
          {0, 36, -3},
          {37, 44, 1},
          {45, 45, 50},
          {46, 63, 1},
          {64, 65535, -3},
        },
        {
          {48, 255, -36},
        },
        {
          {48, 255, -36},
        },
        {
          {48, 255, -36},
        },
        {
          {48, 255, -36},
        },
        {
        },
        {
          {48, 255, -36},
        },
        {
          {0, 65535, -40},
        },
        {
          {0, 44, 51},
          {45, 45, 52},
          {46, 65535, 51},
        },
        {
          {0, 65535, -3},
        },
        {
          {0, 65535, -40},
        },
        {
          {0, 92, 53},
          {93, 93, 54},
          {94, 65535, 53},
        },
        {
          {0, 65535, -40},
        },
        {
        },
      },
      {
        {
          {9, 9, 1},
          {10, 10, 2},
          {13, 13, 3},
          {32, 32, 4},
          {34, 34, 5},
          {36, 36, 6},
          {39, 39, 7},
          {40, 40, 8},
          {41, 41, 9},
          {43, 43, 10},
          {44, 44, 11},
          {45, 45, 12},
          {47, 47, 13},
          {61, 61, 14},
          {64, 64, 15},
          {65, 66, 16},
          {67, 67, 17},
          {68, 68, 16},
          {69, 69, 18},
          {70, 70, 19},
          {71, 72, 16},
          {73, 73, 20},
          {74, 78, 16},
          {79, 79, 21},
          {80, 80, 22},
          {81, 81, 16},
          {82, 82, 23},
          {83, 83, 24},
          {84, 84, 25},
          {85, 86, 16},
          {87, 87, 26},
          {88, 90, 16},
          {95, 95, 27},
          {97, 98, 28},
          {99, 99, 29},
          {100, 100, 28},
          {101, 101, 30},
          {102, 102, 31},
          {103, 104, 28},
          {105, 105, 32},
          {106, 110, 28},
          {111, 111, 33},
          {112, 112, 34},
          {113, 113, 28},
          {114, 114, 35},
          {115, 115, 36},
          {116, 116, 37},
          {117, 118, 28},
          {119, 119, 38},
          {120, 122, 28},
          {123, 123, 39},
          {127, 255, 40},
        },
        {
          {9, 32, -2},
        },
        {
          {9, 32, -2},
        },
        {
          {9, 9, 1},
          {10, 10, 41},
          {13, 32, -2},
        },
        {
          {9, 32, -2},
        },
        {
          {0, 33, 42},
          {34, 34, 43},
          {35, 65535, 42},
        },
        {
          {65, 90, 44},
          {95, 95, 45},
          {97, 122, 46},
          {127, 255, 47},
        },
        {
          {0, 38, 48},
          {39, 39, 49},
          {40, 65535, 48},
        },
        {
        },
        {
        },
        {
        },
        {
        },
        {
          {93, 93, 50},
        },
        {
          {47, 47, 51},
        },
        {
        },
        {
          {65, 90, 52},
          {95, 95, 53},
          {97, 122, 54},
          {123, 123, 55},
          {127, 255, 56},
        },
        {
          {48, 57, 57},
          {65, 90, 58},
          {95, 95, 59},
          {97, 122, 60},
          {127, 255, 61},
        },
        {
          {48, 57, 57},
          {65, 65, 62},
          {66, 71, 58},
          {72, 72, 63},
          {73, 90, 58},
          {95, 95, 59},
          {97, 97, 64},
          {98, 103, 60},
          {104, 104, 65},
          {105, 122, 60},
          {127, 255, 61},
        },
        {
          {48, 57, 57},
          {65, 75, 58},
          {76, 76, 66},
          {77, 77, 58},
          {78, 78, 67},
          {79, 90, 58},
          {95, 95, 59},
          {97, 107, 60},
          {108, 108, 68},
          {109, 109, 60},
          {110, 110, 69},
          {111, 122, 60},
          {127, 255, 61},
        },
        {
          {48, 57, 57},
          {65, 78, 58},
          {79, 79, 70},
          {80, 90, 58},
          {95, 95, 59},
          {97, 110, 60},
          {111, 111, 71},
          {112, 122, 60},
          {127, 255, 61},
        },
        {
          {48, 57, 57},
          {65, 69, 58},
          {70, 70, 72},
          {71, 77, 58},
          {78, 78, 73},
          {79, 95, -20},
          {97, 101, 60},
          {102, 102, 74},
          {103, 109, 60},
          {110, 110, 75},
          {111, 255, -20},
        },
        {
          {48, 57, 57},
          {65, 83, 58},
          {84, 84, 76},
          {85, 85, 77},
          {86, 90, 58},
          {95, 95, 59},
          {97, 115, 60},
          {116, 116, 78},
          {117, 117, 79},
          {118, 122, 60},
          {127, 255, 61},
        },
        {
          {48, 57, 57},
          {65, 65, 80},
          {66, 81, 58},
          {82, 82, 81},
          {83, 90, 58},
          {95, 95, 59},
          {97, 97, 82},
          {98, 113, 60},
          {114, 114, 83},
          {115, 122, 60},
          {127, 255, 61},
        },
        {
          {48, 57, 57},
          {65, 68, 58},
          {69, 69, 84},
          {70, 90, 58},
          {95, 95, 59},
          {97, 100, 60},
          {101, 101, 85},
          {102, 122, 60},
          {127, 255, 61},
        },
        {
          {48, 68, -25},
          {69, 69, 86},
          {70, 100, -25},
          {101, 101, 87},
          {102, 255, -25},
        },
        {
          {48, 68, -25},
          {69, 69, 88},
          {70, 100, -25},
          {101, 101, 89},
          {102, 255, -25},
        },
        {
          {48, 57, 57},
          {65, 71, 58},
          {72, 72, 90},
          {73, 95, -19},
          {97, 103, 60},
          {104, 104, 91},
          {105, 255, -19},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -19},
        },
        {
          {48, 255, -20},
        },
        {
          {48, 255, -21},
        },
        {
          {48, 255, -22},
        },
        {
          {48, 255, -23},
        },
        {
          {48, 255, -24},
        },
        {
          {48, 255, -25},
        },
        {
          {48, 255, -26},
        },
        {
          {48, 255, -27},
        },
        {
          {48, 255, -28},
        },
        {
        },
        {
          {48, 255, -18},
        },
        {
          {9, 32, -2},
        },
        {
          {0, 65535, -7},
        },
        {
          {34, 34, 92},
        },
        {
          {48, 57, 93},
          {65, 90, 94},
          {95, 95, 95},
          {97, 122, 96},
          {127, 255, 97},
        },
        {
          {48, 255, -46},
        },
        {
          {48, 255, -46},
        },
        {
          {48, 255, -46},
        },
        {
          {0, 65535, -9},
        },
        {
          {39, 39, 98},
        },
        {
        },
        {
          {0, 9, 99},
          {10, 10, 100},
          {11, 12, 99},
          {13, 13, 101},
          {14, 65535, 99},
        },
        {
          {48, 57, 102},
          {65, 90, 103},
          {95, 95, 104},
          {97, 122, 105},
          {127, 255, 106},
        },
        {
          {48, 255, -54},
        },
        {
          {48, 255, -54},
        },
        {
          {65, 90, 107},
          {95, 95, 108},
          {97, 122, 109},
          {127, 255, 110},
        },
        {
          {48, 255, -54},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 75, -20},
          {76, 76, 111},
          {77, 90, 58},
          {95, 107, -20},
          {108, 108, 112},
          {109, 122, 60},
          {127, 255, 61},
        },
        {
          {48, 78, -21},
          {79, 79, 113},
          {80, 110, -21},
          {111, 111, 114},
          {112, 255, -21},
        },
        {
          {48, 255, -64},
        },
        {
          {48, 255, -65},
        },
        {
          {48, 57, 57},
          {65, 82, 58},
          {83, 83, 115},
          {84, 90, 58},
          {95, 95, 59},
          {97, 114, 60},
          {115, 115, 116},
          {116, 122, 60},
          {127, 255, 61},
        },
        {
          {48, 57, 57},
          {65, 67, 58},
          {68, 68, 117},
          {69, 90, 58},
          {95, 95, 59},
          {97, 99, 60},
          {100, 100, 118},
          {101, 122, 60},
          {127, 255, 61},
        },
        {
          {48, 255, -68},
        },
        {
          {48, 255, -69},
        },
        {
          {48, 57, 57},
          {65, 81, 58},
          {82, 82, 119},
          {83, 95, -24},
          {97, 113, 60},
          {114, 114, 120},
          {115, 255, -24},
        },
        {
          {48, 255, -72},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 57, 57},
          {65, 66, 58},
          {67, 67, 121},
          {68, 90, 58},
          {95, 95, 59},
          {97, 98, 60},
          {99, 99, 122},
          {100, 122, 60},
          {127, 255, 61},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -75},
        },
        {
          {48, 71, -28},
          {72, 72, 123},
          {73, 103, -28},
          {104, 104, 124},
          {105, 255, -19},
        },
        {
          {48, 83, -23},
          {84, 84, 125},
          {85, 90, 58},
          {95, 115, -23},
          {116, 116, 126},
          {117, 122, 60},
          {127, 255, 61},
        },
        {
          {48, 255, -78},
        },
        {
          {48, 255, -79},
        },
        {
          {48, 81, -72},
          {82, 82, 127},
          {83, 113, -72},
          {114, 114, 128},
          {115, 255, -24},
        },
        {
          {48, 57, 57},
          {65, 72, 58},
          {73, 73, 129},
          {74, 90, 58},
          {95, 95, 59},
          {97, 104, 60},
          {105, 105, 130},
          {106, 122, 60},
          {127, 255, 61},
        },
        {
          {48, 255, -82},
        },
        {
          {48, 255, -83},
        },
        {
          {48, 57, 57},
          {65, 85, 58},
          {86, 86, 131},
          {87, 90, 58},
          {95, 95, 59},
          {97, 117, 60},
          {118, 118, 132},
          {119, 122, 60},
          {127, 255, 61},
        },
        {
          {48, 255, -86},
        },
        {
          {48, 57, 57},
          {65, 79, 58},
          {80, 80, 133},
          {81, 83, 58},
          {84, 84, 134},
          {85, 95, -79},
          {97, 111, 60},
          {112, 112, 135},
          {113, 115, 60},
          {116, 116, 136},
          {117, 255, -79},
        },
        {
          {48, 255, -88},
        },
        {
          {48, 57, 57},
          {65, 76, 58},
          {77, 77, 137},
          {78, 90, 58},
          {95, 95, 59},
          {97, 108, 60},
          {109, 109, 138},
          {110, 122, 60},
          {127, 255, 61},
        },
        {
          {48, 255, -90},
        },
        {
          {48, 68, -25},
          {69, 69, 139},
          {70, 100, -25},
          {101, 101, 140},
          {102, 255, -25},
        },
        {
          {48, 255, -92},
        },
        {
          {0, 65535, -7},
        },
        {
          {48, 255, -46},
        },
        {
          {48, 255, -46},
        },
        {
          {48, 255, -46},
        },
        {
          {48, 255, -46},
        },
        {
          {48, 255, -46},
        },
        {
          {0, 65535, -9},
        },
        {
          {0, 65535, -53},
        },
        {
        },
        {
          {10, 10, 141},
        },
        {
          {48, 255, -54},
        },
        {
          {48, 255, -54},
        },
        {
          {48, 255, -54},
        },
        {
          {48, 255, -54},
        },
        {
          {48, 255, -54},
        },
        {
          {48, 57, 142},
          {65, 90, 143},
          {95, 95, 144},
          {97, 122, 145},
          {125, 125, 146},
          {127, 255, 147},
        },
        {
          {48, 255, -109},
        },
        {
          {48, 255, -109},
        },
        {
          {48, 255, -109},
        },
        {
          {48, 75, -20},
          {76, 76, 148},
          {77, 107, -64},
          {108, 108, 149},
          {109, 255, -64},
        },
        {
          {48, 255, -113},
        },
        {
          {48, 78, -21},
          {79, 79, 150},
          {80, 110, -21},
          {111, 111, 151},
          {112, 255, -21},
        },
        {
          {48, 255, -115},
        },
        {
          {48, 68, -25},
          {69, 69, 152},
          {70, 100, -25},
          {101, 101, 153},
          {102, 255, -25},
        },
        {
          {48, 255, -117},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 68, -25},
          {69, 69, 154},
          {70, 100, -25},
          {101, 101, 155},
          {102, 255, -25},
        },
        {
          {48, 255, -121},
        },
        {
          {48, 75, -20},
          {76, 76, 156},
          {77, 107, -64},
          {108, 108, 157},
          {109, 255, -64},
        },
        {
          {48, 255, -123},
        },
        {
          {48, 68, -25},
          {69, 69, 158},
          {70, 100, -25},
          {101, 101, 159},
          {102, 255, -25},
        },
        {
          {48, 255, -125},
        },
        {
          {48, 79, -88},
          {80, 80, 160},
          {81, 90, 58},
          {95, 111, -88},
          {112, 112, 161},
          {113, 122, 60},
          {127, 255, 61},
        },
        {
          {48, 255, -127},
        },
        {
          {48, 57, 57},
          {65, 65, 162},
          {66, 90, 58},
          {95, 95, 59},
          {97, 97, 163},
          {98, 122, 60},
          {127, 255, 61},
        },
        {
          {48, 255, -129},
        },
        {
          {48, 57, 57},
          {65, 77, 58},
          {78, 78, 164},
          {79, 95, -20},
          {97, 109, 60},
          {110, 110, 165},
          {111, 255, -20},
        },
        {
          {48, 255, -131},
        },
        {
          {48, 68, -25},
          {69, 69, 166},
          {70, 100, -25},
          {101, 101, 167},
          {102, 255, -25},
        },
        {
          {48, 255, -133},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 79, -88},
          {80, 80, 168},
          {81, 111, -127},
          {112, 112, 169},
          {113, 255, -127},
        },
        {
          {48, 255, -139},
        },
        {
          {48, 77, -131},
          {78, 78, 170},
          {79, 109, -131},
          {110, 110, 171},
          {111, 255, -20},
        },
        {
          {48, 255, -141},
        },
        {
        },
        {
          {48, 255, -109},
        },
        {
          {48, 255, -109},
        },
        {
          {48, 255, -109},
        },
        {
          {48, 255, -109},
        },
        {
        },
        {
          {48, 255, -109},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 82, -68},
          {83, 83, 172},
          {84, 114, -68},
          {115, 115, 173},
          {116, 255, -68},
        },
        {
          {48, 255, -152},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 57, 57},
          {65, 65, 174},
          {66, 95, -129},
          {97, 97, 175},
          {98, 255, -129},
        },
        {
          {48, 255, -156},
        },
        {
          {48, 57, 57},
          {65, 84, 58},
          {85, 85, 176},
          {86, 95, -23},
          {97, 116, 60},
          {117, 117, 177},
          {118, 255, -23},
        },
        {
          {48, 255, -158},
        },
        {
          {48, 81, -72},
          {82, 82, 178},
          {83, 113, -72},
          {114, 114, 179},
          {115, 255, -24},
        },
        {
          {48, 255, -160},
        },
        {
          {48, 84, -158},
          {85, 85, 180},
          {86, 116, -158},
          {117, 117, 181},
          {118, 255, -23},
        },
        {
          {48, 255, -162},
        },
        {
          {48, 76, -90},
          {77, 77, 182},
          {78, 108, -90},
          {109, 109, 183},
          {110, 255, -90},
        },
        {
          {48, 255, -164},
        },
        {
          {48, 83, -23},
          {84, 84, 184},
          {85, 115, -79},
          {116, 116, 185},
          {117, 255, -79},
        },
        {
          {48, 255, -166},
        },
        {
          {48, 81, -72},
          {82, 82, 186},
          {83, 113, -72},
          {114, 114, 187},
          {115, 255, -24},
        },
        {
          {48, 255, -168},
        },
        {
          {48, 75, -20},
          {76, 76, 188},
          {77, 107, -64},
          {108, 108, 189},
          {109, 255, -64},
        },
        {
          {48, 255, -170},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 68, -25},
          {69, 69, 190},
          {70, 100, -25},
          {101, 101, 191},
          {102, 255, -25},
        },
        {
          {48, 255, -174},
        },
        {
          {48, 66, -75},
          {67, 67, 192},
          {68, 98, -75},
          {99, 99, 193},
          {100, 255, -75},
        },
        {
          {48, 255, -176},
        },
        {
          {48, 67, -69},
          {68, 68, 194},
          {69, 99, -69},
          {100, 100, 195},
          {101, 255, -69},
        },
        {
          {48, 255, -178},
        },
        {
          {48, 57, 57},
          {65, 86, 58},
          {87, 87, 196},
          {88, 90, 58},
          {95, 95, 59},
          {97, 118, 60},
          {119, 119, 197},
          {120, 122, 60},
          {127, 255, 61},
        },
        {
          {48, 255, -180},
        },
        {
          {48, 83, -23},
          {84, 84, 198},
          {85, 115, -79},
          {116, 116, 199},
          {117, 255, -79},
        },
        {
          {48, 255, -182},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 82, -68},
          {83, 83, 200},
          {84, 114, -68},
          {115, 115, 201},
          {116, 255, -68},
        },
        {
          {48, 255, -188},
        },
        {
          {48, 57, 57},
          {65, 65, 202},
          {66, 95, -129},
          {97, 97, 203},
          {98, 255, -129},
        },
        {
          {48, 255, -190},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 71, -28},
          {72, 72, 204},
          {73, 103, -28},
          {104, 104, 205},
          {105, 255, -19},
        },
        {
          {48, 255, -194},
        },
        {
          {48, 68, -25},
          {69, 69, 206},
          {70, 100, -25},
          {101, 101, 207},
          {102, 255, -25},
        },
        {
          {48, 255, -196},
        },
        {
          {48, 72, -83},
          {73, 73, 208},
          {74, 104, -83},
          {105, 105, 209},
          {106, 255, -83},
        },
        {
          {48, 255, -198},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 68, -25},
          {69, 69, 210},
          {70, 100, -25},
          {101, 101, 211},
          {102, 255, -25},
        },
        {
          {48, 255, -202},
        },
        {
          {48, 83, -23},
          {84, 84, 212},
          {85, 115, -79},
          {116, 116, 213},
          {117, 255, -79},
        },
        {
          {48, 255, -204},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 82, -68},
          {83, 83, 214},
          {84, 114, -68},
          {115, 115, 215},
          {116, 255, -68},
        },
        {
          {48, 255, -210},
        },
        {
          {48, 90, -18},
          {95, 95, 216},
          {97, 255, -18},
        },
        {
          {48, 255, -212},
        },
        {
          {48, 68, -25},
          {69, 69, 217},
          {70, 100, -25},
          {101, 101, 218},
          {102, 255, -25},
        },
        {
          {48, 255, -214},
        },
        {
          {48, 68, -25},
          {69, 69, 219},
          {70, 100, -25},
          {101, 101, 220},
          {102, 255, -25},
        },
        {
          {48, 255, -216},
        },
        {
          {48, 69, -22},
          {70, 70, 221},
          {71, 90, 58},
          {95, 101, -22},
          {102, 102, 222},
          {103, 122, 60},
          {127, 255, 61},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 78, -21},
          {79, 79, 223},
          {80, 110, -21},
          {111, 111, 224},
          {112, 255, -21},
        },
        {
          {48, 255, -223},
        },
        {
          {48, 81, -72},
          {82, 82, 225},
          {83, 113, -72},
          {114, 114, 226},
          {115, 255, -24},
        },
        {
          {48, 255, -225},
        },
        {
          {48, 68, -25},
          {69, 69, 227},
          {70, 100, -25},
          {101, 101, 228},
          {102, 255, -25},
        },
        {
          {48, 255, -227},
        },
        {
          {48, 57, 57},
          {65, 65, 229},
          {66, 95, -129},
          {97, 97, 230},
          {98, 255, -129},
        },
        {
          {48, 255, -229},
        },
        {
          {48, 66, -75},
          {67, 67, 231},
          {68, 98, -75},
          {99, 99, 232},
          {100, 255, -75},
        },
        {
          {48, 255, -231},
        },
        {
          {48, 71, -28},
          {72, 72, 233},
          {73, 103, -28},
          {104, 104, 234},
          {105, 255, -19},
        },
        {
          {48, 255, -233},
        },
        {
          {48, 255, -18},
        },
        {
          {48, 255, -18},
        },
      },
      {
        {
          {9, 9, 1},
          {10, 10, 2},
          {13, 13, 3},
          {32, 32, 4},
          {33, 33, 5},
          {34, 34, 6},
          {36, 36, 7},
          {39, 39, 8},
          {40, 40, 9},
          {41, 41, 10},
          {42, 42, 11},
          {43, 43, 12},
          {44, 44, 13},
          {45, 45, 14},
          {46, 46, 15},
          {47, 47, 16},
          {48, 57, 17},
          {60, 60, 18},
          {61, 61, 19},
          {62, 62, 20},
          {64, 64, 21},
          {65, 90, 22},
          {91, 91, 23},
          {93, 93, 24},
          {95, 95, 25},
          {97, 97, 26},
          {98, 99, 27},
          {100, 100, 28},
          {101, 108, 27},
          {109, 109, 29},
          {110, 110, 27},
          {111, 111, 30},
          {112, 122, 27},
          {125, 125, 31},
          {127, 255, 32},
        },
        {
          {9, 32, -2},
        },
        {
          {9, 32, -2},
        },
        {
          {9, 9, 1},
          {10, 10, 33},
          {13, 32, -2},
        },
        {
          {9, 32, -2},
        },
        {
          {61, 61, 34},
        },
        {
          {0, 33, 35},
          {34, 34, 36},
          {35, 65535, 35},
        },
        {
          {65, 90, 37},
          {95, 95, 38},
          {97, 122, 39},
          {127, 255, 40},
        },
        {
          {0, 38, 41},
          {39, 39, 42},
          {40, 65535, 41},
        },
        {
        },
        {
        },
        {
        },
        {
        },
        {
        },
        {
        },
        {
          {46, 46, 43},
        },
        {
          {47, 47, 44},
        },
        {
          {48, 57, 17},
        },
        {
          {61, 61, 45},
        },
        {
        },
        {
          {61, 61, 46},
        },
        {
          {65, 90, 47},
          {95, 95, 48},
          {97, 122, 49},
          {127, 255, 50},
        },
        {
          {48, 57, 51},
          {58, 58, 52},
          {65, 90, 53},
          {95, 95, 54},
          {97, 122, 55},
          {127, 255, 56},
        },
        {
        },
        {
        },
        {
          {48, 255, -24},
        },
        {
          {48, 95, -24},
          {97, 109, 55},
          {110, 110, 57},
          {111, 122, 55},
          {127, 255, 56},
        },
        {
          {48, 255, -24},
        },
        {
          {48, 95, -24},
          {97, 104, 55},
          {105, 105, 58},
          {106, 122, 55},
          {127, 255, 56},
        },
        {
          {48, 95, -24},
          {97, 110, 55},
          {111, 111, 59},
          {112, 122, 55},
          {127, 255, 56},
        },
        {
          {48, 95, -24},
          {97, 113, 55},
          {114, 114, 60},
          {115, 122, 55},
          {127, 255, 56},
        },
        {
        },
        {
          {48, 255, -24},
        },
        {
          {9, 32, -2},
        },
        {
        },
        {
          {0, 65535, -8},
        },
        {
          {34, 34, 61},
        },
        {
          {48, 57, 62},
          {65, 90, 63},
          {95, 95, 64},
          {97, 122, 65},
          {127, 255, 66},
        },
        {
          {48, 255, -39},
        },
        {
          {48, 255, -39},
        },
        {
          {48, 255, -39},
        },
        {
          {0, 65535, -10},
        },
        {
          {39, 39, 67},
        },
        {
        },
        {
        },
        {
        },
        {
        },
        {
          {48, 57, 68},
          {65, 90, 69},
          {95, 95, 70},
          {97, 122, 71},
          {127, 255, 72},
        },
        {
          {48, 255, -49},
        },
        {
          {48, 255, -49},
        },
        {
          {48, 255, -49},
        },
        {
          {48, 255, -24},
        },
        {
          {65, 90, 73},
          {95, 95, 74},
          {97, 122, 75},
          {127, 255, 76},
        },
        {
          {48, 255, -24},
        },
        {
          {48, 255, -24},
        },
        {
          {48, 255, -24},
        },
        {
          {48, 255, -24},
        },
        {
          {48, 95, -24},
          {97, 99, 55},
          {100, 100, 77},
          {101, 122, 55},
          {127, 255, 56},
        },
        {
          {48, 95, -24},
          {97, 117, 55},
          {118, 118, 78},
          {119, 122, 55},
          {127, 255, 56},
        },
        {
          {48, 99, -59},
          {100, 100, 79},
          {101, 255, -59},
        },
        {
          {48, 255, -24},
        },
        {
          {0, 65535, -8},
        },
        {
          {48, 255, -39},
        },
        {
          {48, 255, -39},
        },
        {
          {48, 255, -39},
        },
        {
          {48, 255, -39},
        },
        {
          {48, 255, -39},
        },
        {
          {0, 65535, -10},
        },
        {
          {48, 255, -49},
        },
        {
          {48, 255, -49},
        },
        {
          {48, 255, -49},
        },
        {
          {48, 255, -49},
        },
        {
          {48, 255, -49},
        },
        {
          {48, 57, 80},
          {65, 90, 81},
          {95, 95, 82},
          {97, 122, 83},
          {127, 255, 84},
        },
        {
          {48, 255, -75},
        },
        {
          {48, 255, -75},
        },
        {
          {48, 255, -75},
        },
        {
          {48, 255, -24},
        },
        {
          {48, 255, -24},
        },
        {
          {48, 255, -24},
        },
        {
          {48, 255, -75},
        },
        {
          {48, 255, -75},
        },
        {
          {48, 255, -75},
        },
        {
          {48, 255, -75},
        },
        {
          {48, 255, -75},
        },
      },
      {
        {
          {9, 9, 1},
          {10, 10, 2},
          {13, 13, 3},
          {32, 32, 4},
          {33, 33, 5},
          {34, 34, 6},
          {36, 36, 7},
          {39, 39, 8},
          {40, 40, 9},
          {41, 41, 10},
          {42, 42, 11},
          {43, 43, 12},
          {44, 44, 13},
          {45, 45, 14},
          {46, 46, 15},
          {47, 47, 16},
          {48, 57, 17},
          {60, 60, 18},
          {61, 61, 19},
          {62, 62, 20},
          {64, 64, 21},
          {65, 90, 22},
          {91, 91, 23},
          {93, 93, 24},
          {95, 95, 25},
          {97, 97, 26},
          {98, 99, 27},
          {100, 100, 28},
          {101, 108, 27},
          {109, 109, 29},
          {110, 110, 27},
          {111, 111, 30},
          {112, 122, 27},
          {125, 125, 31},
          {127, 255, 32},
        },
        {
          {9, 32, -2},
        },
        {
          {9, 32, -2},
        },
        {
          {9, 9, 1},
          {10, 10, 33},
          {13, 32, -2},
        },
        {
          {9, 32, -2},
        },
        {
          {61, 61, 34},
        },
        {
          {0, 33, 35},
          {34, 34, 36},
          {35, 65535, 35},
        },
        {
          {65, 90, 37},
          {95, 95, 38},
          {97, 122, 39},
          {127, 255, 40},
        },
        {
          {0, 38, 41},
          {39, 39, 42},
          {40, 65535, 41},
        },
        {
        },
        {
        },
        {
        },
        {
        },
        {
        },
        {
        },
        {
          {46, 46, 43},
        },
        {
          {47, 47, 44},
        },
        {
          {48, 57, 17},
        },
        {
          {61, 61, 45},
        },
        {
        },
        {
          {61, 61, 46},
        },
        {
          {65, 90, 47},
          {95, 95, 48},
          {97, 122, 49},
          {127, 255, 50},
        },
        {
          {48, 57, 51},
          {58, 58, 52},
          {65, 90, 53},
          {95, 95, 54},
          {97, 122, 55},
          {127, 255, 56},
        },
        {
        },
        {
        },
        {
          {48, 255, -24},
        },
        {
          {48, 95, -24},
          {97, 109, 55},
          {110, 110, 57},
          {111, 122, 55},
          {127, 255, 56},
        },
        {
          {48, 255, -24},
        },
        {
          {48, 95, -24},
          {97, 104, 55},
          {105, 105, 58},
          {106, 122, 55},
          {127, 255, 56},
        },
        {
          {48, 95, -24},
          {97, 110, 55},
          {111, 111, 59},
          {112, 122, 55},
          {127, 255, 56},
        },
        {
          {48, 95, -24},
          {97, 113, 55},
          {114, 114, 60},
          {115, 122, 55},
          {127, 255, 56},
        },
        {
        },
        {
          {48, 255, -24},
        },
        {
          {9, 32, -2},
        },
        {
        },
        {
          {0, 65535, -8},
        },
        {
          {34, 34, 61},
        },
        {
          {48, 57, 62},
          {65, 90, 63},
          {95, 95, 64},
          {97, 122, 65},
          {127, 255, 66},
        },
        {
          {48, 255, -39},
        },
        {
          {48, 255, -39},
        },
        {
          {48, 255, -39},
        },
        {
          {0, 65535, -10},
        },
        {
          {39, 39, 67},
        },
        {
        },
        {
        },
        {
        },
        {
        },
        {
          {48, 57, 68},
          {65, 90, 69},
          {95, 95, 70},
          {97, 122, 71},
          {127, 255, 72},
        },
        {
          {48, 255, -49},
        },
        {
          {48, 255, -49},
        },
        {
          {48, 255, -49},
        },
        {
          {48, 255, -24},
        },
        {
          {65, 90, 73},
          {95, 95, 74},
          {97, 122, 75},
          {127, 255, 76},
        },
        {
          {48, 255, -24},
        },
        {
          {48, 255, -24},
        },
        {
          {48, 255, -24},
        },
        {
          {48, 255, -24},
        },
        {
          {48, 95, -24},
          {97, 99, 55},
          {100, 100, 77},
          {101, 122, 55},
          {127, 255, 56},
        },
        {
          {48, 95, -24},
          {97, 117, 55},
          {118, 118, 78},
          {119, 122, 55},
          {127, 255, 56},
        },
        {
          {48, 99, -59},
          {100, 100, 79},
          {101, 255, -59},
        },
        {
          {48, 255, -24},
        },
        {
          {0, 65535, -8},
        },
        {
          {48, 255, -39},
        },
        {
          {48, 255, -39},
        },
        {
          {48, 255, -39},
        },
        {
          {48, 255, -39},
        },
        {
          {48, 255, -39},
        },
        {
          {0, 65535, -10},
        },
        {
          {48, 255, -49},
        },
        {
          {48, 255, -49},
        },
        {
          {48, 255, -49},
        },
        {
          {48, 255, -49},
        },
        {
          {48, 255, -49},
        },
        {
          {48, 57, 80},
          {65, 90, 81},
          {95, 95, 82},
          {97, 122, 83},
          {127, 255, 84},
        },
        {
          {48, 255, -75},
        },
        {
          {48, 255, -75},
        },
        {
          {48, 255, -75},
        },
        {
          {48, 255, -24},
        },
        {
          {48, 255, -24},
        },
        {
          {48, 255, -24},
        },
        {
          {48, 255, -75},
        },
        {
          {48, 255, -75},
        },
        {
          {48, 255, -75},
        },
        {
          {48, 255, -75},
        },
        {
          {48, 255, -75},
        },
      },
    };
    */

    private static int[][] accept; /* = {
      {
  -1, 25, -1, -1, 25, -1, -1, -1, 25, 28, 28, 28, 26, 28, 25, 27, 27, 27, -1, 27, 25, 1, 25, -1, 28, 28, 28, 28, 28, 27, 27, 27, 27, 27, -1, -1, -1, -1, -1, 25, 25, 25, -1, -1, -1, -1, 27, -1, -1, -1, 25, -1, -1, -1, 0, 

      },
      {
  -1, 29, 29, 29, 29, -1, -1, -1, 21, 22, 24, 23, -1, -1, 20, -1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 30, 29, -1, 32, 28, 28, 28, 28, -1, 32, 2, -1, 27, 27, 27, -1, 27, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 5, 11, 5, 11, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, -1, 28, 28, 28, 28, 28, -1, -1, 33, 33, 27, 27, 27, 27, 27, -1, -1, -1, -1, 30, 30, 30, 30, 30, 30, 9, 9, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 18, 13, 18, 13, 30, 30, 30, 30, 33, -1, -1, -1, -1, 27, -1, 17, 17, 30, 30, 6, 6, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 8, 8, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 14, 14, 19, 19, 30, 30, 30, 30, 7, 7, 30, 30, 30, 30, 30, 30, 15, 15, 30, 30, 30, 30, 3, 3, 10, 10, 30, 30, 30, 30, 30, 30, 30, 30, 30, 16, 16, 12, 12, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 4, 4, 

      },
      {
  -1, 29, 29, 29, 29, -1, -1, -1, -1, 47, 48, 51, 52, 58, 53, 42, 41, 60, 54, 49, 56, -1, 38, 45, 46, 38, 38, 38, 38, 38, 38, 61, 38, 29, 50, -1, 59, 39, 39, 39, 39, -1, 59, 43, 40, 55, 57, 44, 44, 44, 44, 38, -1, 38, 38, 38, 38, 38, 38, 38, 34, -1, 39, 39, 39, 39, 39, -1, 44, 44, 44, 44, 44, 38, 38, 38, 38, 35, 37, 36, 38, 38, 38, 38, 38, 

      },
      {
  -1, 29, 29, 29, 29, -1, -1, -1, -1, 47, 48, 51, 52, 58, 53, 42, 41, 60, 54, 49, 56, -1, 38, 45, 46, 38, 38, 38, 38, 38, 38, 61, 38, 29, 50, -1, 59, 39, 39, 39, 39, -1, 59, 43, 40, 55, 57, 44, 44, 44, 44, 38, -1, 38, 38, 38, 38, 38, 38, 38, 34, -1, 39, 39, 39, 39, 39, -1, 44, 44, 44, 44, 44, 38, 38, 38, 38, 35, 37, 36, 38, 38, 38, 38, 38, 

      },
    };
    */

    static
    {
        try
        {
            BufferedReader r = new BufferedReader (new InputStreamReader (
                Lexer.class.getResourceAsStream("lexer.dat")));

            // read gotoTable
            int length = Integer.parseInt(r.readLine());
            gotoTable = new int[length][][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = Integer.parseInt(r.readLine());
                gotoTable[i] = new int[length][][];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                    length = Integer.parseInt(r.readLine());
                    gotoTable[i][j] = new int[length][3];
                    for(int k = 0; k < gotoTable[i][j].length; k++)
                    {
                        for(int l = 0; l < 3; l++)
                        {
                            gotoTable[i][j][k][l] = Integer.parseInt(r.readLine());
                        }
                    }
                }
            }

            // read accept
            length = Integer.parseInt(r.readLine());
            accept = new int[length][];
            for(int i = 0; i < accept.length; i++)
            {
                length = Integer.parseInt(r.readLine());
                accept[i] = new int[length];
                for(int j = 0; j < accept[i].length; j++)
                {
                    accept[i][j] = Integer.parseInt(r.readLine());
                }
            }

            r.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
        }
    }

    public static class State
    {
        public final static State DATA = new State(0);
        public final static State CODE = new State(1);
        public final static State XPATH = new State(2);
        public final static State IXPATH = new State(3);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
