/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.node;

import java.util.*;
import org.sablecc.sablecc.analysis.*;

public final class AUnExp extends PUnExp
{
    private PBasic _basic_;
    private PUnOp _un_op_;

    public AUnExp ()
    {
    }

    public AUnExp (
            PBasic _basic_,
            PUnOp _un_op_
    )
    {
        setBasic (_basic_);
        setUnOp (_un_op_);
    }

    public Object clone()
    {
        return new AUnExp (
            (PBasic)cloneNode (_basic_),
            (PUnOp)cloneNode (_un_op_)
        );
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAUnExp(this);
    }

    public PBasic getBasic ()
    {
        return _basic_;
    }

    public void setBasic (PBasic node)
    {
        if(_basic_ != null)
        {
            _basic_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _basic_ = node;
    }
    public PUnOp getUnOp ()
    {
        return _un_op_;
    }

    public void setUnOp (PUnOp node)
    {
        if(_un_op_ != null)
        {
            _un_op_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _un_op_ = node;
    }

    public String toString()
    {
        return ""
            + toString (_basic_)
            + toString (_un_op_)
        ;
    }

    void removeChild(Node child)
    {
        if ( _basic_ == child )
        {
            _basic_ = null;
            return;
        }
        if ( _un_op_ == child )
        {
            _un_op_ = null;
            return;
        }
    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if ( _basic_ == oldChild )
        {
            setBasic ((PBasic) newChild);
            return;
        }
        if ( _un_op_ == oldChild )
        {
            setUnOp ((PUnOp) newChild);
            return;
        }
    }

}
