/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * This file is part of SableCC.                             *
 * See the file "LICENSE" for copyright information and the  *
 * terms and conditions for copying, distribution and        *
 * modification of SableCC.                                  *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

Macro:AnalysisHeader
/* This file was generated by SableCC (http://www.sablecc.org/). */

package $0$;

import $1$.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object in);
    Object getOut(Node node);
    void setOut(Node node, Object out);


$
Macro:AnalysisStart
    void caseStart(Start node);

$

Macro:AnalysisBody
    void case$0$($0$ node);

$

Macro:AnalysisTail
    void caseEOF(EOF node);
}

$

Macro:AnalysisAdapterHeader
/* This file was generated by SableCC (http://www.sablecc.org/). */

package $0$;

import java.util.*;
import $1$.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable in;
    private Hashtable out;

    public Object getIn(Node node)
    {
        if(in == null)
        {
            return null;
        }

        return in.get(node);
    }

    public void setIn(Node node, Object in)
    {
        if(this.in == null)
        {
            this.in = new Hashtable(1);
        }

        if(in != null)
        {
            this.in.put(node, in);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(out == null)
        {
            return null;
        }

        return out.get(node);
    }

    public void setOut(Node node, Object out)
    {
        if(this.out == null)
        {
            this.out = new Hashtable(1);
        }

        if(out != null)
        {
            this.out.put(node, out);
        }
        else
        {
            this.out.remove(node);
        }
    }

$

Macro:AnalysisAdapterStart
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

$

Macro:AnalysisAdapterBody

    public void case$0$($0$ node)
    {
        defaultCase(node);
    }

$

Macro:AnalysisAdapterTail

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(Node node)
    {
    }
}

$

Macro:DepthFirstAdapterHeader
/* This file was generated by SableCC (http://www.sablecc.org/). */

package $0$;

import java.util.*;
import $1$.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.get$2$().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

$

Macro:ReversedDepthFirstAdapterHeader
/* This file was generated by SableCC (http://www.sablecc.org/). */

package $0$;

import $1$.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(Node node)
    {
    }

    public void defaultOut(Node node)
    {
    }

    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.get$2$().apply(this);
        outStart(node);
    }

$

Macro:DepthFirstAdapterInOut

    public void in$0$($0$ node)
    {
        defaultIn(node);
    }

    public void out$0$($0$ node)
    {
        defaultOut(node);
    }

$

Macro:DepthFirstAdapterCaseHeader

    public void case$0$($0$ node)
    {
        in$0$(node);

$

Macro:DepthFirstAdapterCaseBodyNode
        if(node.get$0$() != null)
        {
            node.get$0$().apply(this);
        }

$

Macro:DepthFirstAdapterCaseBodyList
        {
            Object temp[] = node.get$0$().toArray();
            for(int i = 0; i < temp.length; i++)
            {
                (($1$) temp[i]).apply(this);
            }
        }

$

Macro:ReversedDepthFirstAdapterCaseBodyList
        {
            Object temp[] = node.get$0$().toArray();
            for(int i = temp.length - 1; i >= 0; i--)
            {
                (($1$) temp[i]).apply(this);
            }
        }

$

Macro:DepthFirstAdapterCaseTail
        out$0$(node);
    }

$

Macro:DepthFirstAdapterTail
}

$
