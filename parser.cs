/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;
using System.IO;
using CS426.node;
using CS426.lexer;
using CS426.analysis;

namespace CS426.parser {

public class ParserException : ApplicationException
{
    Token token;

    public ParserException(Token token, String  message) : base(message)
    {
        this.token = token;
    }

    public Token Token
    {
      get { return token; }
    }
}

internal class State
{
    internal int state;
    internal ArrayList nodes;

    internal State(int state, ArrayList nodes)
    {
        this.state = state;
        this.nodes = nodes;
    }
}

internal class TokenIndex : AnalysisAdapter
{
    internal int index;

    public override void CaseTEol(TEol node)
    {
        index = 0;
    }

    public override void CaseTAssign(TAssign node)
    {
        index = 1;
    }

    public override void CaseTPlus(TPlus node)
    {
        index = 2;
    }

    public override void CaseTMinus(TMinus node)
    {
        index = 3;
    }

    public override void CaseTMult(TMult node)
    {
        index = 4;
    }

    public override void CaseTDiv(TDiv node)
    {
        index = 5;
    }

    public override void CaseTLeftparent(TLeftparent node)
    {
        index = 6;
    }

    public override void CaseTRightparent(TRightparent node)
    {
        index = 7;
    }

    public override void CaseTAnd(TAnd node)
    {
        index = 8;
    }

    public override void CaseTOr(TOr node)
    {
        index = 9;
    }

    public override void CaseTNot(TNot node)
    {
        index = 10;
    }

    public override void CaseTIntdec(TIntdec node)
    {
        index = 11;
    }

    public override void CaseTStrdec(TStrdec node)
    {
        index = 12;
    }

    public override void CaseTFloatdec(TFloatdec node)
    {
        index = 13;
    }

    public override void CaseTConstdec(TConstdec node)
    {
        index = 14;
    }

    public override void CaseTIf(TIf node)
    {
        index = 15;
    }

    public override void CaseTLeftcurl(TLeftcurl node)
    {
        index = 16;
    }

    public override void CaseTRightcurl(TRightcurl node)
    {
        index = 17;
    }

    public override void CaseTLeftsquare(TLeftsquare node)
    {
        index = 18;
    }

    public override void CaseTRightsquare(TRightsquare node)
    {
        index = 19;
    }

    public override void CaseTThen(TThen node)
    {
        index = 20;
    }

    public override void CaseTGrtr(TGrtr node)
    {
        index = 21;
    }

    public override void CaseTGrtreq(TGrtreq node)
    {
        index = 22;
    }

    public override void CaseTEqual(TEqual node)
    {
        index = 23;
    }

    public override void CaseTLess(TLess node)
    {
        index = 24;
    }

    public override void CaseTLesseq(TLesseq node)
    {
        index = 25;
    }

    public override void CaseTLoop(TLoop node)
    {
        index = 26;
    }

    public override void CaseTFunc(TFunc node)
    {
        index = 27;
    }

    public override void CaseTParam(TParam node)
    {
        index = 28;
    }

    public override void CaseTMain(TMain node)
    {
        index = 29;
    }

    public override void CaseTId(TId node)
    {
        index = 30;
    }

    public override void CaseTInteger(TInteger node)
    {
        index = 31;
    }

    public override void CaseTFloat(TFloat node)
    {
        index = 32;
    }

    public override void CaseTEngin(TEngin node)
    {
        index = 33;
    }

    public override void CaseTString(TString node)
    {
        index = 34;
    }

    public override void CaseEOF(EOF node)
    {
        index = 35;
    }
}

public class Parser
{
    private Analysis ignoredTokens = new AnalysisAdapter();
    public Analysis IgnoredTokens
    {
      get { return ignoredTokens; }
    }

    protected ArrayList nodeList;

    private Lexer lexer;
    private Stack stack = new Stack();
    private int last_shift;
    private int last_pos;
    private int last_line;
    private Token last_token;
    private TokenIndex converter = new TokenIndex();
    private int[] action = new int[2];

    private const int SHIFT = 0;
    private const int REDUCE = 1;
    private const int ACCEPT = 2;
    private const int ERROR = 3;

    public Parser(Lexer lexer)
    {
        this.lexer = lexer;
    }

    private int GoTo(int index)
    {
        int state = State();
        int low = 1;
        int high = gotoTable[index].Length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            int middle = (low + high) / 2;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private void Push(int numstate, ArrayList listNode)
    {
        this.nodeList = listNode;

        stack.Push(new State(numstate, this.nodeList));
    }

    private int State()
    {
        State s = (State) stack.Peek();
        return s.state;
    }

    private ArrayList Pop()
    {
        return (ArrayList) ((State) stack.Pop()).nodes;
    }

    private int Index(Switchable token)
    {
        converter.index = -1;
        token.Apply(converter);
        return converter.index;
    }

    public Start Parse()
    {
        Push(0, null);

        IList ign = null;
        while(true)
        {
            while(Index(lexer.Peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new TypedList(NodeCast.Instance);
                }

                ign.Add(lexer.Next());
            }

            if(ign != null)
            {
                ignoredTokens.SetIn(lexer.Peek(), ign);
                ign = null;
            }

            last_pos = lexer.Peek().Pos;
            last_line = lexer.Peek().Line;
            last_token = lexer.Peek();

            int index = Index(lexer.Peek());
            action[0] = actionTable[State()][0][1];
            action[1] = actionTable[State()][0][2];

            int low = 1;
            int high = actionTable[State()].Length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < actionTable[State()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > actionTable[State()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    action[0] = actionTable[State()][middle][1];
                    action[1] = actionTable[State()][middle][2];
                    break;
                }
            }

            switch(action[0])
            {
                case SHIFT:
        {
            ArrayList list = new ArrayList();
            list.Add(lexer.Next());
                        Push(action[1], list);
                        last_shift = action[1];
                    }
        break;
                case REDUCE:
                    switch(action[1])
                    {
                    case 0:
        {
      ArrayList list = New0();
      Push(GoTo(0), list);
        }
        break;
                    case 1:
        {
      ArrayList list = New1();
      Push(GoTo(1), list);
        }
        break;
                    case 2:
        {
      ArrayList list = New2();
      Push(GoTo(1), list);
        }
        break;
                    case 3:
        {
      ArrayList list = New3();
      Push(GoTo(2), list);
        }
        break;
                    case 4:
        {
      ArrayList list = New4();
      Push(GoTo(2), list);
        }
        break;
                    case 5:
        {
      ArrayList list = New5();
      Push(GoTo(2), list);
        }
        break;
                    case 6:
        {
      ArrayList list = New6();
      Push(GoTo(2), list);
        }
        break;
                    case 7:
        {
      ArrayList list = New7();
      Push(GoTo(2), list);
        }
        break;
                    case 8:
        {
      ArrayList list = New8();
      Push(GoTo(2), list);
        }
        break;
                    case 9:
        {
      ArrayList list = New9();
      Push(GoTo(2), list);
        }
        break;
                    case 10:
        {
      ArrayList list = New10();
      Push(GoTo(3), list);
        }
        break;
                    case 11:
        {
      ArrayList list = New11();
      Push(GoTo(4), list);
        }
        break;
                    case 12:
        {
      ArrayList list = New12();
      Push(GoTo(4), list);
        }
        break;
                    case 13:
        {
      ArrayList list = New13();
      Push(GoTo(4), list);
        }
        break;
                    case 14:
        {
      ArrayList list = New14();
      Push(GoTo(4), list);
        }
        break;
                    case 15:
        {
      ArrayList list = New15();
      Push(GoTo(5), list);
        }
        break;
                    case 16:
        {
      ArrayList list = New16();
      Push(GoTo(6), list);
        }
        break;
                    case 17:
        {
      ArrayList list = New17();
      Push(GoTo(6), list);
        }
        break;
                    case 18:
        {
      ArrayList list = New18();
      Push(GoTo(7), list);
        }
        break;
                    case 19:
        {
      ArrayList list = New19();
      Push(GoTo(7), list);
        }
        break;
                    case 20:
        {
      ArrayList list = New20();
      Push(GoTo(7), list);
        }
        break;
                    case 21:
        {
      ArrayList list = New21();
      Push(GoTo(8), list);
        }
        break;
                    case 22:
        {
      ArrayList list = New22();
      Push(GoTo(9), list);
        }
        break;
                    case 23:
        {
      ArrayList list = New23();
      Push(GoTo(9), list);
        }
        break;
                    case 24:
        {
      ArrayList list = New24();
      Push(GoTo(9), list);
        }
        break;
                    case 25:
        {
      ArrayList list = New25();
      Push(GoTo(10), list);
        }
        break;
                    case 26:
        {
      ArrayList list = New26();
      Push(GoTo(10), list);
        }
        break;
                    case 27:
        {
      ArrayList list = New27();
      Push(GoTo(10), list);
        }
        break;
                    case 28:
        {
      ArrayList list = New28();
      Push(GoTo(11), list);
        }
        break;
                    case 29:
        {
      ArrayList list = New29();
      Push(GoTo(11), list);
        }
        break;
                    case 30:
        {
      ArrayList list = New30();
      Push(GoTo(12), list);
        }
        break;
                    case 31:
        {
      ArrayList list = New31();
      Push(GoTo(12), list);
        }
        break;
                    case 32:
        {
      ArrayList list = New32();
      Push(GoTo(13), list);
        }
        break;
                    case 33:
        {
      ArrayList list = New33();
      Push(GoTo(13), list);
        }
        break;
                    case 34:
        {
      ArrayList list = New34();
      Push(GoTo(13), list);
        }
        break;
                    case 35:
        {
      ArrayList list = New35();
      Push(GoTo(13), list);
        }
        break;
                    case 36:
        {
      ArrayList list = New36();
      Push(GoTo(13), list);
        }
        break;
                    case 37:
        {
      ArrayList list = New37();
      Push(GoTo(14), list);
        }
        break;
                    case 38:
        {
      ArrayList list = New38();
      Push(GoTo(15), list);
        }
        break;
                    case 39:
        {
      ArrayList list = New39();
      Push(GoTo(16), list);
        }
        break;
                    case 40:
        {
      ArrayList list = New40();
      Push(GoTo(17), list);
        }
        break;
                    case 41:
        {
      ArrayList list = New41();
      Push(GoTo(18), list);
        }
        break;
                    case 42:
        {
      ArrayList list = New42();
      Push(GoTo(18), list);
        }
        break;
                    case 43:
        {
      ArrayList list = New43();
      Push(GoTo(19), list);
        }
        break;
                    case 44:
        {
      ArrayList list = New44();
      Push(GoTo(20), list);
        }
        break;
                    case 45:
        {
      ArrayList list = New45();
      Push(GoTo(20), list);
        }
        break;
                    case 46:
        {
      ArrayList list = New46();
      Push(GoTo(20), list);
        }
        break;
                    case 47:
        {
      ArrayList list = New47();
      Push(GoTo(20), list);
        }
        break;
                    case 48:
        {
      ArrayList list = New48();
      Push(GoTo(20), list);
        }
        break;
                    case 49:
        {
      ArrayList list = New49();
      Push(GoTo(21), list);
        }
        break;
                    case 50:
        {
      ArrayList list = New50();
      Push(GoTo(21), list);
        }
        break;
                    case 51:
        {
      ArrayList list = New51();
      Push(GoTo(21), list);
        }
        break;
                    case 52:
        {
      ArrayList list = New52();
      Push(GoTo(22), list);
        }
        break;
                    case 53:
        {
      ArrayList list = New53();
      Push(GoTo(23), list);
        }
        break;
                    case 54:
        {
      ArrayList list = New54();
      Push(GoTo(24), list);
        }
        break;
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) lexer.Next();
                        PProgram node1 = (PProgram) ((ArrayList)Pop())[0];
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(last_token,
                        "[" + last_line + "," + last_pos + "] " +
                        errorMessages[errors[action[1]]]);
            }
        }
    }

    ArrayList New0()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PStatements pstatementsNode2 = (PStatements)nodeArrayList1[0];
        AProgram pprogramNode1 = new AProgram (
              pstatementsNode2
        );
        nodeList.Add(pprogramNode1);
        return nodeList;
    }
    ArrayList New1()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PStatement pstatementNode2 = (PStatement)nodeArrayList1[0];
        PStatements pstatementsNode3 = (PStatements)nodeArrayList2[0];
        AMultipleStatements pstatementsNode1 = new AMultipleStatements (
              pstatementNode2,
              pstatementsNode3
        );
        nodeList.Add(pstatementsNode1);
        return nodeList;
    }
    ArrayList New2()
    {
        ArrayList nodeList = new ArrayList();
        ASingleStatements pstatementsNode1 = new ASingleStatements (
        );
        nodeList.Add(pstatementsNode1);
        return nodeList;
    }
    ArrayList New3()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PDeclaration pdeclarationNode2 = (PDeclaration)nodeArrayList1[0];
        ADeclarationStatementStatement pstatementNode1 = new ADeclarationStatementStatement (
              pdeclarationNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New4()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PFunctionCall pfunctioncallNode2 = (PFunctionCall)nodeArrayList1[0];
        AFunctionCallStatementStatement pstatementNode1 = new AFunctionCallStatementStatement (
              pfunctioncallNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New5()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PAssignment passignmentNode2 = (PAssignment)nodeArrayList1[0];
        AAssignStatementStatement pstatementNode1 = new AAssignStatementStatement (
              passignmentNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New6()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PBranch pbranchNode2 = (PBranch)nodeArrayList1[0];
        ABranchingStatementStatement pstatementNode1 = new ABranchingStatementStatement (
              pbranchNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New7()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PIterate piterateNode2 = (PIterate)nodeArrayList1[0];
        AIterationStatementStatement pstatementNode1 = new AIterationStatementStatement (
              piterateNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New8()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PHelperDeclare phelperdeclareNode2 = (PHelperDeclare)nodeArrayList1[0];
        AHelperFunctionDeclareStatement pstatementNode1 = new AHelperFunctionDeclareStatement (
              phelperdeclareNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New9()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PMainDeclare pmaindeclareNode2 = (PMainDeclare)nodeArrayList1[0];
        AMainFunctionDeclareStatement pstatementNode1 = new AMainFunctionDeclareStatement (
              pmaindeclareNode2
        );
        nodeList.Add(pstatementNode1);
        return nodeList;
    }
    ArrayList New10()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PType ptypeNode2 = (PType)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TEol teolNode4 = (TEol)nodeArrayList3[0];
        ADeclaration pdeclarationNode1 = new ADeclaration (
              ptypeNode2,
              tidNode3,
              teolNode4
        );
        nodeList.Add(pdeclarationNode1);
        return nodeList;
    }
    ArrayList New11()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIntdec tintdecNode2 = (TIntdec)nodeArrayList1[0];
        AIntType ptypeNode1 = new AIntType (
              tintdecNode2
        );
        nodeList.Add(ptypeNode1);
        return nodeList;
    }
    ArrayList New12()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TStrdec tstrdecNode2 = (TStrdec)nodeArrayList1[0];
        AStrType ptypeNode1 = new AStrType (
              tstrdecNode2
        );
        nodeList.Add(ptypeNode1);
        return nodeList;
    }
    ArrayList New13()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TFloatdec tfloatdecNode2 = (TFloatdec)nodeArrayList1[0];
        AFloatType ptypeNode1 = new AFloatType (
              tfloatdecNode2
        );
        nodeList.Add(ptypeNode1);
        return nodeList;
    }
    ArrayList New14()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TConstdec tconstdecNode2 = (TConstdec)nodeArrayList1[0];
        PType ptypeNode3 = (PType)nodeArrayList2[0];
        AConstType ptypeNode1 = new AConstType (
              tconstdecNode2,
              ptypeNode3
        );
        nodeList.Add(ptypeNode1);
        return nodeList;
    }
    ArrayList New15()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TLeftparent tleftparentNode3 = (TLeftparent)nodeArrayList2[0];
        PParameters pparametersNode4 = (PParameters)nodeArrayList3[0];
        TRightparent trightparentNode5 = (TRightparent)nodeArrayList4[0];
        TEol teolNode6 = (TEol)nodeArrayList5[0];
        AFunctionCall pfunctioncallNode1 = new AFunctionCall (
              tidNode2,
              tleftparentNode3,
              pparametersNode4,
              trightparentNode5,
              teolNode6
        );
        nodeList.Add(pfunctioncallNode1);
        return nodeList;
    }
    ArrayList New16()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PParameter pparameterNode2 = (PParameter)nodeArrayList1[0];
        TParam tparamNode3 = (TParam)nodeArrayList2[0];
        PParameters pparametersNode4 = (PParameters)nodeArrayList3[0];
        AMultipleParameters pparametersNode1 = new AMultipleParameters (
              pparameterNode2,
              tparamNode3,
              pparametersNode4
        );
        nodeList.Add(pparametersNode1);
        return nodeList;
    }
    ArrayList New17()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PParameter pparameterNode2 = (PParameter)nodeArrayList1[0];
        ASingleParameters pparametersNode1 = new ASingleParameters (
              pparameterNode2
        );
        nodeList.Add(pparametersNode1);
        return nodeList;
    }
    ArrayList New18()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        AMathParameter pparameterNode1 = new AMathParameter (
              pexpressionNode2
        );
        nodeList.Add(pparameterNode1);
        return nodeList;
    }
    ArrayList New19()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PComparison pcomparisonNode2 = (PComparison)nodeArrayList1[0];
        ALogicParameter pparameterNode1 = new ALogicParameter (
              pcomparisonNode2
        );
        nodeList.Add(pparameterNode1);
        return nodeList;
    }
    ArrayList New20()
    {
        ArrayList nodeList = new ArrayList();
        AEmptyParameter pparameterNode1 = new AEmptyParameter (
        );
        nodeList.Add(pparameterNode1);
        return nodeList;
    }
    ArrayList New21()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        TAssign tassignNode3 = (TAssign)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        TEol teolNode5 = (TEol)nodeArrayList4[0];
        AAssignment passignmentNode1 = new AAssignment (
              tidNode2,
              tassignNode3,
              pexpressionNode4,
              teolNode5
        );
        nodeList.Add(passignmentNode1);
        return nodeList;
    }
    ArrayList New22()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TPlus tplusNode3 = (TPlus)nodeArrayList2[0];
        PExpression2 pexpression2Node4 = (PExpression2)nodeArrayList3[0];
        AAddExpression pexpressionNode1 = new AAddExpression (
              pexpressionNode2,
              tplusNode3,
              pexpression2Node4
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New23()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        TMinus tminusNode3 = (TMinus)nodeArrayList2[0];
        PExpression2 pexpression2Node4 = (PExpression2)nodeArrayList3[0];
        ASubtractExpression pexpressionNode1 = new ASubtractExpression (
              pexpressionNode2,
              tminusNode3,
              pexpression2Node4
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New24()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        APassExpression pexpressionNode1 = new APassExpression (
              pexpression2Node2
        );
        nodeList.Add(pexpressionNode1);
        return nodeList;
    }
    ArrayList New25()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        TMult tmultNode3 = (TMult)nodeArrayList2[0];
        PExpression3 pexpression3Node4 = (PExpression3)nodeArrayList3[0];
        AMultiplyExpression2 pexpression2Node1 = new AMultiplyExpression2 (
              pexpression2Node2,
              tmultNode3,
              pexpression3Node4
        );
        nodeList.Add(pexpression2Node1);
        return nodeList;
    }
    ArrayList New26()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression2 pexpression2Node2 = (PExpression2)nodeArrayList1[0];
        TDiv tdivNode3 = (TDiv)nodeArrayList2[0];
        PExpression3 pexpression3Node4 = (PExpression3)nodeArrayList3[0];
        ADivideExpression2 pexpression2Node1 = new ADivideExpression2 (
              pexpression2Node2,
              tdivNode3,
              pexpression3Node4
        );
        nodeList.Add(pexpression2Node1);
        return nodeList;
    }
    ArrayList New27()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression3 pexpression3Node2 = (PExpression3)nodeArrayList1[0];
        APassExpression2 pexpression2Node1 = new APassExpression2 (
              pexpression3Node2
        );
        nodeList.Add(pexpression2Node1);
        return nodeList;
    }
    ArrayList New28()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLeftparent tleftparentNode2 = (TLeftparent)nodeArrayList1[0];
        PExpression pexpressionNode3 = (PExpression)nodeArrayList2[0];
        TRightparent trightparentNode4 = (TRightparent)nodeArrayList3[0];
        AParenthesisExpression3 pexpression3Node1 = new AParenthesisExpression3 (
              tleftparentNode2,
              pexpressionNode3,
              trightparentNode4
        );
        nodeList.Add(pexpression3Node1);
        return nodeList;
    }
    ArrayList New29()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression4 pexpression4Node2 = (PExpression4)nodeArrayList1[0];
        APassExpression3 pexpression3Node1 = new APassExpression3 (
              pexpression4Node2
        );
        nodeList.Add(pexpression3Node1);
        return nodeList;
    }
    ArrayList New30()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMinus tminusNode2 = (TMinus)nodeArrayList1[0];
        POperand poperandNode3 = (POperand)nodeArrayList2[0];
        ANegativeExpression4 pexpression4Node1 = new ANegativeExpression4 (
              tminusNode2,
              poperandNode3
        );
        nodeList.Add(pexpression4Node1);
        return nodeList;
    }
    ArrayList New31()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        POperand poperandNode2 = (POperand)nodeArrayList1[0];
        APassExpression4 pexpression4Node1 = new APassExpression4 (
              poperandNode2
        );
        nodeList.Add(pexpression4Node1);
        return nodeList;
    }
    ArrayList New32()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TInteger tintegerNode2 = (TInteger)nodeArrayList1[0];
        AIntegerOperand poperandNode1 = new AIntegerOperand (
              tintegerNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New33()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TFloat tfloatNode2 = (TFloat)nodeArrayList1[0];
        AFloatOperand poperandNode1 = new AFloatOperand (
              tfloatNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New34()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TEngin tenginNode2 = (TEngin)nodeArrayList1[0];
        AEngineeringOperand poperandNode1 = new AEngineeringOperand (
              tenginNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New35()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TString tstringNode2 = (TString)nodeArrayList1[0];
        AStringOperand poperandNode1 = new AStringOperand (
              tstringNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New36()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TId tidNode2 = (TId)nodeArrayList1[0];
        AVariableOperand poperandNode1 = new AVariableOperand (
              tidNode2
        );
        nodeList.Add(poperandNode1);
        return nodeList;
    }
    ArrayList New37()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TIf tifNode2 = (TIf)nodeArrayList1[0];
        PIfCurls pifcurlsNode3 = (PIfCurls)nodeArrayList2[0];
        PIfSquares pifsquaresNode4 = (PIfSquares)nodeArrayList3[0];
        TThen tthenNode5 = (TThen)nodeArrayList4[0];
        PThenSquares pthensquaresNode6 = (PThenSquares)nodeArrayList5[0];
        ABranch pbranchNode1 = new ABranch (
              tifNode2,
              pifcurlsNode3,
              pifsquaresNode4,
              tthenNode5,
              pthensquaresNode6
        );
        nodeList.Add(pbranchNode1);
        return nodeList;
    }
    ArrayList New38()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLeftcurl tleftcurlNode2 = (TLeftcurl)nodeArrayList1[0];
        PLogical plogicalNode3 = (PLogical)nodeArrayList2[0];
        TRightcurl trightcurlNode4 = (TRightcurl)nodeArrayList3[0];
        AIfCurls pifcurlsNode1 = new AIfCurls (
              tleftcurlNode2,
              plogicalNode3,
              trightcurlNode4
        );
        nodeList.Add(pifcurlsNode1);
        return nodeList;
    }
    ArrayList New39()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLeftsquare tleftsquareNode2 = (TLeftsquare)nodeArrayList1[0];
        PStatements pstatementsNode3 = (PStatements)nodeArrayList2[0];
        TRightsquare trightsquareNode4 = (TRightsquare)nodeArrayList3[0];
        AIfSquares pifsquaresNode1 = new AIfSquares (
              tleftsquareNode2,
              pstatementsNode3,
              trightsquareNode4
        );
        nodeList.Add(pifsquaresNode1);
        return nodeList;
    }
    ArrayList New40()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLeftsquare tleftsquareNode2 = (TLeftsquare)nodeArrayList1[0];
        PStatements pstatementsNode3 = (PStatements)nodeArrayList2[0];
        TRightsquare trightsquareNode4 = (TRightsquare)nodeArrayList3[0];
        AThenSquares pthensquaresNode1 = new AThenSquares (
              tleftsquareNode2,
              pstatementsNode3,
              trightsquareNode4
        );
        nodeList.Add(pthensquaresNode1);
        return nodeList;
    }
    ArrayList New41()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PLogical plogicalNode2 = (PLogical)nodeArrayList1[0];
        PBoolean pbooleanNode3 = (PBoolean)nodeArrayList2[0];
        PComparison pcomparisonNode4 = (PComparison)nodeArrayList3[0];
        AComplexLogicalExpressionLogical plogicalNode1 = new AComplexLogicalExpressionLogical (
              plogicalNode2,
              pbooleanNode3,
              pcomparisonNode4
        );
        nodeList.Add(plogicalNode1);
        return nodeList;
    }
    ArrayList New42()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PComparison pcomparisonNode2 = (PComparison)nodeArrayList1[0];
        ASingleLogicalExpressionLogical plogicalNode1 = new ASingleLogicalExpressionLogical (
              pcomparisonNode2
        );
        nodeList.Add(plogicalNode1);
        return nodeList;
    }
    ArrayList New43()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        PExpression pexpressionNode2 = (PExpression)nodeArrayList1[0];
        POperator poperatorNode3 = (POperator)nodeArrayList2[0];
        PExpression pexpressionNode4 = (PExpression)nodeArrayList3[0];
        AComparison pcomparisonNode1 = new AComparison (
              pexpressionNode2,
              poperatorNode3,
              pexpressionNode4
        );
        nodeList.Add(pcomparisonNode1);
        return nodeList;
    }
    ArrayList New44()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TGrtr tgrtrNode2 = (TGrtr)nodeArrayList1[0];
        AGreaterThanOperator poperatorNode1 = new AGreaterThanOperator (
              tgrtrNode2
        );
        nodeList.Add(poperatorNode1);
        return nodeList;
    }
    ArrayList New45()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TGrtreq tgrtreqNode2 = (TGrtreq)nodeArrayList1[0];
        AGreaterEqualOperator poperatorNode1 = new AGreaterEqualOperator (
              tgrtreqNode2
        );
        nodeList.Add(poperatorNode1);
        return nodeList;
    }
    ArrayList New46()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TEqual tequalNode2 = (TEqual)nodeArrayList1[0];
        AEqualOperator poperatorNode1 = new AEqualOperator (
              tequalNode2
        );
        nodeList.Add(poperatorNode1);
        return nodeList;
    }
    ArrayList New47()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLess tlessNode2 = (TLess)nodeArrayList1[0];
        ALessThanOperator poperatorNode1 = new ALessThanOperator (
              tlessNode2
        );
        nodeList.Add(poperatorNode1);
        return nodeList;
    }
    ArrayList New48()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLesseq tlesseqNode2 = (TLesseq)nodeArrayList1[0];
        ALessEqualOperator poperatorNode1 = new ALessEqualOperator (
              tlesseqNode2
        );
        nodeList.Add(poperatorNode1);
        return nodeList;
    }
    ArrayList New49()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TAnd tandNode2 = (TAnd)nodeArrayList1[0];
        AAndBoolean pbooleanNode1 = new AAndBoolean (
              tandNode2
        );
        nodeList.Add(pbooleanNode1);
        return nodeList;
    }
    ArrayList New50()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TOr torNode2 = (TOr)nodeArrayList1[0];
        AOrBoolean pbooleanNode1 = new AOrBoolean (
              torNode2
        );
        nodeList.Add(pbooleanNode1);
        return nodeList;
    }
    ArrayList New51()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TNot tnotNode2 = (TNot)nodeArrayList1[0];
        ANotBoolean pbooleanNode1 = new ANotBoolean (
              tnotNode2
        );
        nodeList.Add(pbooleanNode1);
        return nodeList;
    }
    ArrayList New52()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TLoop tloopNode2 = (TLoop)nodeArrayList1[0];
        TLeftcurl tleftcurlNode3 = (TLeftcurl)nodeArrayList2[0];
        PLogical plogicalNode4 = (PLogical)nodeArrayList3[0];
        TRightcurl trightcurlNode5 = (TRightcurl)nodeArrayList4[0];
        TLeftsquare tleftsquareNode6 = (TLeftsquare)nodeArrayList5[0];
        PStatements pstatementsNode7 = (PStatements)nodeArrayList6[0];
        TRightsquare trightsquareNode8 = (TRightsquare)nodeArrayList7[0];
        AIterate piterateNode1 = new AIterate (
              tloopNode2,
              tleftcurlNode3,
              plogicalNode4,
              trightcurlNode5,
              tleftsquareNode6,
              pstatementsNode7,
              trightsquareNode8
        );
        nodeList.Add(piterateNode1);
        return nodeList;
    }
    ArrayList New53()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList8 = (ArrayList) Pop();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TFunc tfuncNode2 = (TFunc)nodeArrayList1[0];
        TId tidNode3 = (TId)nodeArrayList2[0];
        TLeftcurl tleftcurlNode4 = (TLeftcurl)nodeArrayList3[0];
        PParameters pparametersNode5 = (PParameters)nodeArrayList4[0];
        TRightcurl trightcurlNode6 = (TRightcurl)nodeArrayList5[0];
        TLeftsquare tleftsquareNode7 = (TLeftsquare)nodeArrayList6[0];
        PStatements pstatementsNode8 = (PStatements)nodeArrayList7[0];
        TRightsquare trightsquareNode9 = (TRightsquare)nodeArrayList8[0];
        AHelperDeclare phelperdeclareNode1 = new AHelperDeclare (
              tfuncNode2,
              tidNode3,
              tleftcurlNode4,
              pparametersNode5,
              trightcurlNode6,
              tleftsquareNode7,
              pstatementsNode8,
              trightsquareNode9
        );
        nodeList.Add(phelperdeclareNode1);
        return nodeList;
    }
    ArrayList New54()
    {
        ArrayList nodeList = new ArrayList();
        ArrayList nodeArrayList7 = (ArrayList) Pop();
        ArrayList nodeArrayList6 = (ArrayList) Pop();
        ArrayList nodeArrayList5 = (ArrayList) Pop();
        ArrayList nodeArrayList4 = (ArrayList) Pop();
        ArrayList nodeArrayList3 = (ArrayList) Pop();
        ArrayList nodeArrayList2 = (ArrayList) Pop();
        ArrayList nodeArrayList1 = (ArrayList) Pop();
        TMain tmainNode2 = (TMain)nodeArrayList1[0];
        TLeftcurl tleftcurlNode3 = (TLeftcurl)nodeArrayList2[0];
        PParameters pparametersNode4 = (PParameters)nodeArrayList3[0];
        TRightcurl trightcurlNode5 = (TRightcurl)nodeArrayList4[0];
        TLeftsquare tleftsquareNode6 = (TLeftsquare)nodeArrayList5[0];
        PStatements pstatementsNode7 = (PStatements)nodeArrayList6[0];
        TRightsquare trightsquareNode8 = (TRightsquare)nodeArrayList7[0];
        AMainDeclare pmaindeclareNode1 = new AMainDeclare (
              tmainNode2,
              tleftcurlNode3,
              pparametersNode4,
              trightcurlNode5,
              tleftsquareNode6,
              pstatementsNode7,
              trightsquareNode8
        );
        nodeList.Add(pmaindeclareNode1);
        return nodeList;
    }

    private static int[][][] actionTable = {
      new int[][] {
        new int[] {-1, 1, 2},
        new int[] {11, 0, 1},
        new int[] {12, 0, 2},
        new int[] {13, 0, 3},
        new int[] {14, 0, 4},
        new int[] {15, 0, 5},
        new int[] {26, 0, 6},
        new int[] {27, 0, 7},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
      },
      new int[][] {
        new int[] {-1, 1, 11},
      },
      new int[][] {
        new int[] {-1, 1, 12},
      },
      new int[][] {
        new int[] {-1, 1, 13},
      },
      new int[][] {
        new int[] {-1, 3, 4},
        new int[] {11, 0, 1},
        new int[] {12, 0, 2},
        new int[] {13, 0, 3},
        new int[] {14, 0, 4},
      },
      new int[][] {
        new int[] {-1, 3, 5},
        new int[] {16, 0, 22},
      },
      new int[][] {
        new int[] {-1, 3, 6},
        new int[] {16, 0, 24},
      },
      new int[][] {
        new int[] {-1, 3, 7},
        new int[] {30, 0, 25},
      },
      new int[][] {
        new int[] {-1, 3, 8},
        new int[] {16, 0, 26},
      },
      new int[][] {
        new int[] {-1, 3, 9},
        new int[] {1, 0, 27},
        new int[] {6, 0, 28},
      },
      new int[][] {
        new int[] {-1, 3, 10},
        new int[] {35, 2, -1},
      },
      new int[][] {
        new int[] {-1, 1, 0},
      },
      new int[][] {
        new int[] {-1, 1, 2},
        new int[] {11, 0, 1},
        new int[] {12, 0, 2},
        new int[] {13, 0, 3},
        new int[] {14, 0, 4},
        new int[] {15, 0, 5},
        new int[] {26, 0, 6},
        new int[] {27, 0, 7},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
      },
      new int[][] {
        new int[] {-1, 1, 3},
      },
      new int[][] {
        new int[] {-1, 3, 14},
        new int[] {30, 0, 30},
      },
      new int[][] {
        new int[] {-1, 1, 4},
      },
      new int[][] {
        new int[] {-1, 1, 5},
      },
      new int[][] {
        new int[] {-1, 1, 6},
      },
      new int[][] {
        new int[] {-1, 1, 7},
      },
      new int[][] {
        new int[] {-1, 1, 8},
      },
      new int[][] {
        new int[] {-1, 1, 9},
      },
      new int[][] {
        new int[] {-1, 1, 14},
      },
      new int[][] {
        new int[] {-1, 3, 22},
        new int[] {3, 0, 31},
        new int[] {6, 0, 32},
        new int[] {30, 0, 33},
        new int[] {31, 0, 34},
        new int[] {32, 0, 35},
        new int[] {33, 0, 36},
        new int[] {34, 0, 37},
      },
      new int[][] {
        new int[] {-1, 3, 23},
        new int[] {18, 0, 45},
      },
      new int[][] {
        new int[] {-1, 3, 24},
        new int[] {3, 0, 31},
        new int[] {6, 0, 32},
        new int[] {30, 0, 33},
        new int[] {31, 0, 34},
        new int[] {32, 0, 35},
        new int[] {33, 0, 36},
        new int[] {34, 0, 37},
      },
      new int[][] {
        new int[] {-1, 3, 25},
        new int[] {16, 0, 48},
      },
      new int[][] {
        new int[] {-1, 1, 20},
        new int[] {3, 0, 31},
        new int[] {6, 0, 32},
        new int[] {30, 0, 33},
        new int[] {31, 0, 34},
        new int[] {32, 0, 35},
        new int[] {33, 0, 36},
        new int[] {34, 0, 37},
      },
      new int[][] {
        new int[] {-1, 3, 27},
        new int[] {3, 0, 31},
        new int[] {6, 0, 32},
        new int[] {30, 0, 33},
        new int[] {31, 0, 34},
        new int[] {32, 0, 35},
        new int[] {33, 0, 36},
        new int[] {34, 0, 37},
      },
      new int[][] {
        new int[] {-1, 1, 20},
        new int[] {3, 0, 31},
        new int[] {6, 0, 32},
        new int[] {30, 0, 33},
        new int[] {31, 0, 34},
        new int[] {32, 0, 35},
        new int[] {33, 0, 36},
        new int[] {34, 0, 37},
      },
      new int[][] {
        new int[] {-1, 1, 1},
      },
      new int[][] {
        new int[] {-1, 3, 30},
        new int[] {0, 0, 55},
      },
      new int[][] {
        new int[] {-1, 3, 31},
        new int[] {30, 0, 33},
        new int[] {31, 0, 34},
        new int[] {32, 0, 35},
        new int[] {33, 0, 36},
        new int[] {34, 0, 37},
      },
      new int[][] {
        new int[] {-1, 3, 32},
        new int[] {3, 0, 31},
        new int[] {6, 0, 32},
        new int[] {30, 0, 33},
        new int[] {31, 0, 34},
        new int[] {32, 0, 35},
        new int[] {33, 0, 36},
        new int[] {34, 0, 37},
      },
      new int[][] {
        new int[] {-1, 1, 36},
      },
      new int[][] {
        new int[] {-1, 1, 32},
      },
      new int[][] {
        new int[] {-1, 1, 33},
      },
      new int[][] {
        new int[] {-1, 1, 34},
      },
      new int[][] {
        new int[] {-1, 1, 35},
      },
      new int[][] {
        new int[] {-1, 3, 38},
        new int[] {2, 0, 58},
        new int[] {3, 0, 59},
        new int[] {21, 0, 60},
        new int[] {22, 0, 61},
        new int[] {23, 0, 62},
        new int[] {24, 0, 63},
        new int[] {25, 0, 64},
      },
      new int[][] {
        new int[] {-1, 1, 24},
        new int[] {4, 0, 66},
        new int[] {5, 0, 67},
      },
      new int[][] {
        new int[] {-1, 1, 27},
      },
      new int[][] {
        new int[] {-1, 1, 29},
      },
      new int[][] {
        new int[] {-1, 1, 31},
      },
      new int[][] {
        new int[] {-1, 3, 43},
        new int[] {8, 0, 68},
        new int[] {9, 0, 69},
        new int[] {10, 0, 70},
        new int[] {17, 0, 71},
      },
      new int[][] {
        new int[] {-1, 1, 42},
      },
      new int[][] {
        new int[] {-1, 1, 2},
        new int[] {11, 0, 1},
        new int[] {12, 0, 2},
        new int[] {13, 0, 3},
        new int[] {14, 0, 4},
        new int[] {15, 0, 5},
        new int[] {26, 0, 6},
        new int[] {27, 0, 7},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 46},
        new int[] {20, 0, 74},
      },
      new int[][] {
        new int[] {-1, 3, 47},
        new int[] {8, 0, 68},
        new int[] {9, 0, 69},
        new int[] {10, 0, 70},
        new int[] {17, 0, 75},
      },
      new int[][] {
        new int[] {-1, 1, 20},
        new int[] {3, 0, 31},
        new int[] {6, 0, 32},
        new int[] {30, 0, 33},
        new int[] {31, 0, 34},
        new int[] {32, 0, 35},
        new int[] {33, 0, 36},
        new int[] {34, 0, 37},
      },
      new int[][] {
        new int[] {-1, 3, 49},
        new int[] {17, 0, 77},
      },
      new int[][] {
        new int[] {-1, 1, 17},
        new int[] {28, 0, 78},
      },
      new int[][] {
        new int[] {-1, 1, 18},
        new int[] {2, 0, 58},
        new int[] {3, 0, 59},
        new int[] {21, 0, 60},
        new int[] {22, 0, 61},
        new int[] {23, 0, 62},
        new int[] {24, 0, 63},
        new int[] {25, 0, 64},
      },
      new int[][] {
        new int[] {-1, 1, 19},
      },
      new int[][] {
        new int[] {-1, 3, 53},
        new int[] {0, 0, 79},
        new int[] {2, 0, 58},
        new int[] {3, 0, 59},
      },
      new int[][] {
        new int[] {-1, 3, 54},
        new int[] {7, 0, 80},
      },
      new int[][] {
        new int[] {-1, 1, 10},
      },
      new int[][] {
        new int[] {-1, 1, 30},
      },
      new int[][] {
        new int[] {-1, 3, 57},
        new int[] {2, 0, 58},
        new int[] {3, 0, 59},
        new int[] {7, 0, 81},
      },
      new int[][] {
        new int[] {-1, 3, 58},
        new int[] {3, 0, 31},
        new int[] {6, 0, 32},
        new int[] {30, 0, 33},
        new int[] {31, 0, 34},
        new int[] {32, 0, 35},
        new int[] {33, 0, 36},
        new int[] {34, 0, 37},
      },
      new int[][] {
        new int[] {-1, 3, 59},
        new int[] {3, 0, 31},
        new int[] {6, 0, 32},
        new int[] {30, 0, 33},
        new int[] {31, 0, 34},
        new int[] {32, 0, 35},
        new int[] {33, 0, 36},
        new int[] {34, 0, 37},
      },
      new int[][] {
        new int[] {-1, 1, 44},
      },
      new int[][] {
        new int[] {-1, 1, 45},
      },
      new int[][] {
        new int[] {-1, 1, 46},
      },
      new int[][] {
        new int[] {-1, 1, 47},
      },
      new int[][] {
        new int[] {-1, 1, 48},
      },
      new int[][] {
        new int[] {-1, 3, 65},
        new int[] {3, 0, 31},
        new int[] {6, 0, 32},
        new int[] {30, 0, 33},
        new int[] {31, 0, 34},
        new int[] {32, 0, 35},
        new int[] {33, 0, 36},
        new int[] {34, 0, 37},
      },
      new int[][] {
        new int[] {-1, 3, 66},
        new int[] {3, 0, 31},
        new int[] {6, 0, 32},
        new int[] {30, 0, 33},
        new int[] {31, 0, 34},
        new int[] {32, 0, 35},
        new int[] {33, 0, 36},
        new int[] {34, 0, 37},
      },
      new int[][] {
        new int[] {-1, 3, 67},
        new int[] {3, 0, 31},
        new int[] {6, 0, 32},
        new int[] {30, 0, 33},
        new int[] {31, 0, 34},
        new int[] {32, 0, 35},
        new int[] {33, 0, 36},
        new int[] {34, 0, 37},
      },
      new int[][] {
        new int[] {-1, 1, 49},
      },
      new int[][] {
        new int[] {-1, 1, 50},
      },
      new int[][] {
        new int[] {-1, 1, 51},
      },
      new int[][] {
        new int[] {-1, 1, 38},
      },
      new int[][] {
        new int[] {-1, 3, 72},
        new int[] {3, 0, 31},
        new int[] {6, 0, 32},
        new int[] {30, 0, 33},
        new int[] {31, 0, 34},
        new int[] {32, 0, 35},
        new int[] {33, 0, 36},
        new int[] {34, 0, 37},
      },
      new int[][] {
        new int[] {-1, 3, 73},
        new int[] {19, 0, 88},
      },
      new int[][] {
        new int[] {-1, 3, 74},
        new int[] {18, 0, 89},
      },
      new int[][] {
        new int[] {-1, 3, 75},
        new int[] {18, 0, 91},
      },
      new int[][] {
        new int[] {-1, 3, 76},
        new int[] {17, 0, 92},
      },
      new int[][] {
        new int[] {-1, 3, 77},
        new int[] {18, 0, 93},
      },
      new int[][] {
        new int[] {-1, 1, 20},
        new int[] {3, 0, 31},
        new int[] {6, 0, 32},
        new int[] {30, 0, 33},
        new int[] {31, 0, 34},
        new int[] {32, 0, 35},
        new int[] {33, 0, 36},
        new int[] {34, 0, 37},
      },
      new int[][] {
        new int[] {-1, 1, 21},
      },
      new int[][] {
        new int[] {-1, 3, 80},
        new int[] {0, 0, 95},
      },
      new int[][] {
        new int[] {-1, 1, 28},
      },
      new int[][] {
        new int[] {-1, 1, 22},
        new int[] {4, 0, 66},
        new int[] {5, 0, 67},
      },
      new int[][] {
        new int[] {-1, 1, 23},
        new int[] {4, 0, 66},
        new int[] {5, 0, 67},
      },
      new int[][] {
        new int[] {-1, 1, 43},
        new int[] {2, 0, 58},
        new int[] {3, 0, 59},
      },
      new int[][] {
        new int[] {-1, 1, 25},
      },
      new int[][] {
        new int[] {-1, 1, 26},
      },
      new int[][] {
        new int[] {-1, 1, 41},
      },
      new int[][] {
        new int[] {-1, 1, 39},
      },
      new int[][] {
        new int[] {-1, 1, 2},
        new int[] {11, 0, 1},
        new int[] {12, 0, 2},
        new int[] {13, 0, 3},
        new int[] {14, 0, 4},
        new int[] {15, 0, 5},
        new int[] {26, 0, 6},
        new int[] {27, 0, 7},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
      },
      new int[][] {
        new int[] {-1, 1, 37},
      },
      new int[][] {
        new int[] {-1, 1, 2},
        new int[] {11, 0, 1},
        new int[] {12, 0, 2},
        new int[] {13, 0, 3},
        new int[] {14, 0, 4},
        new int[] {15, 0, 5},
        new int[] {26, 0, 6},
        new int[] {27, 0, 7},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 92},
        new int[] {18, 0, 98},
      },
      new int[][] {
        new int[] {-1, 1, 2},
        new int[] {11, 0, 1},
        new int[] {12, 0, 2},
        new int[] {13, 0, 3},
        new int[] {14, 0, 4},
        new int[] {15, 0, 5},
        new int[] {26, 0, 6},
        new int[] {27, 0, 7},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
      },
      new int[][] {
        new int[] {-1, 1, 16},
      },
      new int[][] {
        new int[] {-1, 1, 15},
      },
      new int[][] {
        new int[] {-1, 3, 96},
        new int[] {19, 0, 100},
      },
      new int[][] {
        new int[] {-1, 3, 97},
        new int[] {19, 0, 101},
      },
      new int[][] {
        new int[] {-1, 1, 2},
        new int[] {11, 0, 1},
        new int[] {12, 0, 2},
        new int[] {13, 0, 3},
        new int[] {14, 0, 4},
        new int[] {15, 0, 5},
        new int[] {26, 0, 6},
        new int[] {27, 0, 7},
        new int[] {29, 0, 8},
        new int[] {30, 0, 9},
      },
      new int[][] {
        new int[] {-1, 3, 99},
        new int[] {19, 0, 103},
      },
      new int[][] {
        new int[] {-1, 1, 40},
      },
      new int[][] {
        new int[] {-1, 1, 52},
      },
      new int[][] {
        new int[] {-1, 3, 102},
        new int[] {19, 0, 104},
      },
      new int[][] {
        new int[] {-1, 1, 54},
      },
      new int[][] {
        new int[] {-1, 1, 53},
      },
    };

    private static int[][][] gotoTable  = {
      new int[][] {
        new int[] {-1, 10},
      },
      new int[][] {
        new int[] {-1, 11},
        new int[] {12, 29},
        new int[] {45, 73},
        new int[] {89, 96},
        new int[] {91, 97},
        new int[] {93, 99},
        new int[] {98, 102},
      },
      new int[][] {
        new int[] {-1, 12},
      },
      new int[][] {
        new int[] {-1, 13},
      },
      new int[][] {
        new int[] {-1, 14},
        new int[] {4, 21},
      },
      new int[][] {
        new int[] {-1, 15},
      },
      new int[][] {
        new int[] {-1, 49},
        new int[] {28, 54},
        new int[] {48, 76},
        new int[] {78, 94},
      },
      new int[][] {
        new int[] {-1, 50},
      },
      new int[][] {
        new int[] {-1, 16},
      },
      new int[][] {
        new int[] {-1, 51},
        new int[] {22, 38},
        new int[] {24, 38},
        new int[] {27, 53},
        new int[] {32, 57},
        new int[] {65, 84},
        new int[] {72, 38},
      },
      new int[][] {
        new int[] {-1, 39},
        new int[] {58, 82},
        new int[] {59, 83},
      },
      new int[][] {
        new int[] {-1, 40},
        new int[] {66, 85},
        new int[] {67, 86},
      },
      new int[][] {
        new int[] {-1, 41},
      },
      new int[][] {
        new int[] {-1, 42},
        new int[] {31, 56},
      },
      new int[][] {
        new int[] {-1, 17},
      },
      new int[][] {
        new int[] {-1, 23},
      },
      new int[][] {
        new int[] {-1, 46},
      },
      new int[][] {
        new int[] {-1, 90},
      },
      new int[][] {
        new int[] {-1, 43},
        new int[] {24, 47},
      },
      new int[][] {
        new int[] {-1, 52},
        new int[] {22, 44},
        new int[] {24, 44},
        new int[] {72, 87},
      },
      new int[][] {
        new int[] {-1, 65},
      },
      new int[][] {
        new int[] {-1, 72},
      },
      new int[][] {
        new int[] {-1, 18},
      },
      new int[][] {
        new int[] {-1, 19},
      },
      new int[][] {
        new int[] {-1, 20},
      },
    };

    private static String[] errorMessages = {
      "expecting: 'int', 'str', 'float', 'const', 'if', 'gyro', 'helper', 'nucleus', id, EOF",
      "expecting: id",
      "expecting: 'int', 'str', 'float', 'const'",
      "expecting: '{'",
      "expecting: 'is', '('",
      "expecting: EOF",
      "expecting: 'int', 'str', 'float', 'const', 'if', ']', 'gyro', 'helper', 'nucleus', id, EOF",
      "expecting: '-', '(', id, integer, float, engin, string",
      "expecting: '['",
      "expecting: '-', '(', '}', ';', id, integer, float, engin, string",
      "expecting: '-', '(', ')', ';', id, integer, float, engin, string",
      "expecting: ']', EOF",
      "expecting: '...'",
      "expecting: id, integer, float, engin, string",
      "expecting: '...', '+', '-', '*', '/', ')', 'AND', 'OR', 'NOT', '}', '>', '>=', '=', '<', '<=', ';'",
      "expecting: '+', '-', '>', '>=', '=', '<', '<='",
      "expecting: 'AND', 'OR', 'NOT', '}'",
      "expecting: 'int', 'str', 'float', 'const', 'if', ']', 'gyro', 'helper', 'nucleus', id",
      "expecting: 'then'",
      "expecting: '}'",
      "expecting: ')', '}', ';'",
      "expecting: '+', '-', ')', '}', '>', '>=', '=', '<', '<=', ';'",
      "expecting: '...', '+', '-'",
      "expecting: ')'",
      "expecting: '+', '-', ')'",
      "expecting: ']'",
      "expecting: '-', '(', ')', '}', ';', id, integer, float, engin, string",
      "expecting: '+', '-', ')', 'AND', 'OR', 'NOT', '}', ';'",
      "expecting: ')', '}'",
    };

    private static int[] errors = {
      0, 1, 1, 1, 2, 3, 3, 1, 3, 4, 5, 5, 6, 6, 1, 6, 
      6, 6, 6, 6, 6, 1, 7, 8, 7, 3, 9, 7, 10, 11, 12, 13, 
      7, 14, 14, 14, 14, 14, 15, 14, 14, 14, 14, 16, 16, 17, 18, 16, 
      9, 19, 20, 21, 20, 22, 23, 6, 14, 24, 7, 7, 7, 7, 7, 7, 
      7, 7, 7, 7, 7, 7, 7, 8, 7, 25, 8, 8, 19, 8, 26, 6, 
      12, 14, 14, 14, 27, 14, 14, 16, 18, 17, 6, 17, 8, 17, 28, 6, 
      25, 25, 17, 25, 6, 6, 25, 6, 6, 
    };
}
}
