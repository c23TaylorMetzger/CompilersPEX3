$ template make_build()
$
$ output 'test_parser.py'
# This file was generated by SableCC (http://www.sablecc.org/).

import sys
import parser

class TreePrinter(parser.ReversedDepthFirstAdapter):
    def __init__(self):
        self.indent = str() 
        self.output = str()
        self.indentchar = parser.Stack()
        self.last = False

    def outStart(self, node):
        print "\n" + self.output[3:] + "\n" 

    def defaultIn(self, node):
        if (self.last):
            self.indentchar.push('`')
        else:
            self.indentchar.push('|')

        self.indent = self.indent + "   "
        self.last = True

    def defaultOut(self, node):
        self.indent = self.indent[0 : len(self.indent) - 3]
        self.indent = self.indent[0 : len(self.indent) - 1] + self.indentchar.peek()
        self.indentchar.pop()
        self.output = self.indent + "- " + node.__class__.__name__ + "\n" + self.output
        self.indent = self.indent[0 : len(self.indent) - 1] + "|"

    def defaultCase(self, node):
        if (self.last):
            self.indent = self.indent[0 : len(self.indent) - 1] + "`"

        self.output = self.indent + "- " + node.getText() + "\n" + self.output
 
        self.indent = self.indent[0 : len(self.indent) - 1] + "|"

        self.last = False

    def caseEOF(self, node):
        self.last = False

def main():
    if len(sys.argv) < 2:
        print "usage:"
        print "    python test_parser.py <filename>"
    else:
        f = file(sys.argv[1], "r")
        _lexer = parser.Lexer(f)
        _parser = parser.Parser(_lexer)
        start = _parser.parse()

        printer = TreePrinter()
        start.apply(printer)
        f.close() # close the stream

if __name__ == '__main__':
    main()         
$ end output

$ output 'test_lexer.py'
# This file was generated by SableCC (http://www.sablecc.org/).

import sys
import parser

def main():
    if len(sys.argv) != 2:
        print "usage:"
        print "    python testlexer.py <filename>"
    else:
        f = file(sys.argv[1], "r")
        _lexer = parser.Lexer(f)

        while 1:
            token = _lexer.next()
            print "Read token '" + token.__class__.__name__ + "'" + ", text = [" + token.getText() + "] at [" + str(token.getLine()) + "," + str(token.getPos()) + "]"
            if isinstance(token, parser.EOF): 
                break
        f.close()

if __name__ == '__main__':
    main()            
$ end output

$ end template