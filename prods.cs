/* This file was generated by SableCC (http://www.sablecc.org/). */

using System;
using System.Collections;
using System.Text;

using  CS426.analysis;

namespace CS426.node {

public abstract class PProgram : Node
{
}

public abstract class PStatements : Node
{
}

public abstract class PStatement : Node
{
}

public abstract class PDeclaration : Node
{
}

public abstract class PType : Node
{
}

public abstract class PFunctionCall : Node
{
}

public abstract class PParameters : Node
{
}

public abstract class PParameter : Node
{
}

public abstract class PAssignment : Node
{
}

public abstract class PExpression : Node
{
}

public abstract class PExpression2 : Node
{
}

public abstract class PExpression3 : Node
{
}

public abstract class PExpression4 : Node
{
}

public abstract class POperand : Node
{
}

public abstract class PBranch : Node
{
}

public abstract class PIfCurls : Node
{
}

public abstract class PIfSquares : Node
{
}

public abstract class PThenSquares : Node
{
}

public abstract class PLogical : Node
{
}

public abstract class PComparison : Node
{
}

public abstract class POperator : Node
{
}

public abstract class PBoolean : Node
{
}

public abstract class PIterate : Node
{
}

public abstract class PHelperDeclare : Node
{
}

public abstract class PMainDeclare : Node
{
}


public sealed class AProgram : PProgram
{
    private PStatements _statements_;

    public AProgram ()
    {
    }

    public AProgram (
            PStatements _statements_
    )
    {
        SetStatements (_statements_);
    }

    public override Object Clone()
    {
        return new AProgram (
            (PStatements)CloneNode (_statements_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAProgram(this);
    }

    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_statements_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
    }

}
public sealed class AMultipleStatements : PStatements
{
    private PStatement _statement_;
    private PStatements _statements_;

    public AMultipleStatements ()
    {
    }

    public AMultipleStatements (
            PStatement _statement_,
            PStatements _statements_
    )
    {
        SetStatement (_statement_);
        SetStatements (_statements_);
    }

    public override Object Clone()
    {
        return new AMultipleStatements (
            (PStatement)CloneNode (_statement_),
            (PStatements)CloneNode (_statements_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleStatements(this);
    }

    public PStatement GetStatement ()
    {
        return _statement_;
    }

    public void SetStatement (PStatement node)
    {
        if(_statement_ != null)
        {
            _statement_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statement_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_statement_)
            + ToString (_statements_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _statement_ == child )
        {
            _statement_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _statement_ == oldChild )
        {
            SetStatement ((PStatement) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
    }

}
public sealed class ASingleStatements : PStatements
{


    public ASingleStatements (
    )
    {
    }

    public override Object Clone()
    {
        return new ASingleStatements (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleStatements(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class ADeclarationStatementStatement : PStatement
{
    private PDeclaration _declaration_;

    public ADeclarationStatementStatement ()
    {
    }

    public ADeclarationStatementStatement (
            PDeclaration _declaration_
    )
    {
        SetDeclaration (_declaration_);
    }

    public override Object Clone()
    {
        return new ADeclarationStatementStatement (
            (PDeclaration)CloneNode (_declaration_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclarationStatementStatement(this);
    }

    public PDeclaration GetDeclaration ()
    {
        return _declaration_;
    }

    public void SetDeclaration (PDeclaration node)
    {
        if(_declaration_ != null)
        {
            _declaration_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _declaration_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_declaration_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _declaration_ == child )
        {
            _declaration_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _declaration_ == oldChild )
        {
            SetDeclaration ((PDeclaration) newChild);
            return;
        }
    }

}
public sealed class AFunctionCallStatementStatement : PStatement
{
    private PFunctionCall _function_call_;

    public AFunctionCallStatementStatement ()
    {
    }

    public AFunctionCallStatementStatement (
            PFunctionCall _function_call_
    )
    {
        SetFunctionCall (_function_call_);
    }

    public override Object Clone()
    {
        return new AFunctionCallStatementStatement (
            (PFunctionCall)CloneNode (_function_call_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionCallStatementStatement(this);
    }

    public PFunctionCall GetFunctionCall ()
    {
        return _function_call_;
    }

    public void SetFunctionCall (PFunctionCall node)
    {
        if(_function_call_ != null)
        {
            _function_call_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _function_call_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_function_call_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _function_call_ == child )
        {
            _function_call_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _function_call_ == oldChild )
        {
            SetFunctionCall ((PFunctionCall) newChild);
            return;
        }
    }

}
public sealed class AAssignStatementStatement : PStatement
{
    private PAssignment _assignment_;

    public AAssignStatementStatement ()
    {
    }

    public AAssignStatementStatement (
            PAssignment _assignment_
    )
    {
        SetAssignment (_assignment_);
    }

    public override Object Clone()
    {
        return new AAssignStatementStatement (
            (PAssignment)CloneNode (_assignment_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignStatementStatement(this);
    }

    public PAssignment GetAssignment ()
    {
        return _assignment_;
    }

    public void SetAssignment (PAssignment node)
    {
        if(_assignment_ != null)
        {
            _assignment_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assignment_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_assignment_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _assignment_ == child )
        {
            _assignment_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _assignment_ == oldChild )
        {
            SetAssignment ((PAssignment) newChild);
            return;
        }
    }

}
public sealed class ABranchingStatementStatement : PStatement
{
    private PBranch _branch_;

    public ABranchingStatementStatement ()
    {
    }

    public ABranchingStatementStatement (
            PBranch _branch_
    )
    {
        SetBranch (_branch_);
    }

    public override Object Clone()
    {
        return new ABranchingStatementStatement (
            (PBranch)CloneNode (_branch_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABranchingStatementStatement(this);
    }

    public PBranch GetBranch ()
    {
        return _branch_;
    }

    public void SetBranch (PBranch node)
    {
        if(_branch_ != null)
        {
            _branch_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _branch_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_branch_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _branch_ == child )
        {
            _branch_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _branch_ == oldChild )
        {
            SetBranch ((PBranch) newChild);
            return;
        }
    }

}
public sealed class AIterationStatementStatement : PStatement
{
    private PIterate _iterate_;

    public AIterationStatementStatement ()
    {
    }

    public AIterationStatementStatement (
            PIterate _iterate_
    )
    {
        SetIterate (_iterate_);
    }

    public override Object Clone()
    {
        return new AIterationStatementStatement (
            (PIterate)CloneNode (_iterate_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIterationStatementStatement(this);
    }

    public PIterate GetIterate ()
    {
        return _iterate_;
    }

    public void SetIterate (PIterate node)
    {
        if(_iterate_ != null)
        {
            _iterate_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _iterate_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_iterate_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _iterate_ == child )
        {
            _iterate_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _iterate_ == oldChild )
        {
            SetIterate ((PIterate) newChild);
            return;
        }
    }

}
public sealed class AHelperFunctionDeclareStatement : PStatement
{
    private PHelperDeclare _helper_declare_;

    public AHelperFunctionDeclareStatement ()
    {
    }

    public AHelperFunctionDeclareStatement (
            PHelperDeclare _helper_declare_
    )
    {
        SetHelperDeclare (_helper_declare_);
    }

    public override Object Clone()
    {
        return new AHelperFunctionDeclareStatement (
            (PHelperDeclare)CloneNode (_helper_declare_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAHelperFunctionDeclareStatement(this);
    }

    public PHelperDeclare GetHelperDeclare ()
    {
        return _helper_declare_;
    }

    public void SetHelperDeclare (PHelperDeclare node)
    {
        if(_helper_declare_ != null)
        {
            _helper_declare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _helper_declare_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_helper_declare_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _helper_declare_ == child )
        {
            _helper_declare_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _helper_declare_ == oldChild )
        {
            SetHelperDeclare ((PHelperDeclare) newChild);
            return;
        }
    }

}
public sealed class AMainFunctionDeclareStatement : PStatement
{
    private PMainDeclare _main_declare_;

    public AMainFunctionDeclareStatement ()
    {
    }

    public AMainFunctionDeclareStatement (
            PMainDeclare _main_declare_
    )
    {
        SetMainDeclare (_main_declare_);
    }

    public override Object Clone()
    {
        return new AMainFunctionDeclareStatement (
            (PMainDeclare)CloneNode (_main_declare_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMainFunctionDeclareStatement(this);
    }

    public PMainDeclare GetMainDeclare ()
    {
        return _main_declare_;
    }

    public void SetMainDeclare (PMainDeclare node)
    {
        if(_main_declare_ != null)
        {
            _main_declare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_declare_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_main_declare_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _main_declare_ == child )
        {
            _main_declare_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _main_declare_ == oldChild )
        {
            SetMainDeclare ((PMainDeclare) newChild);
            return;
        }
    }

}
public sealed class ADeclaration : PDeclaration
{
    private PType _type_;
    private TId _id_;
    private TEol _eol_;

    public ADeclaration ()
    {
    }

    public ADeclaration (
            PType _type_,
            TId _id_,
            TEol _eol_
    )
    {
        SetType (_type_);
        SetId (_id_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new ADeclaration (
            (PType)CloneNode (_type_),
            (TId)CloneNode (_id_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADeclaration(this);
    }

    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_type_)
            + ToString (_id_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AIntType : PType
{
    private TIntdec _intdec_;

    public AIntType ()
    {
    }

    public AIntType (
            TIntdec _intdec_
    )
    {
        SetIntdec (_intdec_);
    }

    public override Object Clone()
    {
        return new AIntType (
            (TIntdec)CloneNode (_intdec_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntType(this);
    }

    public TIntdec GetIntdec ()
    {
        return _intdec_;
    }

    public void SetIntdec (TIntdec node)
    {
        if(_intdec_ != null)
        {
            _intdec_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _intdec_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_intdec_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _intdec_ == child )
        {
            _intdec_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _intdec_ == oldChild )
        {
            SetIntdec ((TIntdec) newChild);
            return;
        }
    }

}
public sealed class AStrType : PType
{
    private TStrdec _strdec_;

    public AStrType ()
    {
    }

    public AStrType (
            TStrdec _strdec_
    )
    {
        SetStrdec (_strdec_);
    }

    public override Object Clone()
    {
        return new AStrType (
            (TStrdec)CloneNode (_strdec_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStrType(this);
    }

    public TStrdec GetStrdec ()
    {
        return _strdec_;
    }

    public void SetStrdec (TStrdec node)
    {
        if(_strdec_ != null)
        {
            _strdec_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _strdec_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_strdec_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _strdec_ == child )
        {
            _strdec_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _strdec_ == oldChild )
        {
            SetStrdec ((TStrdec) newChild);
            return;
        }
    }

}
public sealed class AFloatType : PType
{
    private TFloatdec _floatdec_;

    public AFloatType ()
    {
    }

    public AFloatType (
            TFloatdec _floatdec_
    )
    {
        SetFloatdec (_floatdec_);
    }

    public override Object Clone()
    {
        return new AFloatType (
            (TFloatdec)CloneNode (_floatdec_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatType(this);
    }

    public TFloatdec GetFloatdec ()
    {
        return _floatdec_;
    }

    public void SetFloatdec (TFloatdec node)
    {
        if(_floatdec_ != null)
        {
            _floatdec_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _floatdec_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_floatdec_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _floatdec_ == child )
        {
            _floatdec_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _floatdec_ == oldChild )
        {
            SetFloatdec ((TFloatdec) newChild);
            return;
        }
    }

}
public sealed class AConstType : PType
{
    private TConstdec _constdec_;
    private PType _type_;

    public AConstType ()
    {
    }

    public AConstType (
            TConstdec _constdec_,
            PType _type_
    )
    {
        SetConstdec (_constdec_);
        SetType (_type_);
    }

    public override Object Clone()
    {
        return new AConstType (
            (TConstdec)CloneNode (_constdec_),
            (PType)CloneNode (_type_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAConstType(this);
    }

    public TConstdec GetConstdec ()
    {
        return _constdec_;
    }

    public void SetConstdec (TConstdec node)
    {
        if(_constdec_ != null)
        {
            _constdec_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _constdec_ = node;
    }
    public PType GetType ()
    {
        return _type_;
    }

    public void SetType (PType node)
    {
        if(_type_ != null)
        {
            _type_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _type_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_constdec_)
            + ToString (_type_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _constdec_ == child )
        {
            _constdec_ = null;
            return;
        }
        if ( _type_ == child )
        {
            _type_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _constdec_ == oldChild )
        {
            SetConstdec ((TConstdec) newChild);
            return;
        }
        if ( _type_ == oldChild )
        {
            SetType ((PType) newChild);
            return;
        }
    }

}
public sealed class AFunctionCall : PFunctionCall
{
    private TId _id_;
    private TLeftparent _leftparent_;
    private PParameters _parameters_;
    private TRightparent _rightparent_;
    private TEol _eol_;

    public AFunctionCall ()
    {
    }

    public AFunctionCall (
            TId _id_,
            TLeftparent _leftparent_,
            PParameters _parameters_,
            TRightparent _rightparent_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetLeftparent (_leftparent_);
        SetParameters (_parameters_);
        SetRightparent (_rightparent_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AFunctionCall (
            (TId)CloneNode (_id_),
            (TLeftparent)CloneNode (_leftparent_),
            (PParameters)CloneNode (_parameters_),
            (TRightparent)CloneNode (_rightparent_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFunctionCall(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TLeftparent GetLeftparent ()
    {
        return _leftparent_;
    }

    public void SetLeftparent (TLeftparent node)
    {
        if(_leftparent_ != null)
        {
            _leftparent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _leftparent_ = node;
    }
    public PParameters GetParameters ()
    {
        return _parameters_;
    }

    public void SetParameters (PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameters_ = node;
    }
    public TRightparent GetRightparent ()
    {
        return _rightparent_;
    }

    public void SetRightparent (TRightparent node)
    {
        if(_rightparent_ != null)
        {
            _rightparent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rightparent_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_leftparent_)
            + ToString (_parameters_)
            + ToString (_rightparent_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _leftparent_ == child )
        {
            _leftparent_ = null;
            return;
        }
        if ( _parameters_ == child )
        {
            _parameters_ = null;
            return;
        }
        if ( _rightparent_ == child )
        {
            _rightparent_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _leftparent_ == oldChild )
        {
            SetLeftparent ((TLeftparent) newChild);
            return;
        }
        if ( _parameters_ == oldChild )
        {
            SetParameters ((PParameters) newChild);
            return;
        }
        if ( _rightparent_ == oldChild )
        {
            SetRightparent ((TRightparent) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AMultipleParameters : PParameters
{
    private PParameter _parameter_;
    private TParam _param_;
    private PParameters _parameters_;

    public AMultipleParameters ()
    {
    }

    public AMultipleParameters (
            PParameter _parameter_,
            TParam _param_,
            PParameters _parameters_
    )
    {
        SetParameter (_parameter_);
        SetParam (_param_);
        SetParameters (_parameters_);
    }

    public override Object Clone()
    {
        return new AMultipleParameters (
            (PParameter)CloneNode (_parameter_),
            (TParam)CloneNode (_param_),
            (PParameters)CloneNode (_parameters_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultipleParameters(this);
    }

    public PParameter GetParameter ()
    {
        return _parameter_;
    }

    public void SetParameter (PParameter node)
    {
        if(_parameter_ != null)
        {
            _parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameter_ = node;
    }
    public TParam GetParam ()
    {
        return _param_;
    }

    public void SetParam (TParam node)
    {
        if(_param_ != null)
        {
            _param_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _param_ = node;
    }
    public PParameters GetParameters ()
    {
        return _parameters_;
    }

    public void SetParameters (PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameters_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_parameter_)
            + ToString (_param_)
            + ToString (_parameters_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parameter_ == child )
        {
            _parameter_ = null;
            return;
        }
        if ( _param_ == child )
        {
            _param_ = null;
            return;
        }
        if ( _parameters_ == child )
        {
            _parameters_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _parameter_ == oldChild )
        {
            SetParameter ((PParameter) newChild);
            return;
        }
        if ( _param_ == oldChild )
        {
            SetParam ((TParam) newChild);
            return;
        }
        if ( _parameters_ == oldChild )
        {
            SetParameters ((PParameters) newChild);
            return;
        }
    }

}
public sealed class ASingleParameters : PParameters
{
    private PParameter _parameter_;

    public ASingleParameters ()
    {
    }

    public ASingleParameters (
            PParameter _parameter_
    )
    {
        SetParameter (_parameter_);
    }

    public override Object Clone()
    {
        return new ASingleParameters (
            (PParameter)CloneNode (_parameter_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleParameters(this);
    }

    public PParameter GetParameter ()
    {
        return _parameter_;
    }

    public void SetParameter (PParameter node)
    {
        if(_parameter_ != null)
        {
            _parameter_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameter_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_parameter_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _parameter_ == child )
        {
            _parameter_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _parameter_ == oldChild )
        {
            SetParameter ((PParameter) newChild);
            return;
        }
    }

}
public sealed class AMathParameter : PParameter
{
    private PExpression _expression_;

    public AMathParameter ()
    {
    }

    public AMathParameter (
            PExpression _expression_
    )
    {
        SetExpression (_expression_);
    }

    public override Object Clone()
    {
        return new AMathParameter (
            (PExpression)CloneNode (_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMathParameter(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class ALogicParameter : PParameter
{
    private PComparison _comparison_;

    public ALogicParameter ()
    {
    }

    public ALogicParameter (
            PComparison _comparison_
    )
    {
        SetComparison (_comparison_);
    }

    public override Object Clone()
    {
        return new ALogicParameter (
            (PComparison)CloneNode (_comparison_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALogicParameter(this);
    }

    public PComparison GetComparison ()
    {
        return _comparison_;
    }

    public void SetComparison (PComparison node)
    {
        if(_comparison_ != null)
        {
            _comparison_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comparison_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comparison_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comparison_ == child )
        {
            _comparison_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comparison_ == oldChild )
        {
            SetComparison ((PComparison) newChild);
            return;
        }
    }

}
public sealed class AEmptyParameter : PParameter
{


    public AEmptyParameter (
    )
    {
    }

    public override Object Clone()
    {
        return new AEmptyParameter (
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEmptyParameter(this);
    }


    public override string ToString()
    {
        return ""
        ;
    }

    internal override void RemoveChild(Node child)
    {
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
    }

}
public sealed class AAssignment : PAssignment
{
    private TId _id_;
    private TAssign _assign_;
    private PExpression _expression_;
    private TEol _eol_;

    public AAssignment ()
    {
    }

    public AAssignment (
            TId _id_,
            TAssign _assign_,
            PExpression _expression_,
            TEol _eol_
    )
    {
        SetId (_id_);
        SetAssign (_assign_);
        SetExpression (_expression_);
        SetEol (_eol_);
    }

    public override Object Clone()
    {
        return new AAssignment (
            (TId)CloneNode (_id_),
            (TAssign)CloneNode (_assign_),
            (PExpression)CloneNode (_expression_),
            (TEol)CloneNode (_eol_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAssignment(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TAssign GetAssign ()
    {
        return _assign_;
    }

    public void SetAssign (TAssign node)
    {
        if(_assign_ != null)
        {
            _assign_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _assign_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TEol GetEol ()
    {
        return _eol_;
    }

    public void SetEol (TEol node)
    {
        if(_eol_ != null)
        {
            _eol_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eol_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
            + ToString (_assign_)
            + ToString (_expression_)
            + ToString (_eol_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _assign_ == child )
        {
            _assign_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _eol_ == child )
        {
            _eol_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _assign_ == oldChild )
        {
            SetAssign ((TAssign) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _eol_ == oldChild )
        {
            SetEol ((TEol) newChild);
            return;
        }
    }

}
public sealed class AAddExpression : PExpression
{
    private PExpression _expression_;
    private TPlus _plus_;
    private PExpression2 _expression2_;

    public AAddExpression ()
    {
    }

    public AAddExpression (
            PExpression _expression_,
            TPlus _plus_,
            PExpression2 _expression2_
    )
    {
        SetExpression (_expression_);
        SetPlus (_plus_);
        SetExpression2 (_expression2_);
    }

    public override Object Clone()
    {
        return new AAddExpression (
            (PExpression)CloneNode (_expression_),
            (TPlus)CloneNode (_plus_),
            (PExpression2)CloneNode (_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAddExpression(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TPlus GetPlus ()
    {
        return _plus_;
    }

    public void SetPlus (TPlus node)
    {
        if(_plus_ != null)
        {
            _plus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _plus_ = node;
    }
    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
            + ToString (_plus_)
            + ToString (_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _plus_ == child )
        {
            _plus_ = null;
            return;
        }
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _plus_ == oldChild )
        {
            SetPlus ((TPlus) newChild);
            return;
        }
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class ASubtractExpression : PExpression
{
    private PExpression _expression_;
    private TMinus _minus_;
    private PExpression2 _expression2_;

    public ASubtractExpression ()
    {
    }

    public ASubtractExpression (
            PExpression _expression_,
            TMinus _minus_,
            PExpression2 _expression2_
    )
    {
        SetExpression (_expression_);
        SetMinus (_minus_);
        SetExpression2 (_expression2_);
    }

    public override Object Clone()
    {
        return new ASubtractExpression (
            (PExpression)CloneNode (_expression_),
            (TMinus)CloneNode (_minus_),
            (PExpression2)CloneNode (_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASubtractExpression(this);
    }

    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression_)
            + ToString (_minus_)
            + ToString (_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class APassExpression : PExpression
{
    private PExpression2 _expression2_;

    public APassExpression ()
    {
    }

    public APassExpression (
            PExpression2 _expression2_
    )
    {
        SetExpression2 (_expression2_);
    }

    public override Object Clone()
    {
        return new APassExpression (
            (PExpression2)CloneNode (_expression2_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression(this);
    }

    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression2_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
    }

}
public sealed class AMultiplyExpression2 : PExpression2
{
    private PExpression2 _expression2_;
    private TMult _mult_;
    private PExpression3 _expression3_;

    public AMultiplyExpression2 ()
    {
    }

    public AMultiplyExpression2 (
            PExpression2 _expression2_,
            TMult _mult_,
            PExpression3 _expression3_
    )
    {
        SetExpression2 (_expression2_);
        SetMult (_mult_);
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new AMultiplyExpression2 (
            (PExpression2)CloneNode (_expression2_),
            (TMult)CloneNode (_mult_),
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMultiplyExpression2(this);
    }

    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }
    public TMult GetMult ()
    {
        return _mult_;
    }

    public void SetMult (TMult node)
    {
        if(_mult_ != null)
        {
            _mult_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _mult_ = node;
    }
    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression2_)
            + ToString (_mult_)
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
        if ( _mult_ == child )
        {
            _mult_ = null;
            return;
        }
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
        if ( _mult_ == oldChild )
        {
            SetMult ((TMult) newChild);
            return;
        }
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class ADivideExpression2 : PExpression2
{
    private PExpression2 _expression2_;
    private TDiv _div_;
    private PExpression3 _expression3_;

    public ADivideExpression2 ()
    {
    }

    public ADivideExpression2 (
            PExpression2 _expression2_,
            TDiv _div_,
            PExpression3 _expression3_
    )
    {
        SetExpression2 (_expression2_);
        SetDiv (_div_);
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new ADivideExpression2 (
            (PExpression2)CloneNode (_expression2_),
            (TDiv)CloneNode (_div_),
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseADivideExpression2(this);
    }

    public PExpression2 GetExpression2 ()
    {
        return _expression2_;
    }

    public void SetExpression2 (PExpression2 node)
    {
        if(_expression2_ != null)
        {
            _expression2_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression2_ = node;
    }
    public TDiv GetDiv ()
    {
        return _div_;
    }

    public void SetDiv (TDiv node)
    {
        if(_div_ != null)
        {
            _div_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _div_ = node;
    }
    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression2_)
            + ToString (_div_)
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression2_ == child )
        {
            _expression2_ = null;
            return;
        }
        if ( _div_ == child )
        {
            _div_ = null;
            return;
        }
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression2_ == oldChild )
        {
            SetExpression2 ((PExpression2) newChild);
            return;
        }
        if ( _div_ == oldChild )
        {
            SetDiv ((TDiv) newChild);
            return;
        }
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class APassExpression2 : PExpression2
{
    private PExpression3 _expression3_;

    public APassExpression2 ()
    {
    }

    public APassExpression2 (
            PExpression3 _expression3_
    )
    {
        SetExpression3 (_expression3_);
    }

    public override Object Clone()
    {
        return new APassExpression2 (
            (PExpression3)CloneNode (_expression3_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression2(this);
    }

    public PExpression3 GetExpression3 ()
    {
        return _expression3_;
    }

    public void SetExpression3 (PExpression3 node)
    {
        if(_expression3_ != null)
        {
            _expression3_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression3_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression3_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression3_ == child )
        {
            _expression3_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression3_ == oldChild )
        {
            SetExpression3 ((PExpression3) newChild);
            return;
        }
    }

}
public sealed class AParenthesisExpression3 : PExpression3
{
    private TLeftparent _leftparent_;
    private PExpression _expression_;
    private TRightparent _rightparent_;

    public AParenthesisExpression3 ()
    {
    }

    public AParenthesisExpression3 (
            TLeftparent _leftparent_,
            PExpression _expression_,
            TRightparent _rightparent_
    )
    {
        SetLeftparent (_leftparent_);
        SetExpression (_expression_);
        SetRightparent (_rightparent_);
    }

    public override Object Clone()
    {
        return new AParenthesisExpression3 (
            (TLeftparent)CloneNode (_leftparent_),
            (PExpression)CloneNode (_expression_),
            (TRightparent)CloneNode (_rightparent_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAParenthesisExpression3(this);
    }

    public TLeftparent GetLeftparent ()
    {
        return _leftparent_;
    }

    public void SetLeftparent (TLeftparent node)
    {
        if(_leftparent_ != null)
        {
            _leftparent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _leftparent_ = node;
    }
    public PExpression GetExpression ()
    {
        return _expression_;
    }

    public void SetExpression (PExpression node)
    {
        if(_expression_ != null)
        {
            _expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression_ = node;
    }
    public TRightparent GetRightparent ()
    {
        return _rightparent_;
    }

    public void SetRightparent (TRightparent node)
    {
        if(_rightparent_ != null)
        {
            _rightparent_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rightparent_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_leftparent_)
            + ToString (_expression_)
            + ToString (_rightparent_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _leftparent_ == child )
        {
            _leftparent_ = null;
            return;
        }
        if ( _expression_ == child )
        {
            _expression_ = null;
            return;
        }
        if ( _rightparent_ == child )
        {
            _rightparent_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _leftparent_ == oldChild )
        {
            SetLeftparent ((TLeftparent) newChild);
            return;
        }
        if ( _expression_ == oldChild )
        {
            SetExpression ((PExpression) newChild);
            return;
        }
        if ( _rightparent_ == oldChild )
        {
            SetRightparent ((TRightparent) newChild);
            return;
        }
    }

}
public sealed class APassExpression3 : PExpression3
{
    private PExpression4 _expression4_;

    public APassExpression3 ()
    {
    }

    public APassExpression3 (
            PExpression4 _expression4_
    )
    {
        SetExpression4 (_expression4_);
    }

    public override Object Clone()
    {
        return new APassExpression3 (
            (PExpression4)CloneNode (_expression4_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression3(this);
    }

    public PExpression4 GetExpression4 ()
    {
        return _expression4_;
    }

    public void SetExpression4 (PExpression4 node)
    {
        if(_expression4_ != null)
        {
            _expression4_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _expression4_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_expression4_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _expression4_ == child )
        {
            _expression4_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _expression4_ == oldChild )
        {
            SetExpression4 ((PExpression4) newChild);
            return;
        }
    }

}
public sealed class ANegativeExpression4 : PExpression4
{
    private TMinus _minus_;
    private POperand _operand_;

    public ANegativeExpression4 ()
    {
    }

    public ANegativeExpression4 (
            TMinus _minus_,
            POperand _operand_
    )
    {
        SetMinus (_minus_);
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new ANegativeExpression4 (
            (TMinus)CloneNode (_minus_),
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANegativeExpression4(this);
    }

    public TMinus GetMinus ()
    {
        return _minus_;
    }

    public void SetMinus (TMinus node)
    {
        if(_minus_ != null)
        {
            _minus_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _minus_ = node;
    }
    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_minus_)
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _minus_ == child )
        {
            _minus_ = null;
            return;
        }
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _minus_ == oldChild )
        {
            SetMinus ((TMinus) newChild);
            return;
        }
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class APassExpression4 : PExpression4
{
    private POperand _operand_;

    public APassExpression4 ()
    {
    }

    public APassExpression4 (
            POperand _operand_
    )
    {
        SetOperand (_operand_);
    }

    public override Object Clone()
    {
        return new APassExpression4 (
            (POperand)CloneNode (_operand_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAPassExpression4(this);
    }

    public POperand GetOperand ()
    {
        return _operand_;
    }

    public void SetOperand (POperand node)
    {
        if(_operand_ != null)
        {
            _operand_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operand_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_operand_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _operand_ == child )
        {
            _operand_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _operand_ == oldChild )
        {
            SetOperand ((POperand) newChild);
            return;
        }
    }

}
public sealed class AIntegerOperand : POperand
{
    private TInteger _integer_;

    public AIntegerOperand ()
    {
    }

    public AIntegerOperand (
            TInteger _integer_
    )
    {
        SetInteger (_integer_);
    }

    public override Object Clone()
    {
        return new AIntegerOperand (
            (TInteger)CloneNode (_integer_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIntegerOperand(this);
    }

    public TInteger GetInteger ()
    {
        return _integer_;
    }

    public void SetInteger (TInteger node)
    {
        if(_integer_ != null)
        {
            _integer_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _integer_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_integer_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _integer_ == child )
        {
            _integer_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _integer_ == oldChild )
        {
            SetInteger ((TInteger) newChild);
            return;
        }
    }

}
public sealed class AFloatOperand : POperand
{
    private TFloat _float_;

    public AFloatOperand ()
    {
    }

    public AFloatOperand (
            TFloat _float_
    )
    {
        SetFloat (_float_);
    }

    public override Object Clone()
    {
        return new AFloatOperand (
            (TFloat)CloneNode (_float_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAFloatOperand(this);
    }

    public TFloat GetFloat ()
    {
        return _float_;
    }

    public void SetFloat (TFloat node)
    {
        if(_float_ != null)
        {
            _float_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _float_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_float_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _float_ == child )
        {
            _float_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _float_ == oldChild )
        {
            SetFloat ((TFloat) newChild);
            return;
        }
    }

}
public sealed class AEngineeringOperand : POperand
{
    private TEngin _engin_;

    public AEngineeringOperand ()
    {
    }

    public AEngineeringOperand (
            TEngin _engin_
    )
    {
        SetEngin (_engin_);
    }

    public override Object Clone()
    {
        return new AEngineeringOperand (
            (TEngin)CloneNode (_engin_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEngineeringOperand(this);
    }

    public TEngin GetEngin ()
    {
        return _engin_;
    }

    public void SetEngin (TEngin node)
    {
        if(_engin_ != null)
        {
            _engin_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _engin_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_engin_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _engin_ == child )
        {
            _engin_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _engin_ == oldChild )
        {
            SetEngin ((TEngin) newChild);
            return;
        }
    }

}
public sealed class AStringOperand : POperand
{
    private TString _string_;

    public AStringOperand ()
    {
    }

    public AStringOperand (
            TString _string_
    )
    {
        SetString (_string_);
    }

    public override Object Clone()
    {
        return new AStringOperand (
            (TString)CloneNode (_string_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAStringOperand(this);
    }

    public TString GetString ()
    {
        return _string_;
    }

    public void SetString (TString node)
    {
        if(_string_ != null)
        {
            _string_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _string_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_string_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _string_ == child )
        {
            _string_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _string_ == oldChild )
        {
            SetString ((TString) newChild);
            return;
        }
    }

}
public sealed class AVariableOperand : POperand
{
    private TId _id_;

    public AVariableOperand ()
    {
    }

    public AVariableOperand (
            TId _id_
    )
    {
        SetId (_id_);
    }

    public override Object Clone()
    {
        return new AVariableOperand (
            (TId)CloneNode (_id_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAVariableOperand(this);
    }

    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_id_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
    }

}
public sealed class ABranch : PBranch
{
    private TIf _if_;
    private PIfCurls _if_curls_;
    private PIfSquares _if_squares_;
    private TThen _then_;
    private PThenSquares _then_squares_;

    public ABranch ()
    {
    }

    public ABranch (
            TIf _if_,
            PIfCurls _if_curls_,
            PIfSquares _if_squares_,
            TThen _then_,
            PThenSquares _then_squares_
    )
    {
        SetIf (_if_);
        SetIfCurls (_if_curls_);
        SetIfSquares (_if_squares_);
        SetThen (_then_);
        SetThenSquares (_then_squares_);
    }

    public override Object Clone()
    {
        return new ABranch (
            (TIf)CloneNode (_if_),
            (PIfCurls)CloneNode (_if_curls_),
            (PIfSquares)CloneNode (_if_squares_),
            (TThen)CloneNode (_then_),
            (PThenSquares)CloneNode (_then_squares_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseABranch(this);
    }

    public TIf GetIf ()
    {
        return _if_;
    }

    public void SetIf (TIf node)
    {
        if(_if_ != null)
        {
            _if_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_ = node;
    }
    public PIfCurls GetIfCurls ()
    {
        return _if_curls_;
    }

    public void SetIfCurls (PIfCurls node)
    {
        if(_if_curls_ != null)
        {
            _if_curls_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_curls_ = node;
    }
    public PIfSquares GetIfSquares ()
    {
        return _if_squares_;
    }

    public void SetIfSquares (PIfSquares node)
    {
        if(_if_squares_ != null)
        {
            _if_squares_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _if_squares_ = node;
    }
    public TThen GetThen ()
    {
        return _then_;
    }

    public void SetThen (TThen node)
    {
        if(_then_ != null)
        {
            _then_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _then_ = node;
    }
    public PThenSquares GetThenSquares ()
    {
        return _then_squares_;
    }

    public void SetThenSquares (PThenSquares node)
    {
        if(_then_squares_ != null)
        {
            _then_squares_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _then_squares_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_if_)
            + ToString (_if_curls_)
            + ToString (_if_squares_)
            + ToString (_then_)
            + ToString (_then_squares_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _if_ == child )
        {
            _if_ = null;
            return;
        }
        if ( _if_curls_ == child )
        {
            _if_curls_ = null;
            return;
        }
        if ( _if_squares_ == child )
        {
            _if_squares_ = null;
            return;
        }
        if ( _then_ == child )
        {
            _then_ = null;
            return;
        }
        if ( _then_squares_ == child )
        {
            _then_squares_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _if_ == oldChild )
        {
            SetIf ((TIf) newChild);
            return;
        }
        if ( _if_curls_ == oldChild )
        {
            SetIfCurls ((PIfCurls) newChild);
            return;
        }
        if ( _if_squares_ == oldChild )
        {
            SetIfSquares ((PIfSquares) newChild);
            return;
        }
        if ( _then_ == oldChild )
        {
            SetThen ((TThen) newChild);
            return;
        }
        if ( _then_squares_ == oldChild )
        {
            SetThenSquares ((PThenSquares) newChild);
            return;
        }
    }

}
public sealed class AIfCurls : PIfCurls
{
    private TLeftcurl _leftcurl_;
    private PLogical _logical_;
    private TRightcurl _rightcurl_;

    public AIfCurls ()
    {
    }

    public AIfCurls (
            TLeftcurl _leftcurl_,
            PLogical _logical_,
            TRightcurl _rightcurl_
    )
    {
        SetLeftcurl (_leftcurl_);
        SetLogical (_logical_);
        SetRightcurl (_rightcurl_);
    }

    public override Object Clone()
    {
        return new AIfCurls (
            (TLeftcurl)CloneNode (_leftcurl_),
            (PLogical)CloneNode (_logical_),
            (TRightcurl)CloneNode (_rightcurl_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfCurls(this);
    }

    public TLeftcurl GetLeftcurl ()
    {
        return _leftcurl_;
    }

    public void SetLeftcurl (TLeftcurl node)
    {
        if(_leftcurl_ != null)
        {
            _leftcurl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _leftcurl_ = node;
    }
    public PLogical GetLogical ()
    {
        return _logical_;
    }

    public void SetLogical (PLogical node)
    {
        if(_logical_ != null)
        {
            _logical_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logical_ = node;
    }
    public TRightcurl GetRightcurl ()
    {
        return _rightcurl_;
    }

    public void SetRightcurl (TRightcurl node)
    {
        if(_rightcurl_ != null)
        {
            _rightcurl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rightcurl_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_leftcurl_)
            + ToString (_logical_)
            + ToString (_rightcurl_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _leftcurl_ == child )
        {
            _leftcurl_ = null;
            return;
        }
        if ( _logical_ == child )
        {
            _logical_ = null;
            return;
        }
        if ( _rightcurl_ == child )
        {
            _rightcurl_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _leftcurl_ == oldChild )
        {
            SetLeftcurl ((TLeftcurl) newChild);
            return;
        }
        if ( _logical_ == oldChild )
        {
            SetLogical ((PLogical) newChild);
            return;
        }
        if ( _rightcurl_ == oldChild )
        {
            SetRightcurl ((TRightcurl) newChild);
            return;
        }
    }

}
public sealed class AIfSquares : PIfSquares
{
    private TLeftsquare _leftsquare_;
    private PStatements _statements_;
    private TRightsquare _rightsquare_;

    public AIfSquares ()
    {
    }

    public AIfSquares (
            TLeftsquare _leftsquare_,
            PStatements _statements_,
            TRightsquare _rightsquare_
    )
    {
        SetLeftsquare (_leftsquare_);
        SetStatements (_statements_);
        SetRightsquare (_rightsquare_);
    }

    public override Object Clone()
    {
        return new AIfSquares (
            (TLeftsquare)CloneNode (_leftsquare_),
            (PStatements)CloneNode (_statements_),
            (TRightsquare)CloneNode (_rightsquare_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIfSquares(this);
    }

    public TLeftsquare GetLeftsquare ()
    {
        return _leftsquare_;
    }

    public void SetLeftsquare (TLeftsquare node)
    {
        if(_leftsquare_ != null)
        {
            _leftsquare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _leftsquare_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRightsquare GetRightsquare ()
    {
        return _rightsquare_;
    }

    public void SetRightsquare (TRightsquare node)
    {
        if(_rightsquare_ != null)
        {
            _rightsquare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rightsquare_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_leftsquare_)
            + ToString (_statements_)
            + ToString (_rightsquare_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _leftsquare_ == child )
        {
            _leftsquare_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _rightsquare_ == child )
        {
            _rightsquare_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _leftsquare_ == oldChild )
        {
            SetLeftsquare ((TLeftsquare) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _rightsquare_ == oldChild )
        {
            SetRightsquare ((TRightsquare) newChild);
            return;
        }
    }

}
public sealed class AThenSquares : PThenSquares
{
    private TLeftsquare _leftsquare_;
    private PStatements _statements_;
    private TRightsquare _rightsquare_;

    public AThenSquares ()
    {
    }

    public AThenSquares (
            TLeftsquare _leftsquare_,
            PStatements _statements_,
            TRightsquare _rightsquare_
    )
    {
        SetLeftsquare (_leftsquare_);
        SetStatements (_statements_);
        SetRightsquare (_rightsquare_);
    }

    public override Object Clone()
    {
        return new AThenSquares (
            (TLeftsquare)CloneNode (_leftsquare_),
            (PStatements)CloneNode (_statements_),
            (TRightsquare)CloneNode (_rightsquare_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAThenSquares(this);
    }

    public TLeftsquare GetLeftsquare ()
    {
        return _leftsquare_;
    }

    public void SetLeftsquare (TLeftsquare node)
    {
        if(_leftsquare_ != null)
        {
            _leftsquare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _leftsquare_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRightsquare GetRightsquare ()
    {
        return _rightsquare_;
    }

    public void SetRightsquare (TRightsquare node)
    {
        if(_rightsquare_ != null)
        {
            _rightsquare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rightsquare_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_leftsquare_)
            + ToString (_statements_)
            + ToString (_rightsquare_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _leftsquare_ == child )
        {
            _leftsquare_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _rightsquare_ == child )
        {
            _rightsquare_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _leftsquare_ == oldChild )
        {
            SetLeftsquare ((TLeftsquare) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _rightsquare_ == oldChild )
        {
            SetRightsquare ((TRightsquare) newChild);
            return;
        }
    }

}
public sealed class AComplexLogicalExpressionLogical : PLogical
{
    private PLogical _logical_;
    private PBoolean _boolean_;
    private PComparison _comparison_;

    public AComplexLogicalExpressionLogical ()
    {
    }

    public AComplexLogicalExpressionLogical (
            PLogical _logical_,
            PBoolean _boolean_,
            PComparison _comparison_
    )
    {
        SetLogical (_logical_);
        SetBoolean (_boolean_);
        SetComparison (_comparison_);
    }

    public override Object Clone()
    {
        return new AComplexLogicalExpressionLogical (
            (PLogical)CloneNode (_logical_),
            (PBoolean)CloneNode (_boolean_),
            (PComparison)CloneNode (_comparison_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAComplexLogicalExpressionLogical(this);
    }

    public PLogical GetLogical ()
    {
        return _logical_;
    }

    public void SetLogical (PLogical node)
    {
        if(_logical_ != null)
        {
            _logical_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logical_ = node;
    }
    public PBoolean GetBoolean ()
    {
        return _boolean_;
    }

    public void SetBoolean (PBoolean node)
    {
        if(_boolean_ != null)
        {
            _boolean_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _boolean_ = node;
    }
    public PComparison GetComparison ()
    {
        return _comparison_;
    }

    public void SetComparison (PComparison node)
    {
        if(_comparison_ != null)
        {
            _comparison_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comparison_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_logical_)
            + ToString (_boolean_)
            + ToString (_comparison_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _logical_ == child )
        {
            _logical_ = null;
            return;
        }
        if ( _boolean_ == child )
        {
            _boolean_ = null;
            return;
        }
        if ( _comparison_ == child )
        {
            _comparison_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _logical_ == oldChild )
        {
            SetLogical ((PLogical) newChild);
            return;
        }
        if ( _boolean_ == oldChild )
        {
            SetBoolean ((PBoolean) newChild);
            return;
        }
        if ( _comparison_ == oldChild )
        {
            SetComparison ((PComparison) newChild);
            return;
        }
    }

}
public sealed class ASingleLogicalExpressionLogical : PLogical
{
    private PComparison _comparison_;

    public ASingleLogicalExpressionLogical ()
    {
    }

    public ASingleLogicalExpressionLogical (
            PComparison _comparison_
    )
    {
        SetComparison (_comparison_);
    }

    public override Object Clone()
    {
        return new ASingleLogicalExpressionLogical (
            (PComparison)CloneNode (_comparison_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseASingleLogicalExpressionLogical(this);
    }

    public PComparison GetComparison ()
    {
        return _comparison_;
    }

    public void SetComparison (PComparison node)
    {
        if(_comparison_ != null)
        {
            _comparison_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _comparison_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_comparison_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _comparison_ == child )
        {
            _comparison_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _comparison_ == oldChild )
        {
            SetComparison ((PComparison) newChild);
            return;
        }
    }

}
public sealed class AComparison : PComparison
{
    private PExpression _left_hand_expression_;
    private POperator _operator_;
    private PExpression _right_hand_expression_;

    public AComparison ()
    {
    }

    public AComparison (
            PExpression _left_hand_expression_,
            POperator _operator_,
            PExpression _right_hand_expression_
    )
    {
        SetLeftHandExpression (_left_hand_expression_);
        SetOperator (_operator_);
        SetRightHandExpression (_right_hand_expression_);
    }

    public override Object Clone()
    {
        return new AComparison (
            (PExpression)CloneNode (_left_hand_expression_),
            (POperator)CloneNode (_operator_),
            (PExpression)CloneNode (_right_hand_expression_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAComparison(this);
    }

    public PExpression GetLeftHandExpression ()
    {
        return _left_hand_expression_;
    }

    public void SetLeftHandExpression (PExpression node)
    {
        if(_left_hand_expression_ != null)
        {
            _left_hand_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _left_hand_expression_ = node;
    }
    public POperator GetOperator ()
    {
        return _operator_;
    }

    public void SetOperator (POperator node)
    {
        if(_operator_ != null)
        {
            _operator_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _operator_ = node;
    }
    public PExpression GetRightHandExpression ()
    {
        return _right_hand_expression_;
    }

    public void SetRightHandExpression (PExpression node)
    {
        if(_right_hand_expression_ != null)
        {
            _right_hand_expression_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _right_hand_expression_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_left_hand_expression_)
            + ToString (_operator_)
            + ToString (_right_hand_expression_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _left_hand_expression_ == child )
        {
            _left_hand_expression_ = null;
            return;
        }
        if ( _operator_ == child )
        {
            _operator_ = null;
            return;
        }
        if ( _right_hand_expression_ == child )
        {
            _right_hand_expression_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _left_hand_expression_ == oldChild )
        {
            SetLeftHandExpression ((PExpression) newChild);
            return;
        }
        if ( _operator_ == oldChild )
        {
            SetOperator ((POperator) newChild);
            return;
        }
        if ( _right_hand_expression_ == oldChild )
        {
            SetRightHandExpression ((PExpression) newChild);
            return;
        }
    }

}
public sealed class AGreaterThanOperator : POperator
{
    private TGrtr _grtr_;

    public AGreaterThanOperator ()
    {
    }

    public AGreaterThanOperator (
            TGrtr _grtr_
    )
    {
        SetGrtr (_grtr_);
    }

    public override Object Clone()
    {
        return new AGreaterThanOperator (
            (TGrtr)CloneNode (_grtr_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterThanOperator(this);
    }

    public TGrtr GetGrtr ()
    {
        return _grtr_;
    }

    public void SetGrtr (TGrtr node)
    {
        if(_grtr_ != null)
        {
            _grtr_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _grtr_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_grtr_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _grtr_ == child )
        {
            _grtr_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _grtr_ == oldChild )
        {
            SetGrtr ((TGrtr) newChild);
            return;
        }
    }

}
public sealed class AGreaterEqualOperator : POperator
{
    private TGrtreq _grtreq_;

    public AGreaterEqualOperator ()
    {
    }

    public AGreaterEqualOperator (
            TGrtreq _grtreq_
    )
    {
        SetGrtreq (_grtreq_);
    }

    public override Object Clone()
    {
        return new AGreaterEqualOperator (
            (TGrtreq)CloneNode (_grtreq_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAGreaterEqualOperator(this);
    }

    public TGrtreq GetGrtreq ()
    {
        return _grtreq_;
    }

    public void SetGrtreq (TGrtreq node)
    {
        if(_grtreq_ != null)
        {
            _grtreq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _grtreq_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_grtreq_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _grtreq_ == child )
        {
            _grtreq_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _grtreq_ == oldChild )
        {
            SetGrtreq ((TGrtreq) newChild);
            return;
        }
    }

}
public sealed class AEqualOperator : POperator
{
    private TEqual _equal_;

    public AEqualOperator ()
    {
    }

    public AEqualOperator (
            TEqual _equal_
    )
    {
        SetEqual (_equal_);
    }

    public override Object Clone()
    {
        return new AEqualOperator (
            (TEqual)CloneNode (_equal_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAEqualOperator(this);
    }

    public TEqual GetEqual ()
    {
        return _equal_;
    }

    public void SetEqual (TEqual node)
    {
        if(_equal_ != null)
        {
            _equal_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _equal_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_equal_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _equal_ == child )
        {
            _equal_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _equal_ == oldChild )
        {
            SetEqual ((TEqual) newChild);
            return;
        }
    }

}
public sealed class ALessThanOperator : POperator
{
    private TLess _less_;

    public ALessThanOperator ()
    {
    }

    public ALessThanOperator (
            TLess _less_
    )
    {
        SetLess (_less_);
    }

    public override Object Clone()
    {
        return new ALessThanOperator (
            (TLess)CloneNode (_less_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessThanOperator(this);
    }

    public TLess GetLess ()
    {
        return _less_;
    }

    public void SetLess (TLess node)
    {
        if(_less_ != null)
        {
            _less_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _less_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_less_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _less_ == child )
        {
            _less_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _less_ == oldChild )
        {
            SetLess ((TLess) newChild);
            return;
        }
    }

}
public sealed class ALessEqualOperator : POperator
{
    private TLesseq _lesseq_;

    public ALessEqualOperator ()
    {
    }

    public ALessEqualOperator (
            TLesseq _lesseq_
    )
    {
        SetLesseq (_lesseq_);
    }

    public override Object Clone()
    {
        return new ALessEqualOperator (
            (TLesseq)CloneNode (_lesseq_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseALessEqualOperator(this);
    }

    public TLesseq GetLesseq ()
    {
        return _lesseq_;
    }

    public void SetLesseq (TLesseq node)
    {
        if(_lesseq_ != null)
        {
            _lesseq_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _lesseq_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_lesseq_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _lesseq_ == child )
        {
            _lesseq_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _lesseq_ == oldChild )
        {
            SetLesseq ((TLesseq) newChild);
            return;
        }
    }

}
public sealed class AAndBoolean : PBoolean
{
    private TAnd _and_;

    public AAndBoolean ()
    {
    }

    public AAndBoolean (
            TAnd _and_
    )
    {
        SetAnd (_and_);
    }

    public override Object Clone()
    {
        return new AAndBoolean (
            (TAnd)CloneNode (_and_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAAndBoolean(this);
    }

    public TAnd GetAnd ()
    {
        return _and_;
    }

    public void SetAnd (TAnd node)
    {
        if(_and_ != null)
        {
            _and_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _and_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_and_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _and_ == child )
        {
            _and_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _and_ == oldChild )
        {
            SetAnd ((TAnd) newChild);
            return;
        }
    }

}
public sealed class AOrBoolean : PBoolean
{
    private TOr _or_;

    public AOrBoolean ()
    {
    }

    public AOrBoolean (
            TOr _or_
    )
    {
        SetOr (_or_);
    }

    public override Object Clone()
    {
        return new AOrBoolean (
            (TOr)CloneNode (_or_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAOrBoolean(this);
    }

    public TOr GetOr ()
    {
        return _or_;
    }

    public void SetOr (TOr node)
    {
        if(_or_ != null)
        {
            _or_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _or_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_or_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _or_ == child )
        {
            _or_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _or_ == oldChild )
        {
            SetOr ((TOr) newChild);
            return;
        }
    }

}
public sealed class ANotBoolean : PBoolean
{
    private TNot _not_;

    public ANotBoolean ()
    {
    }

    public ANotBoolean (
            TNot _not_
    )
    {
        SetNot (_not_);
    }

    public override Object Clone()
    {
        return new ANotBoolean (
            (TNot)CloneNode (_not_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseANotBoolean(this);
    }

    public TNot GetNot ()
    {
        return _not_;
    }

    public void SetNot (TNot node)
    {
        if(_not_ != null)
        {
            _not_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _not_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_not_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _not_ == child )
        {
            _not_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _not_ == oldChild )
        {
            SetNot ((TNot) newChild);
            return;
        }
    }

}
public sealed class AIterate : PIterate
{
    private TLoop _loop_;
    private TLeftcurl _leftcurl_;
    private PLogical _logical_;
    private TRightcurl _rightcurl_;
    private TLeftsquare _leftsquare_;
    private PStatements _statements_;
    private TRightsquare _rightsquare_;

    public AIterate ()
    {
    }

    public AIterate (
            TLoop _loop_,
            TLeftcurl _leftcurl_,
            PLogical _logical_,
            TRightcurl _rightcurl_,
            TLeftsquare _leftsquare_,
            PStatements _statements_,
            TRightsquare _rightsquare_
    )
    {
        SetLoop (_loop_);
        SetLeftcurl (_leftcurl_);
        SetLogical (_logical_);
        SetRightcurl (_rightcurl_);
        SetLeftsquare (_leftsquare_);
        SetStatements (_statements_);
        SetRightsquare (_rightsquare_);
    }

    public override Object Clone()
    {
        return new AIterate (
            (TLoop)CloneNode (_loop_),
            (TLeftcurl)CloneNode (_leftcurl_),
            (PLogical)CloneNode (_logical_),
            (TRightcurl)CloneNode (_rightcurl_),
            (TLeftsquare)CloneNode (_leftsquare_),
            (PStatements)CloneNode (_statements_),
            (TRightsquare)CloneNode (_rightsquare_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAIterate(this);
    }

    public TLoop GetLoop ()
    {
        return _loop_;
    }

    public void SetLoop (TLoop node)
    {
        if(_loop_ != null)
        {
            _loop_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _loop_ = node;
    }
    public TLeftcurl GetLeftcurl ()
    {
        return _leftcurl_;
    }

    public void SetLeftcurl (TLeftcurl node)
    {
        if(_leftcurl_ != null)
        {
            _leftcurl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _leftcurl_ = node;
    }
    public PLogical GetLogical ()
    {
        return _logical_;
    }

    public void SetLogical (PLogical node)
    {
        if(_logical_ != null)
        {
            _logical_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _logical_ = node;
    }
    public TRightcurl GetRightcurl ()
    {
        return _rightcurl_;
    }

    public void SetRightcurl (TRightcurl node)
    {
        if(_rightcurl_ != null)
        {
            _rightcurl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rightcurl_ = node;
    }
    public TLeftsquare GetLeftsquare ()
    {
        return _leftsquare_;
    }

    public void SetLeftsquare (TLeftsquare node)
    {
        if(_leftsquare_ != null)
        {
            _leftsquare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _leftsquare_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRightsquare GetRightsquare ()
    {
        return _rightsquare_;
    }

    public void SetRightsquare (TRightsquare node)
    {
        if(_rightsquare_ != null)
        {
            _rightsquare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rightsquare_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_loop_)
            + ToString (_leftcurl_)
            + ToString (_logical_)
            + ToString (_rightcurl_)
            + ToString (_leftsquare_)
            + ToString (_statements_)
            + ToString (_rightsquare_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _loop_ == child )
        {
            _loop_ = null;
            return;
        }
        if ( _leftcurl_ == child )
        {
            _leftcurl_ = null;
            return;
        }
        if ( _logical_ == child )
        {
            _logical_ = null;
            return;
        }
        if ( _rightcurl_ == child )
        {
            _rightcurl_ = null;
            return;
        }
        if ( _leftsquare_ == child )
        {
            _leftsquare_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _rightsquare_ == child )
        {
            _rightsquare_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _loop_ == oldChild )
        {
            SetLoop ((TLoop) newChild);
            return;
        }
        if ( _leftcurl_ == oldChild )
        {
            SetLeftcurl ((TLeftcurl) newChild);
            return;
        }
        if ( _logical_ == oldChild )
        {
            SetLogical ((PLogical) newChild);
            return;
        }
        if ( _rightcurl_ == oldChild )
        {
            SetRightcurl ((TRightcurl) newChild);
            return;
        }
        if ( _leftsquare_ == oldChild )
        {
            SetLeftsquare ((TLeftsquare) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _rightsquare_ == oldChild )
        {
            SetRightsquare ((TRightsquare) newChild);
            return;
        }
    }

}
public sealed class AHelperDeclare : PHelperDeclare
{
    private TFunc _func_;
    private TId _id_;
    private TLeftcurl _leftcurl_;
    private PParameters _parameters_;
    private TRightcurl _rightcurl_;
    private TLeftsquare _leftsquare_;
    private PStatements _statements_;
    private TRightsquare _rightsquare_;

    public AHelperDeclare ()
    {
    }

    public AHelperDeclare (
            TFunc _func_,
            TId _id_,
            TLeftcurl _leftcurl_,
            PParameters _parameters_,
            TRightcurl _rightcurl_,
            TLeftsquare _leftsquare_,
            PStatements _statements_,
            TRightsquare _rightsquare_
    )
    {
        SetFunc (_func_);
        SetId (_id_);
        SetLeftcurl (_leftcurl_);
        SetParameters (_parameters_);
        SetRightcurl (_rightcurl_);
        SetLeftsquare (_leftsquare_);
        SetStatements (_statements_);
        SetRightsquare (_rightsquare_);
    }

    public override Object Clone()
    {
        return new AHelperDeclare (
            (TFunc)CloneNode (_func_),
            (TId)CloneNode (_id_),
            (TLeftcurl)CloneNode (_leftcurl_),
            (PParameters)CloneNode (_parameters_),
            (TRightcurl)CloneNode (_rightcurl_),
            (TLeftsquare)CloneNode (_leftsquare_),
            (PStatements)CloneNode (_statements_),
            (TRightsquare)CloneNode (_rightsquare_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAHelperDeclare(this);
    }

    public TFunc GetFunc ()
    {
        return _func_;
    }

    public void SetFunc (TFunc node)
    {
        if(_func_ != null)
        {
            _func_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _func_ = node;
    }
    public TId GetId ()
    {
        return _id_;
    }

    public void SetId (TId node)
    {
        if(_id_ != null)
        {
            _id_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _id_ = node;
    }
    public TLeftcurl GetLeftcurl ()
    {
        return _leftcurl_;
    }

    public void SetLeftcurl (TLeftcurl node)
    {
        if(_leftcurl_ != null)
        {
            _leftcurl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _leftcurl_ = node;
    }
    public PParameters GetParameters ()
    {
        return _parameters_;
    }

    public void SetParameters (PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameters_ = node;
    }
    public TRightcurl GetRightcurl ()
    {
        return _rightcurl_;
    }

    public void SetRightcurl (TRightcurl node)
    {
        if(_rightcurl_ != null)
        {
            _rightcurl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rightcurl_ = node;
    }
    public TLeftsquare GetLeftsquare ()
    {
        return _leftsquare_;
    }

    public void SetLeftsquare (TLeftsquare node)
    {
        if(_leftsquare_ != null)
        {
            _leftsquare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _leftsquare_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRightsquare GetRightsquare ()
    {
        return _rightsquare_;
    }

    public void SetRightsquare (TRightsquare node)
    {
        if(_rightsquare_ != null)
        {
            _rightsquare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rightsquare_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_func_)
            + ToString (_id_)
            + ToString (_leftcurl_)
            + ToString (_parameters_)
            + ToString (_rightcurl_)
            + ToString (_leftsquare_)
            + ToString (_statements_)
            + ToString (_rightsquare_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _func_ == child )
        {
            _func_ = null;
            return;
        }
        if ( _id_ == child )
        {
            _id_ = null;
            return;
        }
        if ( _leftcurl_ == child )
        {
            _leftcurl_ = null;
            return;
        }
        if ( _parameters_ == child )
        {
            _parameters_ = null;
            return;
        }
        if ( _rightcurl_ == child )
        {
            _rightcurl_ = null;
            return;
        }
        if ( _leftsquare_ == child )
        {
            _leftsquare_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _rightsquare_ == child )
        {
            _rightsquare_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _func_ == oldChild )
        {
            SetFunc ((TFunc) newChild);
            return;
        }
        if ( _id_ == oldChild )
        {
            SetId ((TId) newChild);
            return;
        }
        if ( _leftcurl_ == oldChild )
        {
            SetLeftcurl ((TLeftcurl) newChild);
            return;
        }
        if ( _parameters_ == oldChild )
        {
            SetParameters ((PParameters) newChild);
            return;
        }
        if ( _rightcurl_ == oldChild )
        {
            SetRightcurl ((TRightcurl) newChild);
            return;
        }
        if ( _leftsquare_ == oldChild )
        {
            SetLeftsquare ((TLeftsquare) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _rightsquare_ == oldChild )
        {
            SetRightsquare ((TRightsquare) newChild);
            return;
        }
    }

}
public sealed class AMainDeclare : PMainDeclare
{
    private TMain _main_;
    private TLeftcurl _leftcurl_;
    private PParameters _parameters_;
    private TRightcurl _rightcurl_;
    private TLeftsquare _leftsquare_;
    private PStatements _statements_;
    private TRightsquare _rightsquare_;

    public AMainDeclare ()
    {
    }

    public AMainDeclare (
            TMain _main_,
            TLeftcurl _leftcurl_,
            PParameters _parameters_,
            TRightcurl _rightcurl_,
            TLeftsquare _leftsquare_,
            PStatements _statements_,
            TRightsquare _rightsquare_
    )
    {
        SetMain (_main_);
        SetLeftcurl (_leftcurl_);
        SetParameters (_parameters_);
        SetRightcurl (_rightcurl_);
        SetLeftsquare (_leftsquare_);
        SetStatements (_statements_);
        SetRightsquare (_rightsquare_);
    }

    public override Object Clone()
    {
        return new AMainDeclare (
            (TMain)CloneNode (_main_),
            (TLeftcurl)CloneNode (_leftcurl_),
            (PParameters)CloneNode (_parameters_),
            (TRightcurl)CloneNode (_rightcurl_),
            (TLeftsquare)CloneNode (_leftsquare_),
            (PStatements)CloneNode (_statements_),
            (TRightsquare)CloneNode (_rightsquare_)
        );
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseAMainDeclare(this);
    }

    public TMain GetMain ()
    {
        return _main_;
    }

    public void SetMain (TMain node)
    {
        if(_main_ != null)
        {
            _main_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _main_ = node;
    }
    public TLeftcurl GetLeftcurl ()
    {
        return _leftcurl_;
    }

    public void SetLeftcurl (TLeftcurl node)
    {
        if(_leftcurl_ != null)
        {
            _leftcurl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _leftcurl_ = node;
    }
    public PParameters GetParameters ()
    {
        return _parameters_;
    }

    public void SetParameters (PParameters node)
    {
        if(_parameters_ != null)
        {
            _parameters_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _parameters_ = node;
    }
    public TRightcurl GetRightcurl ()
    {
        return _rightcurl_;
    }

    public void SetRightcurl (TRightcurl node)
    {
        if(_rightcurl_ != null)
        {
            _rightcurl_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rightcurl_ = node;
    }
    public TLeftsquare GetLeftsquare ()
    {
        return _leftsquare_;
    }

    public void SetLeftsquare (TLeftsquare node)
    {
        if(_leftsquare_ != null)
        {
            _leftsquare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _leftsquare_ = node;
    }
    public PStatements GetStatements ()
    {
        return _statements_;
    }

    public void SetStatements (PStatements node)
    {
        if(_statements_ != null)
        {
            _statements_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _statements_ = node;
    }
    public TRightsquare GetRightsquare ()
    {
        return _rightsquare_;
    }

    public void SetRightsquare (TRightsquare node)
    {
        if(_rightsquare_ != null)
        {
            _rightsquare_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _rightsquare_ = node;
    }

    public override string ToString()
    {
        return ""
            + ToString (_main_)
            + ToString (_leftcurl_)
            + ToString (_parameters_)
            + ToString (_rightcurl_)
            + ToString (_leftsquare_)
            + ToString (_statements_)
            + ToString (_rightsquare_)
        ;
    }

    internal override void RemoveChild(Node child)
    {
        if ( _main_ == child )
        {
            _main_ = null;
            return;
        }
        if ( _leftcurl_ == child )
        {
            _leftcurl_ = null;
            return;
        }
        if ( _parameters_ == child )
        {
            _parameters_ = null;
            return;
        }
        if ( _rightcurl_ == child )
        {
            _rightcurl_ = null;
            return;
        }
        if ( _leftsquare_ == child )
        {
            _leftsquare_ = null;
            return;
        }
        if ( _statements_ == child )
        {
            _statements_ = null;
            return;
        }
        if ( _rightsquare_ == child )
        {
            _rightsquare_ = null;
            return;
        }
    }

    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if ( _main_ == oldChild )
        {
            SetMain ((TMain) newChild);
            return;
        }
        if ( _leftcurl_ == oldChild )
        {
            SetLeftcurl ((TLeftcurl) newChild);
            return;
        }
        if ( _parameters_ == oldChild )
        {
            SetParameters ((PParameters) newChild);
            return;
        }
        if ( _rightcurl_ == oldChild )
        {
            SetRightcurl ((TRightcurl) newChild);
            return;
        }
        if ( _leftsquare_ == oldChild )
        {
            SetLeftsquare ((TLeftsquare) newChild);
            return;
        }
        if ( _statements_ == oldChild )
        {
            SetStatements ((PStatements) newChild);
            return;
        }
        if ( _rightsquare_ == oldChild )
        {
            SetRightsquare ((TRightsquare) newChild);
            return;
        }
    }

}

public sealed class Start : Node
{
    private PProgram _base_;
    private EOF _eof_;

    public Start()
    {
    }

    public Start(
        PProgram _base_,
        EOF _eof_)
    {
        SetPProgram(_base_);
        SetEOF(_eof_);
    }

    public override Object Clone()
    {
        return new Start(
            (PProgram) CloneNode(_base_),
            (EOF) CloneNode(_eof_));
    }

    public override void Apply(Switch sw)
    {
        ((Analysis) sw).CaseStart(this);
    }

    public PProgram GetPProgram()
    {
        return _base_;
    }
    public void SetPProgram(PProgram node)
    {
        if(_base_ != null)
        {
            _base_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _base_ = node;
    }

    public EOF GetEOF()
    {
        return _eof_;
    }
    public void SetEOF(EOF node)
    {
        if(_eof_ != null)
        {
            _eof_.Parent(null);
        }

        if(node != null)
        {
            if(node.Parent() != null)
            {
                node.Parent().RemoveChild(node);
            }

            node.Parent(this);
        }

        _eof_ = node;
    }

    internal override void RemoveChild(Node child)
    {
        if(_base_ == child)
        {
            _base_ = null;
            return;
        }

        if(_eof_ == child)
        {
            _eof_ = null;
            return;
        }
    }
    internal override void ReplaceChild(Node oldChild, Node newChild)
    {
        if(_base_ == oldChild)
        {
            SetPProgram((PProgram) newChild);
            return;
        }

        if(_eof_ == oldChild)
        {
            SetEOF((EOF) newChild);
            return;
        }
    }

    public override string ToString()
    {
        return "" +
            ToString(_base_) +
            ToString(_eof_);
    }
}
}
