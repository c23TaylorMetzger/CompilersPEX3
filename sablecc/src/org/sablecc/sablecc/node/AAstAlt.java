/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.sablecc.node;

import java.util.*;
import org.sablecc.sablecc.analysis.*;

public final class AAstAlt extends PAstAlt
{
    private TId _alt_name_;
    private final LinkedList _elems_ = new TypedLinkedList(new Elems_Cast());

    public AAstAlt ()
    {
    }

    public AAstAlt (
            TId _alt_name_,
            List _elems_
    )
    {
        setAltName (_alt_name_);
        this._elems_.clear();
        this._elems_.addAll(_elems_);
    }

    public Object clone()
    {
        return new AAstAlt (
            (TId)cloneNode (_alt_name_),
            cloneList (_elems_)
        );
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAstAlt(this);
    }

    public TId getAltName ()
    {
        return _alt_name_;
    }

    public void setAltName (TId node)
    {
        if(_alt_name_ != null)
        {
            _alt_name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _alt_name_ = node;
    }
    public LinkedList getElems ()
    {
        return _elems_;
    }

    public void setElems (List list)
    {
        _elems_.clear();
        _elems_.addAll(list);
    }

    public String toString()
    {
        return ""
            + toString (_alt_name_)
            + toString (_elems_)
        ;
    }

    void removeChild(Node child)
    {
        if ( _alt_name_ == child )
        {
            _alt_name_ = null;
            return;
        }
        if ( _elems_.remove(child))
        {
            return;
        }
    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if ( _alt_name_ == oldChild )
        {
            setAltName ((TId) newChild);
            return;
        }
        for(ListIterator i = _elems_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set(newChild);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }
    }

    private class Elems_Cast implements Cast
    {
        public Object cast(Object o)
        {
            PElem node = (PElem) o;

            if((node.parent() != null) &&
                (node.parent() != AAstAlt.this))
            {
                node.parent().removeChild(node);
            }

            if((node.parent() == null) ||
                (node.parent() != AAstAlt.this))
            {
                node.parent(AAstAlt.this);
            }

            return node;
        }
    }
}
